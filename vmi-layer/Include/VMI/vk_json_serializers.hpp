/******************************************************************************
 * Generated file: vk_json_serializers.h
 *
 * This file is autogenerated by gen_json_serializer.py.
 * Do not edit manually.
 ******************************************************************************/

#pragma once

#include <nlohmann/json.hpp>
#include <vulkan/vulkan.h>
#include <string>
#include <vulkan/vk_enum_string_helper.h>

using json = nlohmann::json;


inline std::string ToJson(const VkBaseOutStructure &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkBaseInStructure &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkOffset2D &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    return j.dump();
}

inline std::string ToJson(const VkOffset3D &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    j["z"] = s.z;
    return j.dump();
}

inline std::string ToJson(const VkExtent2D &s) {
    json j;
    j["width"] = s.width;
    j["height"] = s.height;
    return j.dump();
}

inline std::string ToJson(const VkExtent3D &s) {
    json j;
    j["width"] = s.width;
    j["height"] = s.height;
    j["depth"] = s.depth;
    return j.dump();
}

inline std::string ToJson(const VkViewport &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    j["width"] = s.width;
    j["height"] = s.height;
    j["minDepth"] = s.minDepth;
    j["maxDepth"] = s.maxDepth;
    return j.dump();
}

inline std::string ToJson(const VkRect2D &s) {
    json j;
    j["offset"] = s.offset;
    j["extent"] = s.extent;
    return j.dump();
}

inline std::string ToJson(const VkClearRect &s) {
    json j;
    j["rect"] = s.rect;
    j["baseArrayLayer"] = s.baseArrayLayer;
    j["layerCount"] = s.layerCount;
    return j.dump();
}

inline std::string ToJson(const VkComponentMapping &s) {
    json j;
    j["r"] = s.r;
    j["g"] = s.g;
    j["b"] = s.b;
    j["a"] = s.a;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProperties &s) {
    json j;
    j["apiVersion"] = s.apiVersion;
    j["driverVersion"] = s.driverVersion;
    j["vendorID"] = s.vendorID;
    j["deviceID"] = s.deviceID;
    j["deviceType"] = s.deviceType;
    j["deviceName"] = s.deviceName;
    j["pipelineCacheUUID"] = s.pipelineCacheUUID;
    j["limits"] = s.limits;
    j["sparseProperties"] = s.sparseProperties;
    return j.dump();
}

inline std::string ToJson(const VkExtensionProperties &s) {
    json j;
    j["extensionName"] = s.extensionName;
    j["specVersion"] = s.specVersion;
    return j.dump();
}

inline std::string ToJson(const VkLayerProperties &s) {
    json j;
    j["layerName"] = s.layerName;
    j["specVersion"] = s.specVersion;
    j["implementationVersion"] = s.implementationVersion;
    j["description"] = s.description;
    return j.dump();
}

inline std::string ToJson(const VkApplicationInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pApplicationName"] = s.pApplicationName;
    j["applicationVersion"] = s.applicationVersion;
    j["pEngineName"] = s.pEngineName;
    j["engineVersion"] = s.engineVersion;
    j["apiVersion"] = s.apiVersion;
    return j.dump();
}

inline std::string ToJson(const VkAllocationCallbacks &s) {
    json j;
    j["pUserData"] = s.pUserData;
    j["pfnAllocation"] = s.pfnAllocation;
    j["pfnReallocation"] = s.pfnReallocation;
    j["pfnFree"] = s.pfnFree;
    j["pfnInternalAllocation"] = s.pfnInternalAllocation;
    j["pfnInternalFree"] = s.pfnInternalFree;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["queueFamilyIndex"] = s.queueFamilyIndex;
    j["queueCount"] = s.queueCount;
    j["pQueuePriorities"] = s.pQueuePriorities;
    return j.dump();
}

inline std::string ToJson(const VkDeviceCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["queueCreateInfoCount"] = s.queueCreateInfoCount;
    j["pQueueCreateInfos"] = s.pQueueCreateInfos;
    j["enabledLayerCount"] = s.enabledLayerCount;
    j["ppEnabledLayerNames"] = s.ppEnabledLayerNames;
    j["enabledExtensionCount"] = s.enabledExtensionCount;
    j["ppEnabledExtensionNames"] = s.ppEnabledExtensionNames;
    j["pEnabledFeatures"] = s.pEnabledFeatures;
    return j.dump();
}

inline std::string ToJson(const VkInstanceCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pApplicationInfo"] = s.pApplicationInfo;
    j["enabledLayerCount"] = s.enabledLayerCount;
    j["ppEnabledLayerNames"] = s.ppEnabledLayerNames;
    j["enabledExtensionCount"] = s.enabledExtensionCount;
    j["ppEnabledExtensionNames"] = s.ppEnabledExtensionNames;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyProperties &s) {
    json j;
    j["queueFlags"] = s.queueFlags;
    j["queueCount"] = s.queueCount;
    j["timestampValidBits"] = s.timestampValidBits;
    j["minImageTransferGranularity"] = s.minImageTransferGranularity;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryProperties &s) {
    json j;
    j["memoryTypeCount"] = s.memoryTypeCount;
    j["memoryTypes"] = s.memoryTypes;
    j["memoryHeapCount"] = s.memoryHeapCount;
    j["memoryHeaps"] = s.memoryHeaps;
    return j.dump();
}

inline std::string ToJson(const VkMemoryAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["allocationSize"] = s.allocationSize;
    j["memoryTypeIndex"] = s.memoryTypeIndex;
    return j.dump();
}

inline std::string ToJson(const VkMemoryRequirements &s) {
    json j;
    j["size"] = s.size;
    j["alignment"] = s.alignment;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageFormatProperties &s) {
    json j;
    j["aspectMask"] = s.aspectMask;
    j["imageGranularity"] = s.imageGranularity;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageMemoryRequirements &s) {
    json j;
    j["formatProperties"] = s.formatProperties;
    j["imageMipTailFirstLod"] = s.imageMipTailFirstLod;
    j["imageMipTailSize"] = s.imageMipTailSize;
    j["imageMipTailOffset"] = s.imageMipTailOffset;
    j["imageMipTailStride"] = s.imageMipTailStride;
    return j.dump();
}

inline std::string ToJson(const VkMemoryType &s) {
    json j;
    j["propertyFlags"] = s.propertyFlags;
    j["heapIndex"] = s.heapIndex;
    return j.dump();
}

inline std::string ToJson(const VkMemoryHeap &s) {
    json j;
    j["size"] = s.size;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkMappedMemoryRange &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkFormatProperties &s) {
    json j;
    j["linearTilingFeatures"] = s.linearTilingFeatures;
    j["optimalTilingFeatures"] = s.optimalTilingFeatures;
    j["bufferFeatures"] = s.bufferFeatures;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatProperties &s) {
    json j;
    j["maxExtent"] = s.maxExtent;
    j["maxMipLevels"] = s.maxMipLevels;
    j["maxArrayLayers"] = s.maxArrayLayers;
    j["sampleCounts"] = s.sampleCounts;
    j["maxResourceSize"] = s.maxResourceSize;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorBufferInfo &s) {
    json j;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["range"] = s.range;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorImageInfo &s) {
    json j;
    j["sampler"] = s.sampler;
    j["imageView"] = s.imageView;
    j["imageLayout"] = s.imageLayout;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSet &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dstSet"] = s.dstSet;
    j["dstBinding"] = s.dstBinding;
    j["dstArrayElement"] = s.dstArrayElement;
    j["descriptorCount"] = s.descriptorCount;
    j["descriptorType"] = s.descriptorType;
    j["pImageInfo"] = s.pImageInfo;
    j["pBufferInfo"] = s.pBufferInfo;
    j["pTexelBufferView"] = s.pTexelBufferView;
    return j.dump();
}

inline std::string ToJson(const VkCopyDescriptorSet &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSet"] = s.srcSet;
    j["srcBinding"] = s.srcBinding;
    j["srcArrayElement"] = s.srcArrayElement;
    j["dstSet"] = s.dstSet;
    j["dstBinding"] = s.dstBinding;
    j["dstArrayElement"] = s.dstArrayElement;
    j["descriptorCount"] = s.descriptorCount;
    return j.dump();
}

inline std::string ToJson(const VkBufferUsageFlags2CreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["usage"] = s.usage;
    return j.dump();
}

inline std::string ToJson(const VkBufferUsageFlags2CreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["size"] = s.size;
    j["usage"] = s.usage;
    j["sharingMode"] = s.sharingMode;
    j["queueFamilyIndexCount"] = s.queueFamilyIndexCount;
    j["pQueueFamilyIndices"] = s.pQueueFamilyIndices;
    return j.dump();
}

inline std::string ToJson(const VkBufferViewCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["buffer"] = s.buffer;
    j["format"] = s.format;
    j["offset"] = s.offset;
    j["range"] = s.range;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresource &s) {
    json j;
    j["aspectMask"] = s.aspectMask;
    j["mipLevel"] = s.mipLevel;
    j["arrayLayer"] = s.arrayLayer;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresourceLayers &s) {
    json j;
    j["aspectMask"] = s.aspectMask;
    j["mipLevel"] = s.mipLevel;
    j["baseArrayLayer"] = s.baseArrayLayer;
    j["layerCount"] = s.layerCount;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresourceRange &s) {
    json j;
    j["aspectMask"] = s.aspectMask;
    j["baseMipLevel"] = s.baseMipLevel;
    j["levelCount"] = s.levelCount;
    j["baseArrayLayer"] = s.baseArrayLayer;
    j["layerCount"] = s.layerCount;
    return j.dump();
}

inline std::string ToJson(const VkMemoryBarrier &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstAccessMask"] = s.dstAccessMask;
    return j.dump();
}

inline std::string ToJson(const VkBufferMemoryBarrier &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["srcQueueFamilyIndex"] = s.srcQueueFamilyIndex;
    j["dstQueueFamilyIndex"] = s.dstQueueFamilyIndex;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkImageMemoryBarrier &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["oldLayout"] = s.oldLayout;
    j["newLayout"] = s.newLayout;
    j["srcQueueFamilyIndex"] = s.srcQueueFamilyIndex;
    j["dstQueueFamilyIndex"] = s.dstQueueFamilyIndex;
    j["image"] = s.image;
    j["subresourceRange"] = s.subresourceRange;
    return j.dump();
}

inline std::string ToJson(const VkImageCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["imageType"] = s.imageType;
    j["format"] = s.format;
    j["extent"] = s.extent;
    j["mipLevels"] = s.mipLevels;
    j["arrayLayers"] = s.arrayLayers;
    j["samples"] = s.samples;
    j["tiling"] = s.tiling;
    j["usage"] = s.usage;
    j["sharingMode"] = s.sharingMode;
    j["queueFamilyIndexCount"] = s.queueFamilyIndexCount;
    j["pQueueFamilyIndices"] = s.pQueueFamilyIndices;
    j["initialLayout"] = s.initialLayout;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceLayout &s) {
    json j;
    j["offset"] = s.offset;
    j["size"] = s.size;
    j["rowPitch"] = s.rowPitch;
    j["arrayPitch"] = s.arrayPitch;
    j["depthPitch"] = s.depthPitch;
    return j.dump();
}

inline std::string ToJson(const VkImageViewCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["image"] = s.image;
    j["viewType"] = s.viewType;
    j["format"] = s.format;
    j["components"] = s.components;
    j["subresourceRange"] = s.subresourceRange;
    return j.dump();
}

inline std::string ToJson(const VkBufferCopy &s) {
    json j;
    j["srcOffset"] = s.srcOffset;
    j["dstOffset"] = s.dstOffset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkSparseMemoryBind &s) {
    json j;
    j["resourceOffset"] = s.resourceOffset;
    j["size"] = s.size;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageMemoryBind &s) {
    json j;
    j["subresource"] = s.subresource;
    j["offset"] = s.offset;
    j["extent"] = s.extent;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkSparseBufferMemoryBindInfo &s) {
    json j;
    j["buffer"] = s.buffer;
    j["bindCount"] = s.bindCount;
    j["pBinds"] = s.pBinds;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageOpaqueMemoryBindInfo &s) {
    json j;
    j["image"] = s.image;
    j["bindCount"] = s.bindCount;
    j["pBinds"] = s.pBinds;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageMemoryBindInfo &s) {
    json j;
    j["image"] = s.image;
    j["bindCount"] = s.bindCount;
    j["pBinds"] = s.pBinds;
    return j.dump();
}

inline std::string ToJson(const VkBindSparseInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreCount"] = s.waitSemaphoreCount;
    j["pWaitSemaphores"] = s.pWaitSemaphores;
    j["bufferBindCount"] = s.bufferBindCount;
    j["pBufferBinds"] = s.pBufferBinds;
    j["imageOpaqueBindCount"] = s.imageOpaqueBindCount;
    j["pImageOpaqueBinds"] = s.pImageOpaqueBinds;
    j["imageBindCount"] = s.imageBindCount;
    j["pImageBinds"] = s.pImageBinds;
    j["signalSemaphoreCount"] = s.signalSemaphoreCount;
    j["pSignalSemaphores"] = s.pSignalSemaphores;
    return j.dump();
}

inline std::string ToJson(const VkImageCopy &s) {
    json j;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffset"] = s.srcOffset;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffset"] = s.dstOffset;
    j["extent"] = s.extent;
    return j.dump();
}

inline std::string ToJson(const VkImageBlit &s) {
    json j;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffsets"] = s.srcOffsets;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffsets"] = s.dstOffsets;
    return j.dump();
}

inline std::string ToJson(const VkBufferImageCopy &s) {
    json j;
    j["bufferOffset"] = s.bufferOffset;
    j["bufferRowLength"] = s.bufferRowLength;
    j["bufferImageHeight"] = s.bufferImageHeight;
    j["imageSubresource"] = s.imageSubresource;
    j["imageOffset"] = s.imageOffset;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryIndirectCommandNV &s) {
    json j;
    j["srcAddress"] = s.srcAddress;
    j["dstAddress"] = s.dstAddress;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryToImageIndirectCommandNV &s) {
    json j;
    j["srcAddress"] = s.srcAddress;
    j["bufferRowLength"] = s.bufferRowLength;
    j["bufferImageHeight"] = s.bufferImageHeight;
    j["imageSubresource"] = s.imageSubresource;
    j["imageOffset"] = s.imageOffset;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkImageResolve &s) {
    json j;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffset"] = s.srcOffset;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffset"] = s.dstOffset;
    j["extent"] = s.extent;
    return j.dump();
}

inline std::string ToJson(const VkShaderModuleCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["codeSize"] = s.codeSize;
    j["pCode"] = s.pCode;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutBinding &s) {
    json j;
    j["binding"] = s.binding;
    j["descriptorType"] = s.descriptorType;
    j["descriptorCount"] = s.descriptorCount;
    j["stageFlags"] = s.stageFlags;
    j["pImmutableSamplers"] = s.pImmutableSamplers;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["bindingCount"] = s.bindingCount;
    j["pBindings"] = s.pBindings;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorPoolSize &s) {
    json j;
    j["type"] = s.type;
    j["descriptorCount"] = s.descriptorCount;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorPoolCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["maxSets"] = s.maxSets;
    j["poolSizeCount"] = s.poolSizeCount;
    j["pPoolSizes"] = s.pPoolSizes;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorPool"] = s.descriptorPool;
    j["descriptorSetCount"] = s.descriptorSetCount;
    j["pSetLayouts"] = s.pSetLayouts;
    return j.dump();
}

inline std::string ToJson(const VkSpecializationMapEntry &s) {
    json j;
    j["constantID"] = s.constantID;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkSpecializationInfo &s) {
    json j;
    j["mapEntryCount"] = s.mapEntryCount;
    j["pMapEntries"] = s.pMapEntries;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkPipelineShaderStageCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stage"] = s.stage;
    j["module"] = s.module;
    j["pName"] = s.pName;
    j["pName"] = s.pName;
    j["pSpecializationInfo"] = s.pSpecializationInfo;
    return j.dump();
}

inline std::string ToJson(const VkComputePipelineCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stage"] = s.stage;
    j["layout"] = s.layout;
    j["basePipelineHandle"] = s.basePipelineHandle;
    j["basePipelineIndex"] = s.basePipelineIndex;
    return j.dump();
}

inline std::string ToJson(const VkComputePipelineIndirectBufferInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceAddress"] = s.deviceAddress;
    j["size"] = s.size;
    j["pipelineDeviceAddressCaptureReplay"] = s.pipelineDeviceAddressCaptureReplay;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreateFlags2CreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreateFlags2CreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputBindingDescription &s) {
    json j;
    j["binding"] = s.binding;
    j["stride"] = s.stride;
    j["inputRate"] = s.inputRate;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputAttributeDescription &s) {
    json j;
    j["location"] = s.location;
    j["binding"] = s.binding;
    j["format"] = s.format;
    j["offset"] = s.offset;
    return j.dump();
}

inline std::string ToJson(const VkPipelineVertexInputStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["vertexBindingDescriptionCount"] = s.vertexBindingDescriptionCount;
    j["pVertexBindingDescriptions"] = s.pVertexBindingDescriptions;
    j["vertexAttributeDescriptionCount"] = s.vertexAttributeDescriptionCount;
    j["pVertexAttributeDescriptions"] = s.pVertexAttributeDescriptions;
    return j.dump();
}

inline std::string ToJson(const VkPipelineInputAssemblyStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["topology"] = s.topology;
    j["primitiveRestartEnable"] = s.primitiveRestartEnable;
    return j.dump();
}

inline std::string ToJson(const VkPipelineTessellationStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["patchControlPoints"] = s.patchControlPoints;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["viewportCount"] = s.viewportCount;
    j["pViewports"] = s.pViewports;
    j["scissorCount"] = s.scissorCount;
    j["pScissors"] = s.pScissors;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["depthClampEnable"] = s.depthClampEnable;
    j["rasterizerDiscardEnable"] = s.rasterizerDiscardEnable;
    j["polygonMode"] = s.polygonMode;
    j["cullMode"] = s.cullMode;
    j["frontFace"] = s.frontFace;
    j["depthBiasEnable"] = s.depthBiasEnable;
    j["depthBiasConstantFactor"] = s.depthBiasConstantFactor;
    j["depthBiasClamp"] = s.depthBiasClamp;
    j["depthBiasSlopeFactor"] = s.depthBiasSlopeFactor;
    j["lineWidth"] = s.lineWidth;
    return j.dump();
}

inline std::string ToJson(const VkPipelineMultisampleStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["rasterizationSamples"] = s.rasterizationSamples;
    j["sampleShadingEnable"] = s.sampleShadingEnable;
    j["minSampleShading"] = s.minSampleShading;
    j["pSampleMask"] = s.pSampleMask;
    j["alphaToCoverageEnable"] = s.alphaToCoverageEnable;
    j["alphaToOneEnable"] = s.alphaToOneEnable;
    return j.dump();
}

inline std::string ToJson(const VkPipelineColorBlendAttachmentState &s) {
    json j;
    j["blendEnable"] = s.blendEnable;
    j["srcColorBlendFactor"] = s.srcColorBlendFactor;
    j["dstColorBlendFactor"] = s.dstColorBlendFactor;
    j["colorBlendOp"] = s.colorBlendOp;
    j["srcAlphaBlendFactor"] = s.srcAlphaBlendFactor;
    j["dstAlphaBlendFactor"] = s.dstAlphaBlendFactor;
    j["alphaBlendOp"] = s.alphaBlendOp;
    j["colorWriteMask"] = s.colorWriteMask;
    return j.dump();
}

inline std::string ToJson(const VkPipelineColorBlendStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["logicOpEnable"] = s.logicOpEnable;
    j["logicOp"] = s.logicOp;
    j["attachmentCount"] = s.attachmentCount;
    j["pAttachments"] = s.pAttachments;
    j["blendConstants"] = s.blendConstants;
    return j.dump();
}

inline std::string ToJson(const VkPipelineDynamicStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["dynamicStateCount"] = s.dynamicStateCount;
    j["pDynamicStates"] = s.pDynamicStates;
    return j.dump();
}

inline std::string ToJson(const VkStencilOpState &s) {
    json j;
    j["failOp"] = s.failOp;
    j["passOp"] = s.passOp;
    j["depthFailOp"] = s.depthFailOp;
    j["compareOp"] = s.compareOp;
    j["compareMask"] = s.compareMask;
    j["writeMask"] = s.writeMask;
    j["reference"] = s.reference;
    return j.dump();
}

inline std::string ToJson(const VkPipelineDepthStencilStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["depthTestEnable"] = s.depthTestEnable;
    j["depthWriteEnable"] = s.depthWriteEnable;
    j["depthCompareOp"] = s.depthCompareOp;
    j["depthBoundsTestEnable"] = s.depthBoundsTestEnable;
    j["stencilTestEnable"] = s.stencilTestEnable;
    j["front"] = s.front;
    j["back"] = s.back;
    j["minDepthBounds"] = s.minDepthBounds;
    j["maxDepthBounds"] = s.maxDepthBounds;
    return j.dump();
}

inline std::string ToJson(const VkGraphicsPipelineCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stageCount"] = s.stageCount;
    j["pStages"] = s.pStages;
    j["pStages"] = s.pStages;
    j["pVertexInputState"] = s.pVertexInputState;
    j["pInputAssemblyState"] = s.pInputAssemblyState;
    j["pTessellationState"] = s.pTessellationState;
    j["pViewportState"] = s.pViewportState;
    j["pRasterizationState"] = s.pRasterizationState;
    j["pMultisampleState"] = s.pMultisampleState;
    j["pDepthStencilState"] = s.pDepthStencilState;
    j["pColorBlendState"] = s.pColorBlendState;
    j["pDynamicState"] = s.pDynamicState;
    j["layout"] = s.layout;
    j["renderPass"] = s.renderPass;
    j["subpass"] = s.subpass;
    j["basePipelineHandle"] = s.basePipelineHandle;
    j["basePipelineIndex"] = s.basePipelineIndex;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCacheCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["initialDataSize"] = s.initialDataSize;
    j["initialDataSize"] = s.initialDataSize;
    j["pInitialData"] = s.pInitialData;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCacheHeaderVersionOne &s) {
    json j;
    j["headerSize"] = s.headerSize;
    j["headerVersion"] = s.headerVersion;
    j["vendorID"] = s.vendorID;
    j["deviceID"] = s.deviceID;
    j["pipelineCacheUUID"] = s.pipelineCacheUUID;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCacheStageValidationIndexEntry &s) {
    json j;
    j["codeSize"] = s.codeSize;
    j["codeOffset"] = s.codeOffset;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCacheSafetyCriticalIndexEntry &s) {
    json j;
    j["pipelineIdentifier"] = s.pipelineIdentifier;
    j["pipelineMemorySize"] = s.pipelineMemorySize;
    j["jsonSize"] = s.jsonSize;
    j["jsonOffset"] = s.jsonOffset;
    j["stageIndexCount"] = s.stageIndexCount;
    j["stageIndexStride"] = s.stageIndexStride;
    j["stageIndexOffset"] = s.stageIndexOffset;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCacheHeaderVersionSafetyCriticalOne &s) {
    json j;
    j["headerVersionOne"] = s.headerVersionOne;
    j["validationVersion"] = s.validationVersion;
    j["implementationData"] = s.implementationData;
    j["pipelineIndexCount"] = s.pipelineIndexCount;
    j["pipelineIndexStride"] = s.pipelineIndexStride;
    j["pipelineIndexOffset"] = s.pipelineIndexOffset;
    return j.dump();
}

inline std::string ToJson(const VkPushConstantRange &s) {
    json j;
    j["stageFlags"] = s.stageFlags;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pKeysAndDataInfo"] = s.pKeysAndDataInfo;
    j["pipeline"] = s.pipeline;
    j["pPipelineCreateInfo"] = s.pPipelineCreateInfo;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryHandlesInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBinaryCount"] = s.pipelineBinaryCount;
    j["pPipelineBinaries"] = s.pPipelineBinaries;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryDataKHR &s) {
    json j;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryKeysAndDataKHR &s) {
    json j;
    j["binaryCount"] = s.binaryCount;
    j["pPipelineBinaryKeys"] = s.pPipelineBinaryKeys;
    j["pPipelineBinaryData"] = s.pPipelineBinaryData;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryKeyKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["keySize"] = s.keySize;
    j["key"] = s.key;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["binaryCount"] = s.binaryCount;
    j["pPipelineBinaries"] = s.pPipelineBinaries;
    return j.dump();
}

inline std::string ToJson(const VkReleaseCapturedPipelineDataInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipeline"] = s.pipeline;
    return j.dump();
}

inline std::string ToJson(const VkPipelineBinaryDataInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBinary"] = s.pipelineBinary;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkPipelineLayoutCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["setLayoutCount"] = s.setLayoutCount;
    j["pSetLayouts"] = s.pSetLayouts;
    j["pushConstantRangeCount"] = s.pushConstantRangeCount;
    j["pPushConstantRanges"] = s.pPushConstantRanges;
    return j.dump();
}

inline std::string ToJson(const VkSamplerCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["magFilter"] = s.magFilter;
    j["minFilter"] = s.minFilter;
    j["mipmapMode"] = s.mipmapMode;
    j["addressModeU"] = s.addressModeU;
    j["addressModeV"] = s.addressModeV;
    j["addressModeW"] = s.addressModeW;
    j["mipLodBias"] = s.mipLodBias;
    j["anisotropyEnable"] = s.anisotropyEnable;
    j["maxAnisotropy"] = s.maxAnisotropy;
    j["compareEnable"] = s.compareEnable;
    j["compareOp"] = s.compareOp;
    j["minLod"] = s.minLod;
    j["maxLod"] = s.maxLod;
    j["borderColor"] = s.borderColor;
    j["unnormalizedCoordinates"] = s.unnormalizedCoordinates;
    return j.dump();
}

inline std::string ToJson(const VkCommandPoolCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["queueFamilyIndex"] = s.queueFamilyIndex;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["commandPool"] = s.commandPool;
    j["level"] = s.level;
    j["commandBufferCount"] = s.commandBufferCount;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["renderPass"] = s.renderPass;
    j["subpass"] = s.subpass;
    j["framebuffer"] = s.framebuffer;
    j["occlusionQueryEnable"] = s.occlusionQueryEnable;
    j["queryFlags"] = s.queryFlags;
    j["pipelineStatistics"] = s.pipelineStatistics;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pInheritanceInfo"] = s.pInheritanceInfo;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["renderPass"] = s.renderPass;
    j["framebuffer"] = s.framebuffer;
    j["renderArea"] = s.renderArea;
    j["clearValueCount"] = s.clearValueCount;
    j["pClearValues"] = s.pClearValues;
    return j.dump();
}

inline std::string ToJson(const VkClearDepthStencilValue &s) {
    json j;
    j["depth"] = s.depth;
    j["stencil"] = s.stencil;
    return j.dump();
}

inline std::string ToJson(const VkClearAttachment &s) {
    json j;
    j["aspectMask"] = s.aspectMask;
    j["colorAttachment"] = s.colorAttachment;
    j["clearValue"] = s.clearValue;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentDescription &s) {
    json j;
    j["flags"] = s.flags;
    j["format"] = s.format;
    j["samples"] = s.samples;
    j["loadOp"] = s.loadOp;
    j["storeOp"] = s.storeOp;
    j["stencilLoadOp"] = s.stencilLoadOp;
    j["stencilStoreOp"] = s.stencilStoreOp;
    j["initialLayout"] = s.initialLayout;
    j["finalLayout"] = s.finalLayout;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentReference &s) {
    json j;
    j["attachment"] = s.attachment;
    j["layout"] = s.layout;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDescription &s) {
    json j;
    j["flags"] = s.flags;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["inputAttachmentCount"] = s.inputAttachmentCount;
    j["pInputAttachments"] = s.pInputAttachments;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachments"] = s.pColorAttachments;
    j["pResolveAttachments"] = s.pResolveAttachments;
    j["pDepthStencilAttachment"] = s.pDepthStencilAttachment;
    j["preserveAttachmentCount"] = s.preserveAttachmentCount;
    j["pPreserveAttachments"] = s.pPreserveAttachments;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDependency &s) {
    json j;
    j["srcSubpass"] = s.srcSubpass;
    j["dstSubpass"] = s.dstSubpass;
    j["srcStageMask"] = s.srcStageMask;
    j["dstStageMask"] = s.dstStageMask;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["dependencyFlags"] = s.dependencyFlags;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["attachmentCount"] = s.attachmentCount;
    j["pAttachments"] = s.pAttachments;
    j["subpassCount"] = s.subpassCount;
    j["pSubpasses"] = s.pSubpasses;
    j["dependencyCount"] = s.dependencyCount;
    j["pDependencies"] = s.pDependencies;
    return j.dump();
}

inline std::string ToJson(const VkEventCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkFenceCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFeatures &s) {
    json j;
    j["robustBufferAccess"] = s.robustBufferAccess;
    j["fullDrawIndexUint32"] = s.fullDrawIndexUint32;
    j["imageCubeArray"] = s.imageCubeArray;
    j["independentBlend"] = s.independentBlend;
    j["geometryShader"] = s.geometryShader;
    j["tessellationShader"] = s.tessellationShader;
    j["sampleRateShading"] = s.sampleRateShading;
    j["dualSrcBlend"] = s.dualSrcBlend;
    j["logicOp"] = s.logicOp;
    j["multiDrawIndirect"] = s.multiDrawIndirect;
    j["drawIndirectFirstInstance"] = s.drawIndirectFirstInstance;
    j["depthClamp"] = s.depthClamp;
    j["depthBiasClamp"] = s.depthBiasClamp;
    j["fillModeNonSolid"] = s.fillModeNonSolid;
    j["depthBounds"] = s.depthBounds;
    j["wideLines"] = s.wideLines;
    j["largePoints"] = s.largePoints;
    j["alphaToOne"] = s.alphaToOne;
    j["multiViewport"] = s.multiViewport;
    j["samplerAnisotropy"] = s.samplerAnisotropy;
    j["textureCompressionETC2"] = s.textureCompressionETC2;
    j["textureCompressionASTC_LDR"] = s.textureCompressionASTC_LDR;
    j["textureCompressionBC"] = s.textureCompressionBC;
    j["occlusionQueryPrecise"] = s.occlusionQueryPrecise;
    j["pipelineStatisticsQuery"] = s.pipelineStatisticsQuery;
    j["vertexPipelineStoresAndAtomics"] = s.vertexPipelineStoresAndAtomics;
    j["fragmentStoresAndAtomics"] = s.fragmentStoresAndAtomics;
    j["shaderTessellationAndGeometryPointSize"] = s.shaderTessellationAndGeometryPointSize;
    j["shaderImageGatherExtended"] = s.shaderImageGatherExtended;
    j["shaderStorageImageExtendedFormats"] = s.shaderStorageImageExtendedFormats;
    j["shaderStorageImageMultisample"] = s.shaderStorageImageMultisample;
    j["shaderStorageImageReadWithoutFormat"] = s.shaderStorageImageReadWithoutFormat;
    j["shaderStorageImageWriteWithoutFormat"] = s.shaderStorageImageWriteWithoutFormat;
    j["shaderUniformBufferArrayDynamicIndexing"] = s.shaderUniformBufferArrayDynamicIndexing;
    j["shaderSampledImageArrayDynamicIndexing"] = s.shaderSampledImageArrayDynamicIndexing;
    j["shaderStorageBufferArrayDynamicIndexing"] = s.shaderStorageBufferArrayDynamicIndexing;
    j["shaderStorageImageArrayDynamicIndexing"] = s.shaderStorageImageArrayDynamicIndexing;
    j["shaderClipDistance"] = s.shaderClipDistance;
    j["shaderCullDistance"] = s.shaderCullDistance;
    j["shaderFloat64"] = s.shaderFloat64;
    j["shaderInt64"] = s.shaderInt64;
    j["shaderInt16"] = s.shaderInt16;
    j["shaderResourceResidency"] = s.shaderResourceResidency;
    j["shaderResourceMinLod"] = s.shaderResourceMinLod;
    j["sparseBinding"] = s.sparseBinding;
    j["sparseResidencyBuffer"] = s.sparseResidencyBuffer;
    j["sparseResidencyImage2D"] = s.sparseResidencyImage2D;
    j["sparseResidencyImage3D"] = s.sparseResidencyImage3D;
    j["sparseResidency2Samples"] = s.sparseResidency2Samples;
    j["sparseResidency4Samples"] = s.sparseResidency4Samples;
    j["sparseResidency8Samples"] = s.sparseResidency8Samples;
    j["sparseResidency16Samples"] = s.sparseResidency16Samples;
    j["sparseResidencyAliased"] = s.sparseResidencyAliased;
    j["variableMultisampleRate"] = s.variableMultisampleRate;
    j["inheritedQueries"] = s.inheritedQueries;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSparseProperties &s) {
    json j;
    j["residencyStandard2DBlockShape"] = s.residencyStandard2DBlockShape;
    j["residencyStandard2DMultisampleBlockShape"] = s.residencyStandard2DMultisampleBlockShape;
    j["residencyStandard3DBlockShape"] = s.residencyStandard3DBlockShape;
    j["residencyAlignedMipSize"] = s.residencyAlignedMipSize;
    j["residencyNonResidentStrict"] = s.residencyNonResidentStrict;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLimits &s) {
    json j;
    j["maxImageDimension1D"] = s.maxImageDimension1D;
    j["maxImageDimension2D"] = s.maxImageDimension2D;
    j["maxImageDimension3D"] = s.maxImageDimension3D;
    j["maxImageDimensionCube"] = s.maxImageDimensionCube;
    j["maxImageArrayLayers"] = s.maxImageArrayLayers;
    j["maxTexelBufferElements"] = s.maxTexelBufferElements;
    j["maxUniformBufferRange"] = s.maxUniformBufferRange;
    j["maxStorageBufferRange"] = s.maxStorageBufferRange;
    j["maxPushConstantsSize"] = s.maxPushConstantsSize;
    j["maxMemoryAllocationCount"] = s.maxMemoryAllocationCount;
    j["maxSamplerAllocationCount"] = s.maxSamplerAllocationCount;
    j["bufferImageGranularity"] = s.bufferImageGranularity;
    j["sparseAddressSpaceSize"] = s.sparseAddressSpaceSize;
    j["maxBoundDescriptorSets"] = s.maxBoundDescriptorSets;
    j["maxPerStageDescriptorSamplers"] = s.maxPerStageDescriptorSamplers;
    j["maxPerStageDescriptorUniformBuffers"] = s.maxPerStageDescriptorUniformBuffers;
    j["maxPerStageDescriptorStorageBuffers"] = s.maxPerStageDescriptorStorageBuffers;
    j["maxPerStageDescriptorSampledImages"] = s.maxPerStageDescriptorSampledImages;
    j["maxPerStageDescriptorStorageImages"] = s.maxPerStageDescriptorStorageImages;
    j["maxPerStageDescriptorInputAttachments"] = s.maxPerStageDescriptorInputAttachments;
    j["maxPerStageResources"] = s.maxPerStageResources;
    j["maxDescriptorSetSamplers"] = s.maxDescriptorSetSamplers;
    j["maxDescriptorSetUniformBuffers"] = s.maxDescriptorSetUniformBuffers;
    j["maxDescriptorSetUniformBuffersDynamic"] = s.maxDescriptorSetUniformBuffersDynamic;
    j["maxDescriptorSetStorageBuffers"] = s.maxDescriptorSetStorageBuffers;
    j["maxDescriptorSetStorageBuffersDynamic"] = s.maxDescriptorSetStorageBuffersDynamic;
    j["maxDescriptorSetSampledImages"] = s.maxDescriptorSetSampledImages;
    j["maxDescriptorSetStorageImages"] = s.maxDescriptorSetStorageImages;
    j["maxDescriptorSetInputAttachments"] = s.maxDescriptorSetInputAttachments;
    j["maxVertexInputAttributes"] = s.maxVertexInputAttributes;
    j["maxVertexInputBindings"] = s.maxVertexInputBindings;
    j["maxVertexInputAttributeOffset"] = s.maxVertexInputAttributeOffset;
    j["maxVertexInputBindingStride"] = s.maxVertexInputBindingStride;
    j["maxVertexOutputComponents"] = s.maxVertexOutputComponents;
    j["maxTessellationGenerationLevel"] = s.maxTessellationGenerationLevel;
    j["maxTessellationPatchSize"] = s.maxTessellationPatchSize;
    j["maxTessellationControlPerVertexInputComponents"] = s.maxTessellationControlPerVertexInputComponents;
    j["maxTessellationControlPerVertexOutputComponents"] = s.maxTessellationControlPerVertexOutputComponents;
    j["maxTessellationControlPerPatchOutputComponents"] = s.maxTessellationControlPerPatchOutputComponents;
    j["maxTessellationControlTotalOutputComponents"] = s.maxTessellationControlTotalOutputComponents;
    j["maxTessellationEvaluationInputComponents"] = s.maxTessellationEvaluationInputComponents;
    j["maxTessellationEvaluationOutputComponents"] = s.maxTessellationEvaluationOutputComponents;
    j["maxGeometryShaderInvocations"] = s.maxGeometryShaderInvocations;
    j["maxGeometryInputComponents"] = s.maxGeometryInputComponents;
    j["maxGeometryOutputComponents"] = s.maxGeometryOutputComponents;
    j["maxGeometryOutputVertices"] = s.maxGeometryOutputVertices;
    j["maxGeometryTotalOutputComponents"] = s.maxGeometryTotalOutputComponents;
    j["maxFragmentInputComponents"] = s.maxFragmentInputComponents;
    j["maxFragmentOutputAttachments"] = s.maxFragmentOutputAttachments;
    j["maxFragmentDualSrcAttachments"] = s.maxFragmentDualSrcAttachments;
    j["maxFragmentCombinedOutputResources"] = s.maxFragmentCombinedOutputResources;
    j["maxComputeSharedMemorySize"] = s.maxComputeSharedMemorySize;
    j["maxComputeWorkGroupCount"] = s.maxComputeWorkGroupCount;
    j["maxComputeWorkGroupInvocations"] = s.maxComputeWorkGroupInvocations;
    j["maxComputeWorkGroupSize"] = s.maxComputeWorkGroupSize;
    j["subPixelPrecisionBits"] = s.subPixelPrecisionBits;
    j["subTexelPrecisionBits"] = s.subTexelPrecisionBits;
    j["mipmapPrecisionBits"] = s.mipmapPrecisionBits;
    j["maxDrawIndexedIndexValue"] = s.maxDrawIndexedIndexValue;
    j["maxDrawIndirectCount"] = s.maxDrawIndirectCount;
    j["maxSamplerLodBias"] = s.maxSamplerLodBias;
    j["maxSamplerAnisotropy"] = s.maxSamplerAnisotropy;
    j["maxViewports"] = s.maxViewports;
    j["maxViewportDimensions"] = s.maxViewportDimensions;
    j["viewportBoundsRange"] = s.viewportBoundsRange;
    j["viewportSubPixelBits"] = s.viewportSubPixelBits;
    j["minMemoryMapAlignment"] = s.minMemoryMapAlignment;
    j["minTexelBufferOffsetAlignment"] = s.minTexelBufferOffsetAlignment;
    j["minUniformBufferOffsetAlignment"] = s.minUniformBufferOffsetAlignment;
    j["minStorageBufferOffsetAlignment"] = s.minStorageBufferOffsetAlignment;
    j["minTexelOffset"] = s.minTexelOffset;
    j["maxTexelOffset"] = s.maxTexelOffset;
    j["minTexelGatherOffset"] = s.minTexelGatherOffset;
    j["maxTexelGatherOffset"] = s.maxTexelGatherOffset;
    j["minInterpolationOffset"] = s.minInterpolationOffset;
    j["maxInterpolationOffset"] = s.maxInterpolationOffset;
    j["subPixelInterpolationOffsetBits"] = s.subPixelInterpolationOffsetBits;
    j["maxFramebufferWidth"] = s.maxFramebufferWidth;
    j["maxFramebufferHeight"] = s.maxFramebufferHeight;
    j["maxFramebufferLayers"] = s.maxFramebufferLayers;
    j["framebufferColorSampleCounts"] = s.framebufferColorSampleCounts;
    j["framebufferDepthSampleCounts"] = s.framebufferDepthSampleCounts;
    j["framebufferStencilSampleCounts"] = s.framebufferStencilSampleCounts;
    j["framebufferNoAttachmentsSampleCounts"] = s.framebufferNoAttachmentsSampleCounts;
    j["maxColorAttachments"] = s.maxColorAttachments;
    j["sampledImageColorSampleCounts"] = s.sampledImageColorSampleCounts;
    j["sampledImageIntegerSampleCounts"] = s.sampledImageIntegerSampleCounts;
    j["sampledImageDepthSampleCounts"] = s.sampledImageDepthSampleCounts;
    j["sampledImageStencilSampleCounts"] = s.sampledImageStencilSampleCounts;
    j["storageImageSampleCounts"] = s.storageImageSampleCounts;
    j["maxSampleMaskWords"] = s.maxSampleMaskWords;
    j["timestampComputeAndGraphics"] = s.timestampComputeAndGraphics;
    j["timestampPeriod"] = s.timestampPeriod;
    j["maxClipDistances"] = s.maxClipDistances;
    j["maxCullDistances"] = s.maxCullDistances;
    j["maxCombinedClipAndCullDistances"] = s.maxCombinedClipAndCullDistances;
    j["discreteQueuePriorities"] = s.discreteQueuePriorities;
    j["pointSizeRange"] = s.pointSizeRange;
    j["lineWidthRange"] = s.lineWidthRange;
    j["pointSizeGranularity"] = s.pointSizeGranularity;
    j["lineWidthGranularity"] = s.lineWidthGranularity;
    j["strictLines"] = s.strictLines;
    j["standardSampleLocations"] = s.standardSampleLocations;
    j["optimalBufferCopyOffsetAlignment"] = s.optimalBufferCopyOffsetAlignment;
    j["optimalBufferCopyRowPitchAlignment"] = s.optimalBufferCopyRowPitchAlignment;
    j["nonCoherentAtomSize"] = s.nonCoherentAtomSize;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkQueryPoolCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["queryType"] = s.queryType;
    j["queryCount"] = s.queryCount;
    j["pipelineStatistics"] = s.pipelineStatistics;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["renderPass"] = s.renderPass;
    j["attachmentCount"] = s.attachmentCount;
    j["pAttachments"] = s.pAttachments;
    j["width"] = s.width;
    j["height"] = s.height;
    j["layers"] = s.layers;
    return j.dump();
}

inline std::string ToJson(const VkDrawIndirectCommand &s) {
    json j;
    j["vertexCount"] = s.vertexCount;
    j["instanceCount"] = s.instanceCount;
    j["firstVertex"] = s.firstVertex;
    j["firstInstance"] = s.firstInstance;
    return j.dump();
}

inline std::string ToJson(const VkDrawIndexedIndirectCommand &s) {
    json j;
    j["indexCount"] = s.indexCount;
    j["instanceCount"] = s.instanceCount;
    j["firstIndex"] = s.firstIndex;
    j["vertexOffset"] = s.vertexOffset;
    j["firstInstance"] = s.firstInstance;
    return j.dump();
}

inline std::string ToJson(const VkDispatchIndirectCommand &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    j["z"] = s.z;
    return j.dump();
}

inline std::string ToJson(const VkMultiDrawInfoEXT &s) {
    json j;
    j["firstVertex"] = s.firstVertex;
    j["vertexCount"] = s.vertexCount;
    return j.dump();
}

inline std::string ToJson(const VkMultiDrawIndexedInfoEXT &s) {
    json j;
    j["firstIndex"] = s.firstIndex;
    j["indexCount"] = s.indexCount;
    j["vertexOffset"] = s.vertexOffset;
    return j.dump();
}

inline std::string ToJson(const VkSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreCount"] = s.waitSemaphoreCount;
    j["pWaitSemaphores"] = s.pWaitSemaphores;
    j["pWaitDstStageMask"] = s.pWaitDstStageMask;
    j["commandBufferCount"] = s.commandBufferCount;
    j["pCommandBuffers"] = s.pCommandBuffers;
    j["signalSemaphoreCount"] = s.signalSemaphoreCount;
    j["pSignalSemaphores"] = s.pSignalSemaphores;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPropertiesKHR &s) {
    json j;
    j["display"] = s.display;
    j["displayName"] = s.displayName;
    j["physicalDimensions"] = s.physicalDimensions;
    j["physicalResolution"] = s.physicalResolution;
    j["supportedTransforms"] = s.supportedTransforms;
    j["planeReorderPossible"] = s.planeReorderPossible;
    j["persistentContent"] = s.persistentContent;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPlanePropertiesKHR &s) {
    json j;
    j["currentDisplay"] = s.currentDisplay;
    j["currentStackIndex"] = s.currentStackIndex;
    return j.dump();
}

inline std::string ToJson(const VkDisplayModeParametersKHR &s) {
    json j;
    j["visibleRegion"] = s.visibleRegion;
    j["refreshRate"] = s.refreshRate;
    return j.dump();
}

inline std::string ToJson(const VkDisplayModePropertiesKHR &s) {
    json j;
    j["displayMode"] = s.displayMode;
    j["parameters"] = s.parameters;
    return j.dump();
}

inline std::string ToJson(const VkDisplayModeCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["parameters"] = s.parameters;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPlaneCapabilitiesKHR &s) {
    json j;
    j["supportedAlpha"] = s.supportedAlpha;
    j["minSrcPosition"] = s.minSrcPosition;
    j["maxSrcPosition"] = s.maxSrcPosition;
    j["minSrcExtent"] = s.minSrcExtent;
    j["maxSrcExtent"] = s.maxSrcExtent;
    j["minDstPosition"] = s.minDstPosition;
    j["maxDstPosition"] = s.maxDstPosition;
    j["minDstExtent"] = s.minDstExtent;
    j["maxDstExtent"] = s.maxDstExtent;
    return j.dump();
}

inline std::string ToJson(const VkDisplaySurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["displayMode"] = s.displayMode;
    j["planeIndex"] = s.planeIndex;
    j["planeStackIndex"] = s.planeStackIndex;
    j["transform"] = s.transform;
    j["globalAlpha"] = s.globalAlpha;
    j["alphaMode"] = s.alphaMode;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkDisplaySurfaceStereoCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stereoType"] = s.stereoType;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPresentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcRect"] = s.srcRect;
    j["dstRect"] = s.dstRect;
    j["persistent"] = s.persistent;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceCapabilitiesKHR &s) {
    json j;
    j["minImageCount"] = s.minImageCount;
    j["maxImageCount"] = s.maxImageCount;
    j["currentExtent"] = s.currentExtent;
    j["minImageExtent"] = s.minImageExtent;
    j["maxImageExtent"] = s.maxImageExtent;
    j["maxImageArrayLayers"] = s.maxImageArrayLayers;
    j["supportedTransforms"] = s.supportedTransforms;
    j["currentTransform"] = s.currentTransform;
    j["supportedCompositeAlpha"] = s.supportedCompositeAlpha;
    j["supportedUsageFlags"] = s.supportedUsageFlags;
    return j.dump();
}

inline std::string ToJson(const VkAndroidSurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["window"] = s.window;
    return j.dump();
}

inline std::string ToJson(const VkViSurfaceCreateInfoNN &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["window"] = s.window;
    return j.dump();
}

inline std::string ToJson(const VkWaylandSurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["display"] = s.display;
    j["surface"] = s.surface;
    return j.dump();
}

inline std::string ToJson(const VkWin32SurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["hinstance"] = s.hinstance;
    j["hwnd"] = s.hwnd;
    return j.dump();
}

inline std::string ToJson(const VkXlibSurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["dpy"] = s.dpy;
    j["window"] = s.window;
    return j.dump();
}

inline std::string ToJson(const VkXcbSurfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["connection"] = s.connection;
    j["window"] = s.window;
    return j.dump();
}

inline std::string ToJson(const VkDirectFBSurfaceCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["dfb"] = s.dfb;
    j["surface"] = s.surface;
    return j.dump();
}

inline std::string ToJson(const VkImagePipeSurfaceCreateInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["imagePipeHandle"] = s.imagePipeHandle;
    return j.dump();
}

inline std::string ToJson(const VkStreamDescriptorSurfaceCreateInfoGGP &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["streamDescriptor"] = s.streamDescriptor;
    return j.dump();
}

inline std::string ToJson(const VkScreenSurfaceCreateInfoQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["context"] = s.context;
    j["window"] = s.window;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceFormatKHR &s) {
    json j;
    j["format"] = s.format;
    j["colorSpace"] = s.colorSpace;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["surface"] = s.surface;
    j["minImageCount"] = s.minImageCount;
    j["imageFormat"] = s.imageFormat;
    j["imageColorSpace"] = s.imageColorSpace;
    j["imageExtent"] = s.imageExtent;
    j["imageArrayLayers"] = s.imageArrayLayers;
    j["imageUsage"] = s.imageUsage;
    j["imageSharingMode"] = s.imageSharingMode;
    j["queueFamilyIndexCount"] = s.queueFamilyIndexCount;
    j["pQueueFamilyIndices"] = s.pQueueFamilyIndices;
    j["preTransform"] = s.preTransform;
    j["compositeAlpha"] = s.compositeAlpha;
    j["presentMode"] = s.presentMode;
    j["clipped"] = s.clipped;
    j["oldSwapchain"] = s.oldSwapchain;
    j["oldSwapchain"] = s.oldSwapchain;
    return j.dump();
}

inline std::string ToJson(const VkPresentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreCount"] = s.waitSemaphoreCount;
    j["pWaitSemaphores"] = s.pWaitSemaphores;
    j["swapchainCount"] = s.swapchainCount;
    j["pSwapchains"] = s.pSwapchains;
    j["pImageIndices"] = s.pImageIndices;
    j["pResults"] = s.pResults;
    return j.dump();
}

inline std::string ToJson(const VkDebugReportCallbackCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pfnCallback"] = s.pfnCallback;
    j["pUserData"] = s.pUserData;
    return j.dump();
}

inline std::string ToJson(const VkValidationFlagsEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["disabledValidationCheckCount"] = s.disabledValidationCheckCount;
    j["pDisabledValidationChecks"] = s.pDisabledValidationChecks;
    return j.dump();
}

inline std::string ToJson(const VkValidationFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["enabledValidationFeatureCount"] = s.enabledValidationFeatureCount;
    j["pEnabledValidationFeatures"] = s.pEnabledValidationFeatures;
    j["disabledValidationFeatureCount"] = s.disabledValidationFeatureCount;
    j["pDisabledValidationFeatures"] = s.pDisabledValidationFeatures;
    return j.dump();
}

inline std::string ToJson(const VkLayerSettingsCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["settingCount"] = s.settingCount;
    j["pSettings"] = s.pSettings;
    return j.dump();
}

inline std::string ToJson(const VkLayerSettingEXT &s) {
    json j;
    j["pLayerName"] = s.pLayerName;
    j["pSettingName"] = s.pSettingName;
    j["type"] = s.type;
    j["valueCount"] = s.valueCount;
    j["pValues"] = s.pValues;
    return j.dump();
}

inline std::string ToJson(const VkApplicationParametersEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vendorID"] = s.vendorID;
    j["deviceID"] = s.deviceID;
    j["key"] = s.key;
    j["value"] = s.value;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationStateRasterizationOrderAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rasterizationOrder"] = s.rasterizationOrder;
    return j.dump();
}

inline std::string ToJson(const VkDebugMarkerObjectNameInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["objectType"] = s.objectType;
    j["object"] = s.object;
    j["pObjectName"] = s.pObjectName;
    return j.dump();
}

inline std::string ToJson(const VkDebugMarkerObjectTagInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["objectType"] = s.objectType;
    j["object"] = s.object;
    j["tagName"] = s.tagName;
    j["tagSize"] = s.tagSize;
    j["pTag"] = s.pTag;
    return j.dump();
}

inline std::string ToJson(const VkDebugMarkerMarkerInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pMarkerName"] = s.pMarkerName;
    j["color"] = s.color;
    return j.dump();
}

inline std::string ToJson(const VkDedicatedAllocationImageCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dedicatedAllocation"] = s.dedicatedAllocation;
    return j.dump();
}

inline std::string ToJson(const VkDedicatedAllocationBufferCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dedicatedAllocation"] = s.dedicatedAllocation;
    return j.dump();
}

inline std::string ToJson(const VkDedicatedAllocationMemoryAllocateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkExternalImageFormatPropertiesNV &s) {
    json j;
    j["imageFormatProperties"] = s.imageFormatProperties;
    j["externalMemoryFeatures"] = s.externalMemoryFeatures;
    j["exportFromImportedHandleTypes"] = s.exportFromImportedHandleTypes;
    j["compatibleHandleTypes"] = s.compatibleHandleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryImageCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExportMemoryAllocateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryWin32HandleInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkExportMemoryWin32HandleInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    j["dwAccess"] = s.dwAccess;
    return j.dump();
}

inline std::string ToJson(const VkExportMemorySciBufInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    return j.dump();
}

inline std::string ToJson(const VkImportMemorySciBufInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetSciBufInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkMemorySciBufPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalMemorySciBufFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sciBufImport"] = s.sciBufImport;
    j["sciBufExport"] = s.sciBufExport;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalSciBufFeaturesNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkWin32KeyedMutexAcquireReleaseInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["acquireCount"] = s.acquireCount;
    j["pAcquireSyncs"] = s.pAcquireSyncs;
    j["pAcquireKeys"] = s.pAcquireKeys;
    j["pAcquireTimeoutMilliseconds"] = s.pAcquireTimeoutMilliseconds;
    j["releaseCount"] = s.releaseCount;
    j["pReleaseSyncs"] = s.pReleaseSyncs;
    j["pReleaseKeys"] = s.pReleaseKeys;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceGeneratedCommands"] = s.deviceGeneratedCommands;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceGeneratedCompute"] = s.deviceGeneratedCompute;
    j["deviceGeneratedComputePipelines"] = s.deviceGeneratedComputePipelines;
    j["deviceGeneratedComputeCaptureReplay"] = s.deviceGeneratedComputeCaptureReplay;
    return j.dump();
}

inline std::string ToJson(const VkDevicePrivateDataCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["privateDataSlotRequestCount"] = s.privateDataSlotRequestCount;
    return j.dump();
}

inline std::string ToJson(const VkDevicePrivateDataCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPrivateDataSlotCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPrivateDataSlotCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePrivateDataFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["privateData"] = s.privateData;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePrivateDataFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxGraphicsShaderGroupCount"] = s.maxGraphicsShaderGroupCount;
    j["maxIndirectSequenceCount"] = s.maxIndirectSequenceCount;
    j["maxIndirectCommandsTokenCount"] = s.maxIndirectCommandsTokenCount;
    j["maxIndirectCommandsStreamCount"] = s.maxIndirectCommandsStreamCount;
    j["maxIndirectCommandsTokenOffset"] = s.maxIndirectCommandsTokenOffset;
    j["maxIndirectCommandsStreamStride"] = s.maxIndirectCommandsStreamStride;
    j["minSequencesCountBufferOffsetAlignment"] = s.minSequencesCountBufferOffsetAlignment;
    j["minSequencesIndexBufferOffsetAlignment"] = s.minSequencesIndexBufferOffsetAlignment;
    j["minIndirectCommandsBufferOffsetAlignment"] = s.minIndirectCommandsBufferOffsetAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceClusterAccelerationStructureFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["clusterAccelerationStructure"] = s.clusterAccelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceClusterAccelerationStructurePropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxVerticesPerCluster"] = s.maxVerticesPerCluster;
    j["maxTrianglesPerCluster"] = s.maxTrianglesPerCluster;
    j["clusterScratchByteAlignment"] = s.clusterScratchByteAlignment;
    j["clusterByteAlignment"] = s.clusterByteAlignment;
    j["clusterTemplateByteAlignment"] = s.clusterTemplateByteAlignment;
    j["clusterBottomLevelByteAlignment"] = s.clusterBottomLevelByteAlignment;
    j["clusterTemplateBoundsByteAlignment"] = s.clusterTemplateBoundsByteAlignment;
    j["maxClusterGeometryIndex"] = s.maxClusterGeometryIndex;
    return j.dump();
}

inline std::string ToJson(const VkStridedDeviceAddressNV &s) {
    json j;
    j["startAddress"] = s.startAddress;
    j["strideInBytes"] = s.strideInBytes;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["allowClusterAccelerationStructure"] = s.allowClusterAccelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV &s) {
    json j;
    j["geometryIndex"] = s.geometryIndex;
    j["reserved"] = s.reserved;
    j["geometryFlags"] = s.geometryFlags;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureMoveObjectsInfoNV &s) {
    json j;
    j["srcAccelerationStructure"] = s.srcAccelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV &s) {
    json j;
    j["clusterReferencesCount"] = s.clusterReferencesCount;
    j["clusterReferencesStride"] = s.clusterReferencesStride;
    j["clusterReferences"] = s.clusterReferences;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureBuildTriangleClusterInfoNV &s) {
    json j;
    j["clusterID"] = s.clusterID;
    j["clusterFlags"] = s.clusterFlags;
    j["triangleCount"] = s.triangleCount;
    j["vertexCount"] = s.vertexCount;
    j["positionTruncateBitCount"] = s.positionTruncateBitCount;
    j["indexType"] = s.indexType;
    j["opacityMicromapIndexType"] = s.opacityMicromapIndexType;
    j["baseGeometryIndexAndGeometryFlags"] = s.baseGeometryIndexAndGeometryFlags;
    j["indexBufferStride"] = s.indexBufferStride;
    j["vertexBufferStride"] = s.vertexBufferStride;
    j["geometryIndexAndFlagsBufferStride"] = s.geometryIndexAndFlagsBufferStride;
    j["opacityMicromapIndexBufferStride"] = s.opacityMicromapIndexBufferStride;
    j["indexBuffer"] = s.indexBuffer;
    j["vertexBuffer"] = s.vertexBuffer;
    j["geometryIndexAndFlagsBuffer"] = s.geometryIndexAndFlagsBuffer;
    j["opacityMicromapArray"] = s.opacityMicromapArray;
    j["opacityMicromapIndexBuffer"] = s.opacityMicromapIndexBuffer;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV &s) {
    json j;
    j["clusterID"] = s.clusterID;
    j["clusterFlags"] = s.clusterFlags;
    j["triangleCount"] = s.triangleCount;
    j["vertexCount"] = s.vertexCount;
    j["positionTruncateBitCount"] = s.positionTruncateBitCount;
    j["indexType"] = s.indexType;
    j["opacityMicromapIndexType"] = s.opacityMicromapIndexType;
    j["baseGeometryIndexAndGeometryFlags"] = s.baseGeometryIndexAndGeometryFlags;
    j["indexBufferStride"] = s.indexBufferStride;
    j["vertexBufferStride"] = s.vertexBufferStride;
    j["geometryIndexAndFlagsBufferStride"] = s.geometryIndexAndFlagsBufferStride;
    j["opacityMicromapIndexBufferStride"] = s.opacityMicromapIndexBufferStride;
    j["indexBuffer"] = s.indexBuffer;
    j["vertexBuffer"] = s.vertexBuffer;
    j["geometryIndexAndFlagsBuffer"] = s.geometryIndexAndFlagsBuffer;
    j["opacityMicromapArray"] = s.opacityMicromapArray;
    j["opacityMicromapIndexBuffer"] = s.opacityMicromapIndexBuffer;
    j["instantiationBoundingBoxLimit"] = s.instantiationBoundingBoxLimit;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureInstantiateClusterInfoNV &s) {
    json j;
    j["clusterIdOffset"] = s.clusterIdOffset;
    j["geometryIndexOffset"] = s.geometryIndexOffset;
    j["reserved"] = s.reserved;
    j["clusterTemplateAddress"] = s.clusterTemplateAddress;
    j["vertexBuffer"] = s.vertexBuffer;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureClustersBottomLevelInputNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxTotalClusterCount"] = s.maxTotalClusterCount;
    j["maxClusterCountPerAccelerationStructure"] = s.maxClusterCountPerAccelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureTriangleClusterInputNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexFormat"] = s.vertexFormat;
    j["maxGeometryIndexValue"] = s.maxGeometryIndexValue;
    j["maxClusterUniqueGeometryCount"] = s.maxClusterUniqueGeometryCount;
    j["maxClusterTriangleCount"] = s.maxClusterTriangleCount;
    j["maxClusterVertexCount"] = s.maxClusterVertexCount;
    j["maxTotalTriangleCount"] = s.maxTotalTriangleCount;
    j["maxTotalVertexCount"] = s.maxTotalVertexCount;
    j["minPositionTruncateBitCount"] = s.minPositionTruncateBitCount;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureMoveObjectsInputNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["noMoveOverlap"] = s.noMoveOverlap;
    j["maxMovedBytes"] = s.maxMovedBytes;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureInputInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxAccelerationStructureCount"] = s.maxAccelerationStructureCount;
    j["flags"] = s.flags;
    j["opType"] = s.opType;
    j["opMode"] = s.opMode;
    j["opInput"] = s.opInput;
    return j.dump();
}

inline std::string ToJson(const VkClusterAccelerationStructureCommandsInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["input"] = s.input;
    j["dstImplicitData"] = s.dstImplicitData;
    j["scratchData"] = s.scratchData;
    j["dstAddressesArray"] = s.dstAddressesArray;
    j["dstSizesArray"] = s.dstSizesArray;
    j["srcInfosArray"] = s.srcInfosArray;
    j["srcInfosCount"] = s.srcInfosCount;
    j["addressResolutionFlags"] = s.addressResolutionFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiDrawPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxMultiDrawCount"] = s.maxMultiDrawCount;
    return j.dump();
}

inline std::string ToJson(const VkGraphicsShaderGroupCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stageCount"] = s.stageCount;
    j["pStages"] = s.pStages;
    j["pVertexInputState"] = s.pVertexInputState;
    j["pTessellationState"] = s.pTessellationState;
    return j.dump();
}

inline std::string ToJson(const VkGraphicsPipelineShaderGroupsCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["groupCount"] = s.groupCount;
    j["pGroups"] = s.pGroups;
    j["pipelineCount"] = s.pipelineCount;
    j["pPipelines"] = s.pPipelines;
    return j.dump();
}

inline std::string ToJson(const VkBindShaderGroupIndirectCommandNV &s) {
    json j;
    j["groupIndex"] = s.groupIndex;
    return j.dump();
}

inline std::string ToJson(const VkBindIndexBufferIndirectCommandNV &s) {
    json j;
    j["bufferAddress"] = s.bufferAddress;
    j["size"] = s.size;
    j["indexType"] = s.indexType;
    return j.dump();
}

inline std::string ToJson(const VkBindVertexBufferIndirectCommandNV &s) {
    json j;
    j["bufferAddress"] = s.bufferAddress;
    j["size"] = s.size;
    j["stride"] = s.stride;
    return j.dump();
}

inline std::string ToJson(const VkSetStateFlagsIndirectCommandNV &s) {
    json j;
    j["data"] = s.data;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsStreamNV &s) {
    json j;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsLayoutTokenNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["tokenType"] = s.tokenType;
    j["stream"] = s.stream;
    j["offset"] = s.offset;
    j["vertexBindingUnit"] = s.vertexBindingUnit;
    j["vertexDynamicStride"] = s.vertexDynamicStride;
    j["pushconstantPipelineLayout"] = s.pushconstantPipelineLayout;
    j["pushconstantShaderStageFlags"] = s.pushconstantShaderStageFlags;
    j["pushconstantOffset"] = s.pushconstantOffset;
    j["pushconstantSize"] = s.pushconstantSize;
    j["indirectStateFlags"] = s.indirectStateFlags;
    j["indexTypeCount"] = s.indexTypeCount;
    j["pIndexTypes"] = s.pIndexTypes;
    j["pIndexTypeValues"] = s.pIndexTypeValues;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsLayoutCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["tokenCount"] = s.tokenCount;
    j["pTokens"] = s.pTokens;
    j["streamCount"] = s.streamCount;
    j["pStreamStrides"] = s.pStreamStrides;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["pipeline"] = s.pipeline;
    j["indirectCommandsLayout"] = s.indirectCommandsLayout;
    j["streamCount"] = s.streamCount;
    j["pStreams"] = s.pStreams;
    j["sequencesCount"] = s.sequencesCount;
    j["preprocessBuffer"] = s.preprocessBuffer;
    j["preprocessOffset"] = s.preprocessOffset;
    j["preprocessSize"] = s.preprocessSize;
    j["sequencesCountBuffer"] = s.sequencesCountBuffer;
    j["sequencesCountOffset"] = s.sequencesCountOffset;
    j["sequencesIndexBuffer"] = s.sequencesIndexBuffer;
    j["sequencesIndexOffset"] = s.sequencesIndexOffset;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsMemoryRequirementsInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["pipeline"] = s.pipeline;
    j["indirectCommandsLayout"] = s.indirectCommandsLayout;
    j["maxSequencesCount"] = s.maxSequencesCount;
    return j.dump();
}

inline std::string ToJson(const VkPipelineIndirectDeviceAddressInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["pipeline"] = s.pipeline;
    return j.dump();
}

inline std::string ToJson(const VkBindPipelineIndirectCommandNV &s) {
    json j;
    j["pipelineAddress"] = s.pipelineAddress;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFeatures2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["features"] = s.features;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFeatures2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["properties"] = s.properties;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkFormatProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["formatProperties"] = s.formatProperties;
    return j.dump();
}

inline std::string ToJson(const VkFormatProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageFormatProperties"] = s.imageFormatProperties;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageFormatInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["type"] = s.type;
    j["tiling"] = s.tiling;
    j["usage"] = s.usage;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageFormatInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queueFamilyProperties"] = s.queueFamilyProperties;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryProperties"] = s.memoryProperties;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageFormatProperties2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["properties"] = s.properties;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageFormatProperties2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSparseImageFormatInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["type"] = s.type;
    j["samples"] = s.samples;
    j["usage"] = s.usage;
    j["tiling"] = s.tiling;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSparseImageFormatInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePushDescriptorProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxPushDescriptors"] = s.maxPushDescriptors;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePushDescriptorPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkConformanceVersion &s) {
    json j;
    j["major"] = s.major;
    j["minor"] = s.minor;
    j["subminor"] = s.subminor;
    j["patch"] = s.patch;
    return j.dump();
}

inline std::string ToJson(const VkConformanceVersionKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDriverProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["driverID"] = s.driverID;
    j["driverName"] = s.driverName;
    j["driverInfo"] = s.driverInfo;
    j["conformanceVersion"] = s.conformanceVersion;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDriverPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPresentRegionsKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkPresentRegionKHR &s) {
    json j;
    j["rectangleCount"] = s.rectangleCount;
    j["pRectangles"] = s.pRectangles;
    return j.dump();
}

inline std::string ToJson(const VkRectLayerKHR &s) {
    json j;
    j["offset"] = s.offset;
    j["extent"] = s.extent;
    j["layer"] = s.layer;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVariablePointersFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["variablePointersStorageBuffer"] = s.variablePointersStorageBuffer;
    j["variablePointers"] = s.variablePointers;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVariablePointersFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVariablePointerFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVariablePointerFeatures &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryProperties &s) {
    json j;
    j["externalMemoryFeatures"] = s.externalMemoryFeatures;
    j["exportFromImportedHandleTypes"] = s.exportFromImportedHandleTypes;
    j["compatibleHandleTypes"] = s.compatibleHandleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalImageFormatInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalImageFormatInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalImageFormatProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalMemoryProperties"] = s.externalMemoryProperties;
    return j.dump();
}

inline std::string ToJson(const VkExternalImageFormatPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalBufferInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["usage"] = s.usage;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalBufferInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalBufferProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalMemoryProperties"] = s.externalMemoryProperties;
    return j.dump();
}

inline std::string ToJson(const VkExternalBufferPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceIDProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceUUID"] = s.deviceUUID;
    j["driverUUID"] = s.driverUUID;
    j["deviceLUID"] = s.deviceLUID;
    j["deviceNodeMask"] = s.deviceNodeMask;
    j["deviceLUIDValid"] = s.deviceLUIDValid;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceIDPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryImageCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryImageCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryBufferCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryBufferCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExportMemoryAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExportMemoryAllocateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkExportMemoryWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    j["dwAccess"] = s.dwAccess;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryZirconHandleInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkMemoryZirconHandlePropertiesFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetZirconHandleInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkMemoryWin32HandlePropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["fd"] = s.fd;
    return j.dump();
}

inline std::string ToJson(const VkMemoryFdPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkWin32KeyedMutexAcquireReleaseInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["acquireCount"] = s.acquireCount;
    j["pAcquireSyncs"] = s.pAcquireSyncs;
    j["pAcquireKeys"] = s.pAcquireKeys;
    j["pAcquireTimeouts"] = s.pAcquireTimeouts;
    j["releaseCount"] = s.releaseCount;
    j["pReleaseSyncs"] = s.pReleaseSyncs;
    j["pReleaseKeys"] = s.pReleaseKeys;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryMetalHandleInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkMemoryMetalHandlePropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetMetalHandleInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalSemaphoreInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalSemaphoreInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalSemaphoreProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["exportFromImportedHandleTypes"] = s.exportFromImportedHandleTypes;
    j["compatibleHandleTypes"] = s.compatibleHandleTypes;
    j["externalSemaphoreFeatures"] = s.externalSemaphoreFeatures;
    return j.dump();
}

inline std::string ToJson(const VkExternalSemaphorePropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExportSemaphoreCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExportSemaphoreCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImportSemaphoreWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["flags"] = s.flags;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkExportSemaphoreWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    j["dwAccess"] = s.dwAccess;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkD3D12FenceSubmitInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreValuesCount"] = s.waitSemaphoreValuesCount;
    j["pWaitSemaphoreValues"] = s.pWaitSemaphoreValues;
    j["signalSemaphoreValuesCount"] = s.signalSemaphoreValuesCount;
    j["pSignalSemaphoreValues"] = s.pSignalSemaphoreValues;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreGetWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkImportSemaphoreFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["flags"] = s.flags;
    j["handleType"] = s.handleType;
    j["fd"] = s.fd;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreGetFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkImportSemaphoreZirconHandleInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["flags"] = s.flags;
    j["handleType"] = s.handleType;
    j["zirconHandle"] = s.zirconHandle;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreGetZirconHandleInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalFenceInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalFenceInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExternalFenceProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["exportFromImportedHandleTypes"] = s.exportFromImportedHandleTypes;
    j["compatibleHandleTypes"] = s.compatibleHandleTypes;
    j["externalFenceFeatures"] = s.externalFenceFeatures;
    return j.dump();
}

inline std::string ToJson(const VkExternalFencePropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkExportFenceCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleTypes"] = s.handleTypes;
    return j.dump();
}

inline std::string ToJson(const VkExportFenceCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImportFenceWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["flags"] = s.flags;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkExportFenceWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    j["dwAccess"] = s.dwAccess;
    j["name"] = s.name;
    return j.dump();
}

inline std::string ToJson(const VkFenceGetWin32HandleInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkImportFenceFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["flags"] = s.flags;
    j["handleType"] = s.handleType;
    j["fd"] = s.fd;
    return j.dump();
}

inline std::string ToJson(const VkFenceGetFdInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkExportFenceSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    return j.dump();
}

inline std::string ToJson(const VkImportFenceSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkFenceGetSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fence"] = s.fence;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkExportSemaphoreSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pAttributes"] = s.pAttributes;
    return j.dump();
}

inline std::string ToJson(const VkImportSemaphoreSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["handleType"] = s.handleType;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreGetSciSyncInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkSciSyncAttributesInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["clientType"] = s.clientType;
    j["primitiveType"] = s.primitiveType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalSciSyncFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sciSyncFence"] = s.sciSyncFence;
    j["sciSyncSemaphore"] = s.sciSyncSemaphore;
    j["sciSyncImport"] = s.sciSyncImport;
    j["sciSyncExport"] = s.sciSyncExport;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalSciSync2FeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sciSyncFence"] = s.sciSyncFence;
    j["sciSyncSemaphore2"] = s.sciSyncSemaphore2;
    j["sciSyncImport"] = s.sciSyncImport;
    j["sciSyncExport"] = s.sciSyncExport;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSciSyncPoolCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handle"] = s.handle;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSciSyncCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphorePool"] = s.semaphorePool;
    j["pFence"] = s.pFence;
    return j.dump();
}

inline std::string ToJson(const VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphoreSciSyncPoolRequestCount"] = s.semaphoreSciSyncPoolRequestCount;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multiview"] = s.multiview;
    j["multiviewGeometryShader"] = s.multiviewGeometryShader;
    j["multiviewTessellationShader"] = s.multiviewTessellationShader;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxMultiviewViewCount"] = s.maxMultiviewViewCount;
    j["maxMultiviewInstanceIndex"] = s.maxMultiviewInstanceIndex;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassMultiviewCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subpassCount"] = s.subpassCount;
    j["pViewMasks"] = s.pViewMasks;
    j["dependencyCount"] = s.dependencyCount;
    j["pViewOffsets"] = s.pViewOffsets;
    j["correlationMaskCount"] = s.correlationMaskCount;
    j["pCorrelationMasks"] = s.pCorrelationMasks;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassMultiviewCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceCapabilities2EXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minImageCount"] = s.minImageCount;
    j["maxImageCount"] = s.maxImageCount;
    j["currentExtent"] = s.currentExtent;
    j["minImageExtent"] = s.minImageExtent;
    j["maxImageExtent"] = s.maxImageExtent;
    j["maxImageArrayLayers"] = s.maxImageArrayLayers;
    j["supportedTransforms"] = s.supportedTransforms;
    j["currentTransform"] = s.currentTransform;
    j["supportedCompositeAlpha"] = s.supportedCompositeAlpha;
    j["supportedUsageFlags"] = s.supportedUsageFlags;
    j["supportedSurfaceCounters"] = s.supportedSurfaceCounters;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPowerInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["powerState"] = s.powerState;
    return j.dump();
}

inline std::string ToJson(const VkDeviceEventInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceEvent"] = s.deviceEvent;
    return j.dump();
}

inline std::string ToJson(const VkDisplayEventInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displayEvent"] = s.displayEvent;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainCounterCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["surfaceCounters"] = s.surfaceCounters;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGroupProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["physicalDeviceCount"] = s.physicalDeviceCount;
    j["physicalDevices"] = s.physicalDevices;
    j["subsetAllocation"] = s.subsetAllocation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGroupPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryAllocateFlagsInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["deviceMask"] = s.deviceMask;
    return j.dump();
}

inline std::string ToJson(const VkMemoryAllocateFlagsInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindBufferMemoryInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    return j.dump();
}

inline std::string ToJson(const VkBindBufferMemoryInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindBufferMemoryDeviceGroupInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceIndexCount"] = s.deviceIndexCount;
    j["pDeviceIndices"] = s.pDeviceIndices;
    return j.dump();
}

inline std::string ToJson(const VkBindBufferMemoryDeviceGroupInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindImageMemoryInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    return j.dump();
}

inline std::string ToJson(const VkBindImageMemoryInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindImageMemoryDeviceGroupInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceIndexCount"] = s.deviceIndexCount;
    j["pDeviceIndices"] = s.pDeviceIndices;
    j["splitInstanceBindRegionCount"] = s.splitInstanceBindRegionCount;
    j["pSplitInstanceBindRegions"] = s.pSplitInstanceBindRegions;
    return j.dump();
}

inline std::string ToJson(const VkBindImageMemoryDeviceGroupInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupRenderPassBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceMask"] = s.deviceMask;
    j["deviceRenderAreaCount"] = s.deviceRenderAreaCount;
    j["pDeviceRenderAreas"] = s.pDeviceRenderAreas;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupRenderPassBeginInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupCommandBufferBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceMask"] = s.deviceMask;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupCommandBufferBeginInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreCount"] = s.waitSemaphoreCount;
    j["pWaitSemaphoreDeviceIndices"] = s.pWaitSemaphoreDeviceIndices;
    j["commandBufferCount"] = s.commandBufferCount;
    j["pCommandBufferDeviceMasks"] = s.pCommandBufferDeviceMasks;
    j["signalSemaphoreCount"] = s.signalSemaphoreCount;
    j["pSignalSemaphoreDeviceIndices"] = s.pSignalSemaphoreDeviceIndices;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupSubmitInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupBindSparseInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["resourceDeviceIndex"] = s.resourceDeviceIndex;
    j["memoryDeviceIndex"] = s.memoryDeviceIndex;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupBindSparseInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupPresentCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentMask"] = s.presentMask;
    j["modes"] = s.modes;
    return j.dump();
}

inline std::string ToJson(const VkImageSwapchainCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchain"] = s.swapchain;
    return j.dump();
}

inline std::string ToJson(const VkBindImageMemorySwapchainInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchain"] = s.swapchain;
    j["imageIndex"] = s.imageIndex;
    return j.dump();
}

inline std::string ToJson(const VkAcquireNextImageInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchain"] = s.swapchain;
    j["timeout"] = s.timeout;
    j["semaphore"] = s.semaphore;
    j["fence"] = s.fence;
    j["deviceMask"] = s.deviceMask;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupPresentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pDeviceMasks"] = s.pDeviceMasks;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupDeviceCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["physicalDeviceCount"] = s.physicalDeviceCount;
    j["pPhysicalDevices"] = s.pPhysicalDevices;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupDeviceCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceGroupSwapchainCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["modes"] = s.modes;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorUpdateTemplateEntry &s) {
    json j;
    j["dstBinding"] = s.dstBinding;
    j["dstArrayElement"] = s.dstArrayElement;
    j["descriptorCount"] = s.descriptorCount;
    j["descriptorType"] = s.descriptorType;
    j["offset"] = s.offset;
    j["stride"] = s.stride;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorUpdateTemplateEntryKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorUpdateTemplateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["descriptorUpdateEntryCount"] = s.descriptorUpdateEntryCount;
    j["pDescriptorUpdateEntries"] = s.pDescriptorUpdateEntries;
    j["templateType"] = s.templateType;
    j["descriptorSetLayout"] = s.descriptorSetLayout;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["pipelineLayout"] = s.pipelineLayout;
    j["set"] = s.set;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorUpdateTemplateCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkXYColorEXT &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentIdFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentId"] = s.presentId;
    return j.dump();
}

inline std::string ToJson(const VkPresentIdKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pPresentIds"] = s.pPresentIds;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentWaitFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentWait"] = s.presentWait;
    return j.dump();
}

inline std::string ToJson(const VkHdrMetadataEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displayPrimaryRed"] = s.displayPrimaryRed;
    j["displayPrimaryGreen"] = s.displayPrimaryGreen;
    j["displayPrimaryBlue"] = s.displayPrimaryBlue;
    j["whitePoint"] = s.whitePoint;
    j["maxLuminance"] = s.maxLuminance;
    j["minLuminance"] = s.minLuminance;
    j["maxContentLightLevel"] = s.maxContentLightLevel;
    j["maxFrameAverageLightLevel"] = s.maxFrameAverageLightLevel;
    return j.dump();
}

inline std::string ToJson(const VkHdrVividDynamicMetadataHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dynamicMetadataSize"] = s.dynamicMetadataSize;
    j["pDynamicMetadata"] = s.pDynamicMetadata;
    return j.dump();
}

inline std::string ToJson(const VkDisplayNativeHdrSurfaceCapabilitiesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["localDimmingSupport"] = s.localDimmingSupport;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainDisplayNativeHdrCreateInfoAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["localDimmingEnable"] = s.localDimmingEnable;
    return j.dump();
}

inline std::string ToJson(const VkRefreshCycleDurationGOOGLE &s) {
    json j;
    j["refreshDuration"] = s.refreshDuration;
    return j.dump();
}

inline std::string ToJson(const VkPastPresentationTimingGOOGLE &s) {
    json j;
    j["presentID"] = s.presentID;
    j["desiredPresentTime"] = s.desiredPresentTime;
    j["actualPresentTime"] = s.actualPresentTime;
    j["earliestPresentTime"] = s.earliestPresentTime;
    j["presentMargin"] = s.presentMargin;
    return j.dump();
}

inline std::string ToJson(const VkPresentTimesInfoGOOGLE &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pTimes"] = s.pTimes;
    return j.dump();
}

inline std::string ToJson(const VkPresentTimeGOOGLE &s) {
    json j;
    j["presentID"] = s.presentID;
    j["desiredPresentTime"] = s.desiredPresentTime;
    return j.dump();
}

inline std::string ToJson(const VkIOSSurfaceCreateInfoMVK &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pView"] = s.pView;
    return j.dump();
}

inline std::string ToJson(const VkMacOSSurfaceCreateInfoMVK &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pView"] = s.pView;
    return j.dump();
}

inline std::string ToJson(const VkMetalSurfaceCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pLayer"] = s.pLayer;
    return j.dump();
}

inline std::string ToJson(const VkViewportWScalingNV &s) {
    json j;
    j["xcoeff"] = s.xcoeff;
    j["ycoeff"] = s.ycoeff;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportWScalingStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["viewportWScalingEnable"] = s.viewportWScalingEnable;
    j["viewportCount"] = s.viewportCount;
    j["pViewportWScalings"] = s.pViewportWScalings;
    return j.dump();
}

inline std::string ToJson(const VkViewportSwizzleNV &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    j["z"] = s.z;
    j["w"] = s.w;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportSwizzleStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["viewportCount"] = s.viewportCount;
    j["pViewportSwizzles"] = s.pViewportSwizzles;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDiscardRectanglePropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxDiscardRectangles"] = s.maxDiscardRectangles;
    return j.dump();
}

inline std::string ToJson(const VkPipelineDiscardRectangleStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["discardRectangleMode"] = s.discardRectangleMode;
    j["discardRectangleCount"] = s.discardRectangleCount;
    j["pDiscardRectangles"] = s.pDiscardRectangles;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["perViewPositionAllComponents"] = s.perViewPositionAllComponents;
    return j.dump();
}

inline std::string ToJson(const VkInputAttachmentAspectReference &s) {
    json j;
    j["subpass"] = s.subpass;
    j["inputAttachmentIndex"] = s.inputAttachmentIndex;
    j["aspectMask"] = s.aspectMask;
    return j.dump();
}

inline std::string ToJson(const VkInputAttachmentAspectReferenceKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassInputAttachmentAspectCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["aspectReferenceCount"] = s.aspectReferenceCount;
    j["pAspectReferences"] = s.pAspectReferences;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassInputAttachmentAspectCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSurfaceInfo2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["surface"] = s.surface;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceCapabilities2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["surfaceCapabilities"] = s.surfaceCapabilities;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceFormat2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["surfaceFormat"] = s.surfaceFormat;
    return j.dump();
}

inline std::string ToJson(const VkDisplayProperties2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displayProperties"] = s.displayProperties;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPlaneProperties2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displayPlaneProperties"] = s.displayPlaneProperties;
    return j.dump();
}

inline std::string ToJson(const VkDisplayModeProperties2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displayModeProperties"] = s.displayModeProperties;
    return j.dump();
}

inline std::string ToJson(const VkDisplayModeStereoPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hdmi3DSupported"] = s.hdmi3DSupported;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPlaneInfo2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mode"] = s.mode;
    j["planeIndex"] = s.planeIndex;
    return j.dump();
}

inline std::string ToJson(const VkDisplayPlaneCapabilities2KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["capabilities"] = s.capabilities;
    return j.dump();
}

inline std::string ToJson(const VkSharedPresentSurfaceCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sharedPresentSupportedUsageFlags"] = s.sharedPresentSupportedUsageFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevice16BitStorageFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["storageBuffer16BitAccess"] = s.storageBuffer16BitAccess;
    j["uniformAndStorageBuffer16BitAccess"] = s.uniformAndStorageBuffer16BitAccess;
    j["storagePushConstant16"] = s.storagePushConstant16;
    j["storageInputOutput16"] = s.storageInputOutput16;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevice16BitStorageFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubgroupProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subgroupSize"] = s.subgroupSize;
    j["supportedStages"] = s.supportedStages;
    j["supportedOperations"] = s.supportedOperations;
    j["quadOperationsInAllStages"] = s.quadOperationsInAllStages;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSubgroupExtendedTypes"] = s.shaderSubgroupExtendedTypes;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferMemoryRequirementsInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkBufferMemoryRequirementsInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceBufferMemoryRequirements &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pCreateInfo"] = s.pCreateInfo;
    return j.dump();
}

inline std::string ToJson(const VkDeviceBufferMemoryRequirementsKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageMemoryRequirementsInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    return j.dump();
}

inline std::string ToJson(const VkImageMemoryRequirementsInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageSparseMemoryRequirementsInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    return j.dump();
}

inline std::string ToJson(const VkImageSparseMemoryRequirementsInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceImageMemoryRequirements &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pCreateInfo"] = s.pCreateInfo;
    j["planeAspect"] = s.planeAspect;
    return j.dump();
}

inline std::string ToJson(const VkDeviceImageMemoryRequirementsKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryRequirements2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryRequirements"] = s.memoryRequirements;
    return j.dump();
}

inline std::string ToJson(const VkMemoryRequirements2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageMemoryRequirements2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryRequirements"] = s.memoryRequirements;
    return j.dump();
}

inline std::string ToJson(const VkSparseImageMemoryRequirements2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePointClippingProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pointClippingBehavior"] = s.pointClippingBehavior;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePointClippingPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryDedicatedRequirements &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["prefersDedicatedAllocation"] = s.prefersDedicatedAllocation;
    j["requiresDedicatedAllocation"] = s.requiresDedicatedAllocation;
    return j.dump();
}

inline std::string ToJson(const VkMemoryDedicatedRequirementsKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryDedicatedAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkMemoryDedicatedAllocateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageViewUsageCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["usage"] = s.usage;
    return j.dump();
}

inline std::string ToJson(const VkImageViewSlicedCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sliceOffset"] = s.sliceOffset;
    j["sliceCount"] = s.sliceCount;
    return j.dump();
}

inline std::string ToJson(const VkImageViewUsageCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineTessellationDomainOriginStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["domainOrigin"] = s.domainOrigin;
    return j.dump();
}

inline std::string ToJson(const VkPipelineTessellationDomainOriginStateCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["conversion"] = s.conversion;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["ycbcrModel"] = s.ycbcrModel;
    j["ycbcrRange"] = s.ycbcrRange;
    j["components"] = s.components;
    j["xChromaOffset"] = s.xChromaOffset;
    j["yChromaOffset"] = s.yChromaOffset;
    j["chromaFilter"] = s.chromaFilter;
    j["forceExplicitReconstruction"] = s.forceExplicitReconstruction;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindImagePlaneMemoryInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["planeAspect"] = s.planeAspect;
    return j.dump();
}

inline std::string ToJson(const VkBindImagePlaneMemoryInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImagePlaneMemoryRequirementsInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["planeAspect"] = s.planeAspect;
    return j.dump();
}

inline std::string ToJson(const VkImagePlaneMemoryRequirementsInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSamplerYcbcrConversionFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["samplerYcbcrConversion"] = s.samplerYcbcrConversion;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionImageFormatProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["combinedImageSamplerDescriptorCount"] = s.combinedImageSamplerDescriptorCount;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionImageFormatPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkTextureLODGatherFormatPropertiesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportsTextureGatherLODBiasAMD"] = s.supportsTextureGatherLODBiasAMD;
    return j.dump();
}

inline std::string ToJson(const VkConditionalRenderingBeginInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkProtectedSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["protectedSubmit"] = s.protectedSubmit;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProtectedMemoryFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["protectedMemory"] = s.protectedMemory;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProtectedMemoryProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["protectedNoFault"] = s.protectedNoFault;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["queueFamilyIndex"] = s.queueFamilyIndex;
    j["queueIndex"] = s.queueIndex;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCoverageToColorStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["coverageToColorEnable"] = s.coverageToColorEnable;
    j["coverageToColorLocation"] = s.coverageToColorLocation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSamplerFilterMinmaxProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["filterMinmaxSingleComponentFormats"] = s.filterMinmaxSingleComponentFormats;
    j["filterMinmaxImageComponentMapping"] = s.filterMinmaxImageComponentMapping;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSampleLocationEXT &s) {
    json j;
    j["x"] = s.x;
    j["y"] = s.y;
    return j.dump();
}

inline std::string ToJson(const VkSampleLocationsInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampleLocationsPerPixel"] = s.sampleLocationsPerPixel;
    j["sampleLocationGridSize"] = s.sampleLocationGridSize;
    j["sampleLocationsCount"] = s.sampleLocationsCount;
    j["pSampleLocations"] = s.pSampleLocations;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentSampleLocationsEXT &s) {
    json j;
    j["attachmentIndex"] = s.attachmentIndex;
    j["sampleLocationsInfo"] = s.sampleLocationsInfo;
    return j.dump();
}

inline std::string ToJson(const VkSubpassSampleLocationsEXT &s) {
    json j;
    j["subpassIndex"] = s.subpassIndex;
    j["sampleLocationsInfo"] = s.sampleLocationsInfo;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassSampleLocationsBeginInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentInitialSampleLocationsCount"] = s.attachmentInitialSampleLocationsCount;
    j["pAttachmentInitialSampleLocations"] = s.pAttachmentInitialSampleLocations;
    j["postSubpassSampleLocationsCount"] = s.postSubpassSampleLocationsCount;
    j["pPostSubpassSampleLocations"] = s.pPostSubpassSampleLocations;
    return j.dump();
}

inline std::string ToJson(const VkPipelineSampleLocationsStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampleLocationsEnable"] = s.sampleLocationsEnable;
    j["sampleLocationsInfo"] = s.sampleLocationsInfo;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSampleLocationsPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampleLocationSampleCounts"] = s.sampleLocationSampleCounts;
    j["maxSampleLocationGridSize"] = s.maxSampleLocationGridSize;
    j["sampleLocationCoordinateRange"] = s.sampleLocationCoordinateRange;
    j["sampleLocationSubPixelBits"] = s.sampleLocationSubPixelBits;
    j["variableSampleLocations"] = s.variableSampleLocations;
    return j.dump();
}

inline std::string ToJson(const VkMultisamplePropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxSampleLocationGridSize"] = s.maxSampleLocationGridSize;
    return j.dump();
}

inline std::string ToJson(const VkSamplerReductionModeCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["reductionMode"] = s.reductionMode;
    return j.dump();
}

inline std::string ToJson(const VkSamplerReductionModeCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["advancedBlendCoherentOperations"] = s.advancedBlendCoherentOperations;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiDrawFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multiDraw"] = s.multiDraw;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["advancedBlendMaxColorAttachments"] = s.advancedBlendMaxColorAttachments;
    j["advancedBlendIndependentBlend"] = s.advancedBlendIndependentBlend;
    j["advancedBlendNonPremultipliedSrcColor"] = s.advancedBlendNonPremultipliedSrcColor;
    j["advancedBlendNonPremultipliedDstColor"] = s.advancedBlendNonPremultipliedDstColor;
    j["advancedBlendCorrelatedOverlap"] = s.advancedBlendCorrelatedOverlap;
    j["advancedBlendAllOperations"] = s.advancedBlendAllOperations;
    return j.dump();
}

inline std::string ToJson(const VkPipelineColorBlendAdvancedStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcPremultiplied"] = s.srcPremultiplied;
    j["dstPremultiplied"] = s.dstPremultiplied;
    j["blendOverlap"] = s.blendOverlap;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInlineUniformBlockFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["inlineUniformBlock"] = s.inlineUniformBlock;
    j["descriptorBindingInlineUniformBlockUpdateAfterBind"] = s.descriptorBindingInlineUniformBlockUpdateAfterBind;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInlineUniformBlockFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInlineUniformBlockProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxInlineUniformBlockSize"] = s.maxInlineUniformBlockSize;
    j["maxPerStageDescriptorInlineUniformBlocks"] = s.maxPerStageDescriptorInlineUniformBlocks;
    j["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] = s.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    j["maxDescriptorSetInlineUniformBlocks"] = s.maxDescriptorSetInlineUniformBlocks;
    j["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] = s.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInlineUniformBlockPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSetInlineUniformBlock &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSetInlineUniformBlockEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorPoolInlineUniformBlockCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxInlineUniformBlockBindings"] = s.maxInlineUniformBlockBindings;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorPoolInlineUniformBlockCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCoverageModulationStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["coverageModulationMode"] = s.coverageModulationMode;
    j["coverageModulationTableEnable"] = s.coverageModulationTableEnable;
    j["coverageModulationTableCount"] = s.coverageModulationTableCount;
    j["pCoverageModulationTable"] = s.pCoverageModulationTable;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatListCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["viewFormatCount"] = s.viewFormatCount;
    j["pViewFormats"] = s.pViewFormats;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatListCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkValidationCacheCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["initialDataSize"] = s.initialDataSize;
    j["pInitialData"] = s.pInitialData;
    return j.dump();
}

inline std::string ToJson(const VkShaderModuleValidationCacheCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["validationCache"] = s.validationCache;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance3Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxPerSetDescriptors"] = s.maxPerSetDescriptors;
    j["maxMemoryAllocationSize"] = s.maxMemoryAllocationSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance3PropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance4Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maintenance4"] = s.maintenance4;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance4FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance4Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxBufferSize"] = s.maxBufferSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance4PropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance5Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maintenance5"] = s.maintenance5;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance5FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance5Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["earlyFragmentMultisampleCoverageAfterSampleCounting"] = s.earlyFragmentMultisampleCoverageAfterSampleCounting;
    j["earlyFragmentSampleMaskTestBeforeSampleCounting"] = s.earlyFragmentSampleMaskTestBeforeSampleCounting;
    j["depthStencilSwizzleOneSupport"] = s.depthStencilSwizzleOneSupport;
    j["polygonModePointSize"] = s.polygonModePointSize;
    j["nonStrictSinglePixelWideLinesUseParallelogram"] = s.nonStrictSinglePixelWideLinesUseParallelogram;
    j["nonStrictWideLinesUseParallelogram"] = s.nonStrictWideLinesUseParallelogram;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance5PropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance6Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maintenance6"] = s.maintenance6;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance6FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance6Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["blockTexelViewCompatibleMultipleLayers"] = s.blockTexelViewCompatibleMultipleLayers;
    j["maxCombinedImageSamplerDescriptorCount"] = s.maxCombinedImageSamplerDescriptorCount;
    j["fragmentShadingRateClampCombinerInputs"] = s.fragmentShadingRateClampCombinerInputs;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance6PropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance7FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maintenance7"] = s.maintenance7;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance7PropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["robustFragmentShadingRateAttachmentAccess"] = s.robustFragmentShadingRateAttachmentAccess;
    j["separateDepthStencilAttachmentAccess"] = s.separateDepthStencilAttachmentAccess;
    j["maxDescriptorSetTotalUniformBuffersDynamic"] = s.maxDescriptorSetTotalUniformBuffersDynamic;
    j["maxDescriptorSetTotalStorageBuffersDynamic"] = s.maxDescriptorSetTotalStorageBuffersDynamic;
    j["maxDescriptorSetTotalBuffersDynamic"] = s.maxDescriptorSetTotalBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindTotalBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLayeredApiPropertiesListKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["layeredApiCount"] = s.layeredApiCount;
    j["pLayeredApis"] = s.pLayeredApis;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLayeredApiPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vendorID"] = s.vendorID;
    j["deviceID"] = s.deviceID;
    j["layeredAPI"] = s.layeredAPI;
    j["deviceName"] = s.deviceName;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLayeredApiVulkanPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["properties"] = s.properties;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMaintenance8FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maintenance8"] = s.maintenance8;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAreaInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["viewMask"] = s.viewMask;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentFormats"] = s.pColorAttachmentFormats;
    j["depthAttachmentFormat"] = s.depthAttachmentFormat;
    j["stencilAttachmentFormat"] = s.stencilAttachmentFormat;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAreaInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutSupport &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supported"] = s.supported;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutSupportKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderDrawParametersFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderDrawParameters"] = s.shaderDrawParameters;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderDrawParameterFeatures &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderFloat16Int8Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderFloat16"] = s.shaderFloat16;
    j["shaderInt8"] = s.shaderInt8;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFloat16Int8FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFloatControlsProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["denormBehaviorIndependence"] = s.denormBehaviorIndependence;
    j["roundingModeIndependence"] = s.roundingModeIndependence;
    j["shaderSignedZeroInfNanPreserveFloat16"] = s.shaderSignedZeroInfNanPreserveFloat16;
    j["shaderSignedZeroInfNanPreserveFloat32"] = s.shaderSignedZeroInfNanPreserveFloat32;
    j["shaderSignedZeroInfNanPreserveFloat64"] = s.shaderSignedZeroInfNanPreserveFloat64;
    j["shaderDenormPreserveFloat16"] = s.shaderDenormPreserveFloat16;
    j["shaderDenormPreserveFloat32"] = s.shaderDenormPreserveFloat32;
    j["shaderDenormPreserveFloat64"] = s.shaderDenormPreserveFloat64;
    j["shaderDenormFlushToZeroFloat16"] = s.shaderDenormFlushToZeroFloat16;
    j["shaderDenormFlushToZeroFloat32"] = s.shaderDenormFlushToZeroFloat32;
    j["shaderDenormFlushToZeroFloat64"] = s.shaderDenormFlushToZeroFloat64;
    j["shaderRoundingModeRTEFloat16"] = s.shaderRoundingModeRTEFloat16;
    j["shaderRoundingModeRTEFloat32"] = s.shaderRoundingModeRTEFloat32;
    j["shaderRoundingModeRTEFloat64"] = s.shaderRoundingModeRTEFloat64;
    j["shaderRoundingModeRTZFloat16"] = s.shaderRoundingModeRTZFloat16;
    j["shaderRoundingModeRTZFloat32"] = s.shaderRoundingModeRTZFloat32;
    j["shaderRoundingModeRTZFloat64"] = s.shaderRoundingModeRTZFloat64;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFloatControlsPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostQueryResetFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hostQueryReset"] = s.hostQueryReset;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostQueryResetFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkNativeBufferUsage2ANDROID &s) {
    json j;
    j["consumer"] = s.consumer;
    j["producer"] = s.producer;
    return j.dump();
}

inline std::string ToJson(const VkNativeBufferANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handle"] = s.handle;
    j["stride"] = s.stride;
    j["format"] = s.format;
    j["usage"] = s.usage;
    j["usage2"] = s.usage2;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainImageCreateInfoANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["usage"] = s.usage;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentationPropertiesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sharedImage"] = s.sharedImage;
    return j.dump();
}

inline std::string ToJson(const VkShaderResourceUsageAMD &s) {
    json j;
    j["numUsedVgprs"] = s.numUsedVgprs;
    j["numUsedSgprs"] = s.numUsedSgprs;
    j["ldsSizePerLocalWorkGroup"] = s.ldsSizePerLocalWorkGroup;
    j["ldsUsageSizeInBytes"] = s.ldsUsageSizeInBytes;
    j["scratchMemUsageInBytes"] = s.scratchMemUsageInBytes;
    return j.dump();
}

inline std::string ToJson(const VkShaderStatisticsInfoAMD &s) {
    json j;
    j["shaderStageMask"] = s.shaderStageMask;
    j["resourceUsage"] = s.resourceUsage;
    j["numPhysicalVgprs"] = s.numPhysicalVgprs;
    j["numPhysicalSgprs"] = s.numPhysicalSgprs;
    j["numAvailableVgprs"] = s.numAvailableVgprs;
    j["numAvailableSgprs"] = s.numAvailableSgprs;
    j["computeWorkGroupSize"] = s.computeWorkGroupSize;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueGlobalPriorityCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["globalPriority"] = s.globalPriority;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueGlobalPriorityCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueGlobalPriorityCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGlobalPriorityQueryFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["globalPriorityQuery"] = s.globalPriorityQuery;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyGlobalPriorityProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["priorityCount"] = s.priorityCount;
    j["priorities"] = s.priorities;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyGlobalPriorityPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyGlobalPriorityPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDebugUtilsObjectNameInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["objectType"] = s.objectType;
    j["objectHandle"] = s.objectHandle;
    j["pObjectName"] = s.pObjectName;
    return j.dump();
}

inline std::string ToJson(const VkDebugUtilsObjectTagInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["objectType"] = s.objectType;
    j["objectHandle"] = s.objectHandle;
    j["tagName"] = s.tagName;
    j["tagSize"] = s.tagSize;
    j["pTag"] = s.pTag;
    return j.dump();
}

inline std::string ToJson(const VkDebugUtilsLabelEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pLabelName"] = s.pLabelName;
    j["color"] = s.color;
    return j.dump();
}

inline std::string ToJson(const VkDebugUtilsMessengerCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["messageSeverity"] = s.messageSeverity;
    j["messageType"] = s.messageType;
    j["pfnUserCallback"] = s.pfnUserCallback;
    j["pUserData"] = s.pUserData;
    return j.dump();
}

inline std::string ToJson(const VkDebugUtilsMessengerCallbackDataEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pMessageIdName"] = s.pMessageIdName;
    j["messageIdNumber"] = s.messageIdNumber;
    j["pMessage"] = s.pMessage;
    j["queueLabelCount"] = s.queueLabelCount;
    j["pQueueLabels"] = s.pQueueLabels;
    j["cmdBufLabelCount"] = s.cmdBufLabelCount;
    j["pCmdBufLabels"] = s.pCmdBufLabels;
    j["objectCount"] = s.objectCount;
    j["pObjects"] = s.pObjects;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceMemoryReport"] = s.deviceMemoryReport;
    return j.dump();
}

inline std::string ToJson(const VkDeviceDeviceMemoryReportCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pfnUserCallback"] = s.pfnUserCallback;
    j["pUserData"] = s.pUserData;
    return j.dump();
}

inline std::string ToJson(const VkDeviceMemoryReportCallbackDataEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["type"] = s.type;
    j["memoryObjectId"] = s.memoryObjectId;
    j["size"] = s.size;
    j["objectType"] = s.objectType;
    j["objectHandle"] = s.objectHandle;
    j["heapIndex"] = s.heapIndex;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryHostPointerInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["handleType"] = s.handleType;
    j["pHostPointer"] = s.pHostPointer;
    return j.dump();
}

inline std::string ToJson(const VkMemoryHostPointerPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalMemoryHostPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minImportedHostPointerAlignment"] = s.minImportedHostPointerAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceConservativeRasterizationPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["primitiveOverestimationSize"] = s.primitiveOverestimationSize;
    j["maxExtraPrimitiveOverestimationSize"] = s.maxExtraPrimitiveOverestimationSize;
    j["extraPrimitiveOverestimationSizeGranularity"] = s.extraPrimitiveOverestimationSizeGranularity;
    j["primitiveUnderestimation"] = s.primitiveUnderestimation;
    j["conservativePointAndLineRasterization"] = s.conservativePointAndLineRasterization;
    j["degenerateTrianglesRasterized"] = s.degenerateTrianglesRasterized;
    j["degenerateLinesRasterized"] = s.degenerateLinesRasterized;
    j["fullyCoveredFragmentShaderInputVariable"] = s.fullyCoveredFragmentShaderInputVariable;
    j["conservativeRasterizationPostDepthCoverage"] = s.conservativeRasterizationPostDepthCoverage;
    return j.dump();
}

inline std::string ToJson(const VkCalibratedTimestampInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["timeDomain"] = s.timeDomain;
    return j.dump();
}

inline std::string ToJson(const VkCalibratedTimestampInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderCorePropertiesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderEngineCount"] = s.shaderEngineCount;
    j["shaderArraysPerEngineCount"] = s.shaderArraysPerEngineCount;
    j["computeUnitsPerShaderArray"] = s.computeUnitsPerShaderArray;
    j["simdPerComputeUnit"] = s.simdPerComputeUnit;
    j["wavefrontsPerSimd"] = s.wavefrontsPerSimd;
    j["wavefrontSize"] = s.wavefrontSize;
    j["sgprsPerSimd"] = s.sgprsPerSimd;
    j["minSgprAllocation"] = s.minSgprAllocation;
    j["maxSgprAllocation"] = s.maxSgprAllocation;
    j["sgprAllocationGranularity"] = s.sgprAllocationGranularity;
    j["vgprsPerSimd"] = s.vgprsPerSimd;
    j["minVgprAllocation"] = s.minVgprAllocation;
    j["maxVgprAllocation"] = s.maxVgprAllocation;
    j["vgprAllocationGranularity"] = s.vgprAllocationGranularity;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderCoreProperties2AMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCoreFeatures"] = s.shaderCoreFeatures;
    j["activeComputeUnitCount"] = s.activeComputeUnitCount;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationConservativeStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["conservativeRasterizationMode"] = s.conservativeRasterizationMode;
    j["extraPrimitiveOverestimationSize"] = s.extraPrimitiveOverestimationSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorIndexingFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderInputAttachmentArrayDynamicIndexing"] = s.shaderInputAttachmentArrayDynamicIndexing;
    j["shaderUniformTexelBufferArrayDynamicIndexing"] = s.shaderUniformTexelBufferArrayDynamicIndexing;
    j["shaderStorageTexelBufferArrayDynamicIndexing"] = s.shaderStorageTexelBufferArrayDynamicIndexing;
    j["shaderUniformBufferArrayNonUniformIndexing"] = s.shaderUniformBufferArrayNonUniformIndexing;
    j["shaderSampledImageArrayNonUniformIndexing"] = s.shaderSampledImageArrayNonUniformIndexing;
    j["shaderStorageBufferArrayNonUniformIndexing"] = s.shaderStorageBufferArrayNonUniformIndexing;
    j["shaderStorageImageArrayNonUniformIndexing"] = s.shaderStorageImageArrayNonUniformIndexing;
    j["shaderInputAttachmentArrayNonUniformIndexing"] = s.shaderInputAttachmentArrayNonUniformIndexing;
    j["shaderUniformTexelBufferArrayNonUniformIndexing"] = s.shaderUniformTexelBufferArrayNonUniformIndexing;
    j["shaderStorageTexelBufferArrayNonUniformIndexing"] = s.shaderStorageTexelBufferArrayNonUniformIndexing;
    j["descriptorBindingUniformBufferUpdateAfterBind"] = s.descriptorBindingUniformBufferUpdateAfterBind;
    j["descriptorBindingSampledImageUpdateAfterBind"] = s.descriptorBindingSampledImageUpdateAfterBind;
    j["descriptorBindingStorageImageUpdateAfterBind"] = s.descriptorBindingStorageImageUpdateAfterBind;
    j["descriptorBindingStorageBufferUpdateAfterBind"] = s.descriptorBindingStorageBufferUpdateAfterBind;
    j["descriptorBindingUniformTexelBufferUpdateAfterBind"] = s.descriptorBindingUniformTexelBufferUpdateAfterBind;
    j["descriptorBindingStorageTexelBufferUpdateAfterBind"] = s.descriptorBindingStorageTexelBufferUpdateAfterBind;
    j["descriptorBindingUpdateUnusedWhilePending"] = s.descriptorBindingUpdateUnusedWhilePending;
    j["descriptorBindingPartiallyBound"] = s.descriptorBindingPartiallyBound;
    j["descriptorBindingVariableDescriptorCount"] = s.descriptorBindingVariableDescriptorCount;
    j["runtimeDescriptorArray"] = s.runtimeDescriptorArray;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorIndexingFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorIndexingProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxUpdateAfterBindDescriptorsInAllPools"] = s.maxUpdateAfterBindDescriptorsInAllPools;
    j["shaderUniformBufferArrayNonUniformIndexingNative"] = s.shaderUniformBufferArrayNonUniformIndexingNative;
    j["shaderSampledImageArrayNonUniformIndexingNative"] = s.shaderSampledImageArrayNonUniformIndexingNative;
    j["shaderStorageBufferArrayNonUniformIndexingNative"] = s.shaderStorageBufferArrayNonUniformIndexingNative;
    j["shaderStorageImageArrayNonUniformIndexingNative"] = s.shaderStorageImageArrayNonUniformIndexingNative;
    j["shaderInputAttachmentArrayNonUniformIndexingNative"] = s.shaderInputAttachmentArrayNonUniformIndexingNative;
    j["robustBufferAccessUpdateAfterBind"] = s.robustBufferAccessUpdateAfterBind;
    j["quadDivergentImplicitLod"] = s.quadDivergentImplicitLod;
    j["maxPerStageDescriptorUpdateAfterBindSamplers"] = s.maxPerStageDescriptorUpdateAfterBindSamplers;
    j["maxPerStageDescriptorUpdateAfterBindUniformBuffers"] = s.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    j["maxPerStageDescriptorUpdateAfterBindStorageBuffers"] = s.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    j["maxPerStageDescriptorUpdateAfterBindSampledImages"] = s.maxPerStageDescriptorUpdateAfterBindSampledImages;
    j["maxPerStageDescriptorUpdateAfterBindStorageImages"] = s.maxPerStageDescriptorUpdateAfterBindStorageImages;
    j["maxPerStageDescriptorUpdateAfterBindInputAttachments"] = s.maxPerStageDescriptorUpdateAfterBindInputAttachments;
    j["maxPerStageUpdateAfterBindResources"] = s.maxPerStageUpdateAfterBindResources;
    j["maxDescriptorSetUpdateAfterBindSamplers"] = s.maxDescriptorSetUpdateAfterBindSamplers;
    j["maxDescriptorSetUpdateAfterBindUniformBuffers"] = s.maxDescriptorSetUpdateAfterBindUniformBuffers;
    j["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindStorageBuffers"] = s.maxDescriptorSetUpdateAfterBindStorageBuffers;
    j["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindSampledImages"] = s.maxDescriptorSetUpdateAfterBindSampledImages;
    j["maxDescriptorSetUpdateAfterBindStorageImages"] = s.maxDescriptorSetUpdateAfterBindStorageImages;
    j["maxDescriptorSetUpdateAfterBindInputAttachments"] = s.maxDescriptorSetUpdateAfterBindInputAttachments;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorIndexingPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutBindingFlagsCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["bindingCount"] = s.bindingCount;
    j["pBindingFlags"] = s.pBindingFlags;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetVariableDescriptorCountAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorSetCount"] = s.descriptorSetCount;
    j["pDescriptorCounts"] = s.pDescriptorCounts;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetVariableDescriptorCountLayoutSupport &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxVariableDescriptorCount"] = s.maxVariableDescriptorCount;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentDescription2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["format"] = s.format;
    j["samples"] = s.samples;
    j["loadOp"] = s.loadOp;
    j["storeOp"] = s.storeOp;
    j["stencilLoadOp"] = s.stencilLoadOp;
    j["stencilStoreOp"] = s.stencilStoreOp;
    j["initialLayout"] = s.initialLayout;
    j["finalLayout"] = s.finalLayout;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentDescription2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentReference2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachment"] = s.attachment;
    j["layout"] = s.layout;
    j["aspectMask"] = s.aspectMask;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentReference2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDescription2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pipelineBindPoint"] = s.pipelineBindPoint;
    j["viewMask"] = s.viewMask;
    j["inputAttachmentCount"] = s.inputAttachmentCount;
    j["pInputAttachments"] = s.pInputAttachments;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachments"] = s.pColorAttachments;
    j["pResolveAttachments"] = s.pResolveAttachments;
    j["pDepthStencilAttachment"] = s.pDepthStencilAttachment;
    j["preserveAttachmentCount"] = s.preserveAttachmentCount;
    j["pPreserveAttachments"] = s.pPreserveAttachments;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDescription2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDependency2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSubpass"] = s.srcSubpass;
    j["dstSubpass"] = s.dstSubpass;
    j["srcStageMask"] = s.srcStageMask;
    j["dstStageMask"] = s.dstStageMask;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["dependencyFlags"] = s.dependencyFlags;
    j["viewOffset"] = s.viewOffset;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDependency2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreateInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["attachmentCount"] = s.attachmentCount;
    j["pAttachments"] = s.pAttachments;
    j["subpassCount"] = s.subpassCount;
    j["pSubpasses"] = s.pSubpasses;
    j["dependencyCount"] = s.dependencyCount;
    j["pDependencies"] = s.pDependencies;
    j["correlatedViewMaskCount"] = s.correlatedViewMaskCount;
    j["pCorrelatedViewMasks"] = s.pCorrelatedViewMasks;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreateInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["contents"] = s.contents;
    return j.dump();
}

inline std::string ToJson(const VkSubpassBeginInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassEndInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkSubpassEndInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTimelineSemaphoreFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["timelineSemaphore"] = s.timelineSemaphore;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTimelineSemaphoreProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxTimelineSemaphoreValueDifference"] = s.maxTimelineSemaphoreValueDifference;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTimelineSemaphorePropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreTypeCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphoreType"] = s.semaphoreType;
    j["initialValue"] = s.initialValue;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreTypeCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkTimelineSemaphoreSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["waitSemaphoreValueCount"] = s.waitSemaphoreValueCount;
    j["pWaitSemaphoreValues"] = s.pWaitSemaphoreValues;
    j["signalSemaphoreValueCount"] = s.signalSemaphoreValueCount;
    j["pSignalSemaphoreValues"] = s.pSignalSemaphoreValues;
    return j.dump();
}

inline std::string ToJson(const VkTimelineSemaphoreSubmitInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreWaitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["semaphoreCount"] = s.semaphoreCount;
    j["pSemaphores"] = s.pSemaphores;
    j["pValues"] = s.pValues;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreWaitInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSignalInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["value"] = s.value;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSignalInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputBindingDivisorDescription &s) {
    json j;
    j["binding"] = s.binding;
    j["divisor"] = s.divisor;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputBindingDivisorDescriptionKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputBindingDivisorDescriptionEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineVertexInputDivisorStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexBindingDivisorCount"] = s.vertexBindingDivisorCount;
    j["pVertexBindingDivisors"] = s.pVertexBindingDivisors;
    return j.dump();
}

inline std::string ToJson(const VkPipelineVertexInputDivisorStateCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineVertexInputDivisorStateCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxVertexAttribDivisor"] = s.maxVertexAttribDivisor;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxVertexAttribDivisor"] = s.maxVertexAttribDivisor;
    j["supportsNonZeroFirstInstance"] = s.supportsNonZeroFirstInstance;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePCIBusInfoPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pciDomain"] = s.pciDomain;
    j["pciBus"] = s.pciBus;
    j["pciDevice"] = s.pciDevice;
    j["pciFunction"] = s.pciFunction;
    return j.dump();
}

inline std::string ToJson(const VkImportAndroidHardwareBufferInfoANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkAndroidHardwareBufferUsageANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["androidHardwareBufferUsage"] = s.androidHardwareBufferUsage;
    return j.dump();
}

inline std::string ToJson(const VkAndroidHardwareBufferPropertiesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["allocationSize"] = s.allocationSize;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetAndroidHardwareBufferInfoANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    return j.dump();
}

inline std::string ToJson(const VkAndroidHardwareBufferFormatPropertiesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["externalFormat"] = s.externalFormat;
    j["formatFeatures"] = s.formatFeatures;
    j["samplerYcbcrConversionComponents"] = s.samplerYcbcrConversionComponents;
    j["suggestedYcbcrModel"] = s.suggestedYcbcrModel;
    j["suggestedYcbcrRange"] = s.suggestedYcbcrRange;
    j["suggestedXChromaOffset"] = s.suggestedXChromaOffset;
    j["suggestedYChromaOffset"] = s.suggestedYChromaOffset;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceConditionalRenderingInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["conditionalRenderingEnable"] = s.conditionalRenderingEnable;
    return j.dump();
}

inline std::string ToJson(const VkExternalFormatANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalFormat"] = s.externalFormat;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevice8BitStorageFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["storageBuffer8BitAccess"] = s.storageBuffer8BitAccess;
    j["uniformAndStorageBuffer8BitAccess"] = s.uniformAndStorageBuffer8BitAccess;
    j["storagePushConstant8"] = s.storagePushConstant8;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevice8BitStorageFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceConditionalRenderingFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["conditionalRendering"] = s.conditionalRendering;
    j["inheritedConditionalRendering"] = s.inheritedConditionalRendering;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkanMemoryModelFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vulkanMemoryModel"] = s.vulkanMemoryModel;
    j["vulkanMemoryModelDeviceScope"] = s.vulkanMemoryModelDeviceScope;
    j["vulkanMemoryModelAvailabilityVisibilityChains"] = s.vulkanMemoryModelAvailabilityVisibilityChains;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderAtomicInt64Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderBufferInt64Atomics"] = s.shaderBufferInt64Atomics;
    j["shaderSharedInt64Atomics"] = s.shaderSharedInt64Atomics;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderBufferFloat32Atomics"] = s.shaderBufferFloat32Atomics;
    j["shaderBufferFloat32AtomicAdd"] = s.shaderBufferFloat32AtomicAdd;
    j["shaderBufferFloat64Atomics"] = s.shaderBufferFloat64Atomics;
    j["shaderBufferFloat64AtomicAdd"] = s.shaderBufferFloat64AtomicAdd;
    j["shaderSharedFloat32Atomics"] = s.shaderSharedFloat32Atomics;
    j["shaderSharedFloat32AtomicAdd"] = s.shaderSharedFloat32AtomicAdd;
    j["shaderSharedFloat64Atomics"] = s.shaderSharedFloat64Atomics;
    j["shaderSharedFloat64AtomicAdd"] = s.shaderSharedFloat64AtomicAdd;
    j["shaderImageFloat32Atomics"] = s.shaderImageFloat32Atomics;
    j["shaderImageFloat32AtomicAdd"] = s.shaderImageFloat32AtomicAdd;
    j["sparseImageFloat32Atomics"] = s.sparseImageFloat32Atomics;
    j["sparseImageFloat32AtomicAdd"] = s.sparseImageFloat32AtomicAdd;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderBufferFloat16Atomics"] = s.shaderBufferFloat16Atomics;
    j["shaderBufferFloat16AtomicAdd"] = s.shaderBufferFloat16AtomicAdd;
    j["shaderBufferFloat16AtomicMinMax"] = s.shaderBufferFloat16AtomicMinMax;
    j["shaderBufferFloat32AtomicMinMax"] = s.shaderBufferFloat32AtomicMinMax;
    j["shaderBufferFloat64AtomicMinMax"] = s.shaderBufferFloat64AtomicMinMax;
    j["shaderSharedFloat16Atomics"] = s.shaderSharedFloat16Atomics;
    j["shaderSharedFloat16AtomicAdd"] = s.shaderSharedFloat16AtomicAdd;
    j["shaderSharedFloat16AtomicMinMax"] = s.shaderSharedFloat16AtomicMinMax;
    j["shaderSharedFloat32AtomicMinMax"] = s.shaderSharedFloat32AtomicMinMax;
    j["shaderSharedFloat64AtomicMinMax"] = s.shaderSharedFloat64AtomicMinMax;
    j["shaderImageFloat32AtomicMinMax"] = s.shaderImageFloat32AtomicMinMax;
    j["sparseImageFloat32AtomicMinMax"] = s.sparseImageFloat32AtomicMinMax;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexAttributeInstanceRateDivisor"] = s.vertexAttributeInstanceRateDivisor;
    j["vertexAttributeInstanceRateZeroDivisor"] = s.vertexAttributeInstanceRateZeroDivisor;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyCheckpointPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["checkpointExecutionStageMask"] = s.checkpointExecutionStageMask;
    return j.dump();
}

inline std::string ToJson(const VkCheckpointDataNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stage"] = s.stage;
    j["pCheckpointMarker"] = s.pCheckpointMarker;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthStencilResolveProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportedDepthResolveModes"] = s.supportedDepthResolveModes;
    j["supportedStencilResolveModes"] = s.supportedStencilResolveModes;
    j["independentResolveNone"] = s.independentResolveNone;
    j["independentResolve"] = s.independentResolve;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthStencilResolvePropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDescriptionDepthStencilResolve &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthResolveMode"] = s.depthResolveMode;
    j["stencilResolveMode"] = s.stencilResolveMode;
    j["pDepthStencilResolveAttachment"] = s.pDepthStencilResolveAttachment;
    return j.dump();
}

inline std::string ToJson(const VkSubpassDescriptionDepthStencilResolveKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageViewASTCDecodeModeEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["decodeMode"] = s.decodeMode;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceASTCDecodeFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["decodeModeSharedExponent"] = s.decodeModeSharedExponent;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTransformFeedbackFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["transformFeedback"] = s.transformFeedback;
    j["geometryStreams"] = s.geometryStreams;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTransformFeedbackPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxTransformFeedbackStreams"] = s.maxTransformFeedbackStreams;
    j["maxTransformFeedbackBuffers"] = s.maxTransformFeedbackBuffers;
    j["maxTransformFeedbackBufferSize"] = s.maxTransformFeedbackBufferSize;
    j["maxTransformFeedbackStreamDataSize"] = s.maxTransformFeedbackStreamDataSize;
    j["maxTransformFeedbackBufferDataSize"] = s.maxTransformFeedbackBufferDataSize;
    j["maxTransformFeedbackBufferDataStride"] = s.maxTransformFeedbackBufferDataStride;
    j["transformFeedbackQueries"] = s.transformFeedbackQueries;
    j["transformFeedbackStreamsLinesTriangles"] = s.transformFeedbackStreamsLinesTriangles;
    j["transformFeedbackRasterizationStreamSelect"] = s.transformFeedbackRasterizationStreamSelect;
    j["transformFeedbackDraw"] = s.transformFeedbackDraw;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationStateStreamCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["rasterizationStream"] = s.rasterizationStream;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["representativeFragmentTest"] = s.representativeFragmentTest;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRepresentativeFragmentTestStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["representativeFragmentTestEnable"] = s.representativeFragmentTestEnable;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExclusiveScissorFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["exclusiveScissor"] = s.exclusiveScissor;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportExclusiveScissorStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["exclusiveScissorCount"] = s.exclusiveScissorCount;
    j["pExclusiveScissors"] = s.pExclusiveScissors;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCornerSampledImageFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cornerSampledImage"] = s.cornerSampledImage;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["computeDerivativeGroupQuads"] = s.computeDerivativeGroupQuads;
    j["computeDerivativeGroupLinear"] = s.computeDerivativeGroupLinear;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["meshAndTaskShaderDerivatives"] = s.meshAndTaskShaderDerivatives;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderImageFootprintFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageFootprint"] = s.imageFootprint;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dedicatedAllocationImageAliasing"] = s.dedicatedAllocationImageAliasing;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["indirectCopy"] = s.indirectCopy;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportedQueues"] = s.supportedQueues;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryDecompressionFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryDecompression"] = s.memoryDecompression;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryDecompressionPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["decompressionMethods"] = s.decompressionMethods;
    j["maxDecompressionIndirectCount"] = s.maxDecompressionIndirectCount;
    return j.dump();
}

inline std::string ToJson(const VkShadingRatePaletteNV &s) {
    json j;
    j["shadingRatePaletteEntryCount"] = s.shadingRatePaletteEntryCount;
    j["pShadingRatePaletteEntries"] = s.pShadingRatePaletteEntries;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportShadingRateImageStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shadingRateImageEnable"] = s.shadingRateImageEnable;
    j["viewportCount"] = s.viewportCount;
    j["pShadingRatePalettes"] = s.pShadingRatePalettes;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShadingRateImageFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shadingRateImage"] = s.shadingRateImage;
    j["shadingRateCoarseSampleOrder"] = s.shadingRateCoarseSampleOrder;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShadingRateImagePropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shadingRateTexelSize"] = s.shadingRateTexelSize;
    j["shadingRatePaletteSize"] = s.shadingRatePaletteSize;
    j["shadingRateMaxCoarseSamples"] = s.shadingRateMaxCoarseSamples;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["invocationMask"] = s.invocationMask;
    return j.dump();
}

inline std::string ToJson(const VkCoarseSampleLocationNV &s) {
    json j;
    j["pixelX"] = s.pixelX;
    j["pixelY"] = s.pixelY;
    j["sample"] = s.sample;
    return j.dump();
}

inline std::string ToJson(const VkCoarseSampleOrderCustomNV &s) {
    json j;
    j["shadingRate"] = s.shadingRate;
    j["sampleCount"] = s.sampleCount;
    j["sampleLocationCount"] = s.sampleLocationCount;
    j["pSampleLocations"] = s.pSampleLocations;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampleOrderType"] = s.sampleOrderType;
    j["customSampleOrderCount"] = s.customSampleOrderCount;
    j["pCustomSampleOrders"] = s.pCustomSampleOrders;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMeshShaderFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["taskShader"] = s.taskShader;
    j["meshShader"] = s.meshShader;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMeshShaderPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxDrawMeshTasksCount"] = s.maxDrawMeshTasksCount;
    j["maxTaskWorkGroupInvocations"] = s.maxTaskWorkGroupInvocations;
    j["maxTaskWorkGroupSize"] = s.maxTaskWorkGroupSize;
    j["maxTaskTotalMemorySize"] = s.maxTaskTotalMemorySize;
    j["maxTaskOutputCount"] = s.maxTaskOutputCount;
    j["maxMeshWorkGroupInvocations"] = s.maxMeshWorkGroupInvocations;
    j["maxMeshWorkGroupSize"] = s.maxMeshWorkGroupSize;
    j["maxMeshTotalMemorySize"] = s.maxMeshTotalMemorySize;
    j["maxMeshOutputVertices"] = s.maxMeshOutputVertices;
    j["maxMeshOutputPrimitives"] = s.maxMeshOutputPrimitives;
    j["maxMeshMultiviewViewCount"] = s.maxMeshMultiviewViewCount;
    j["meshOutputPerVertexGranularity"] = s.meshOutputPerVertexGranularity;
    j["meshOutputPerPrimitiveGranularity"] = s.meshOutputPerPrimitiveGranularity;
    return j.dump();
}

inline std::string ToJson(const VkDrawMeshTasksIndirectCommandNV &s) {
    json j;
    j["taskCount"] = s.taskCount;
    j["firstTask"] = s.firstTask;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMeshShaderFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["taskShader"] = s.taskShader;
    j["meshShader"] = s.meshShader;
    j["multiviewMeshShader"] = s.multiviewMeshShader;
    j["primitiveFragmentShadingRateMeshShader"] = s.primitiveFragmentShadingRateMeshShader;
    j["meshShaderQueries"] = s.meshShaderQueries;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMeshShaderPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxTaskWorkGroupTotalCount"] = s.maxTaskWorkGroupTotalCount;
    j["maxTaskWorkGroupCount"] = s.maxTaskWorkGroupCount;
    j["maxTaskWorkGroupInvocations"] = s.maxTaskWorkGroupInvocations;
    j["maxTaskWorkGroupSize"] = s.maxTaskWorkGroupSize;
    j["maxTaskPayloadSize"] = s.maxTaskPayloadSize;
    j["maxTaskSharedMemorySize"] = s.maxTaskSharedMemorySize;
    j["maxTaskPayloadAndSharedMemorySize"] = s.maxTaskPayloadAndSharedMemorySize;
    j["maxMeshWorkGroupTotalCount"] = s.maxMeshWorkGroupTotalCount;
    j["maxMeshWorkGroupCount"] = s.maxMeshWorkGroupCount;
    j["maxMeshWorkGroupInvocations"] = s.maxMeshWorkGroupInvocations;
    j["maxMeshWorkGroupSize"] = s.maxMeshWorkGroupSize;
    j["maxMeshSharedMemorySize"] = s.maxMeshSharedMemorySize;
    j["maxMeshPayloadAndSharedMemorySize"] = s.maxMeshPayloadAndSharedMemorySize;
    j["maxMeshOutputMemorySize"] = s.maxMeshOutputMemorySize;
    j["maxMeshPayloadAndOutputMemorySize"] = s.maxMeshPayloadAndOutputMemorySize;
    j["maxMeshOutputComponents"] = s.maxMeshOutputComponents;
    j["maxMeshOutputVertices"] = s.maxMeshOutputVertices;
    j["maxMeshOutputPrimitives"] = s.maxMeshOutputPrimitives;
    j["maxMeshOutputLayers"] = s.maxMeshOutputLayers;
    j["maxMeshMultiviewViewCount"] = s.maxMeshMultiviewViewCount;
    j["meshOutputPerVertexGranularity"] = s.meshOutputPerVertexGranularity;
    j["meshOutputPerPrimitiveGranularity"] = s.meshOutputPerPrimitiveGranularity;
    j["maxPreferredTaskWorkGroupInvocations"] = s.maxPreferredTaskWorkGroupInvocations;
    j["maxPreferredMeshWorkGroupInvocations"] = s.maxPreferredMeshWorkGroupInvocations;
    j["prefersLocalInvocationVertexOutput"] = s.prefersLocalInvocationVertexOutput;
    j["prefersLocalInvocationPrimitiveOutput"] = s.prefersLocalInvocationPrimitiveOutput;
    j["prefersCompactVertexOutput"] = s.prefersCompactVertexOutput;
    j["prefersCompactPrimitiveOutput"] = s.prefersCompactPrimitiveOutput;
    return j.dump();
}

inline std::string ToJson(const VkDrawMeshTasksIndirectCommandEXT &s) {
    json j;
    j["groupCountX"] = s.groupCountX;
    j["groupCountY"] = s.groupCountY;
    j["groupCountZ"] = s.groupCountZ;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingShaderGroupCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["generalShader"] = s.generalShader;
    j["closestHitShader"] = s.closestHitShader;
    j["anyHitShader"] = s.anyHitShader;
    j["intersectionShader"] = s.intersectionShader;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingShaderGroupCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["generalShader"] = s.generalShader;
    j["closestHitShader"] = s.closestHitShader;
    j["anyHitShader"] = s.anyHitShader;
    j["intersectionShader"] = s.intersectionShader;
    j["pShaderGroupCaptureReplayHandle"] = s.pShaderGroupCaptureReplayHandle;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingPipelineCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stageCount"] = s.stageCount;
    j["pStages"] = s.pStages;
    j["groupCount"] = s.groupCount;
    j["pGroups"] = s.pGroups;
    j["maxRecursionDepth"] = s.maxRecursionDepth;
    j["layout"] = s.layout;
    j["basePipelineHandle"] = s.basePipelineHandle;
    j["basePipelineIndex"] = s.basePipelineIndex;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingPipelineCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stageCount"] = s.stageCount;
    j["pStages"] = s.pStages;
    j["groupCount"] = s.groupCount;
    j["pGroups"] = s.pGroups;
    j["maxPipelineRayRecursionDepth"] = s.maxPipelineRayRecursionDepth;
    j["pLibraryInfo"] = s.pLibraryInfo;
    j["pLibraryInterface"] = s.pLibraryInterface;
    j["pDynamicState"] = s.pDynamicState;
    j["layout"] = s.layout;
    j["basePipelineHandle"] = s.basePipelineHandle;
    j["basePipelineIndex"] = s.basePipelineIndex;
    return j.dump();
}

inline std::string ToJson(const VkGeometryTrianglesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexData"] = s.vertexData;
    j["vertexOffset"] = s.vertexOffset;
    j["vertexCount"] = s.vertexCount;
    j["vertexStride"] = s.vertexStride;
    j["vertexFormat"] = s.vertexFormat;
    j["indexData"] = s.indexData;
    j["indexOffset"] = s.indexOffset;
    j["indexCount"] = s.indexCount;
    j["indexType"] = s.indexType;
    j["transformData"] = s.transformData;
    j["transformOffset"] = s.transformOffset;
    return j.dump();
}

inline std::string ToJson(const VkGeometryAABBNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["aabbData"] = s.aabbData;
    j["numAABBs"] = s.numAABBs;
    j["stride"] = s.stride;
    j["offset"] = s.offset;
    return j.dump();
}

inline std::string ToJson(const VkGeometryDataNV &s) {
    json j;
    j["triangles"] = s.triangles;
    j["aabbs"] = s.aabbs;
    return j.dump();
}

inline std::string ToJson(const VkGeometryNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["geometryType"] = s.geometryType;
    j["geometry"] = s.geometry;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["flags"] = s.flags;
    j["instanceCount"] = s.instanceCount;
    j["geometryCount"] = s.geometryCount;
    j["pGeometries"] = s.pGeometries;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["compactedSize"] = s.compactedSize;
    j["info"] = s.info;
    return j.dump();
}

inline std::string ToJson(const VkBindAccelerationStructureMemoryInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructure"] = s.accelerationStructure;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    j["deviceIndexCount"] = s.deviceIndexCount;
    j["pDeviceIndices"] = s.pDeviceIndices;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSetAccelerationStructureKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructureCount"] = s.accelerationStructureCount;
    j["pAccelerationStructures"] = s.pAccelerationStructures;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSetAccelerationStructureNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructureCount"] = s.accelerationStructureCount;
    j["pAccelerationStructures"] = s.pAccelerationStructures;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureMemoryRequirementsInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["accelerationStructure"] = s.accelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAccelerationStructureFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructure"] = s.accelerationStructure;
    j["accelerationStructureCaptureReplay"] = s.accelerationStructureCaptureReplay;
    j["accelerationStructureIndirectBuild"] = s.accelerationStructureIndirectBuild;
    j["accelerationStructureHostCommands"] = s.accelerationStructureHostCommands;
    j["descriptorBindingAccelerationStructureUpdateAfterBind"] = s.descriptorBindingAccelerationStructureUpdateAfterBind;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingPipelineFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingPipeline"] = s.rayTracingPipeline;
    j["rayTracingPipelineShaderGroupHandleCaptureReplay"] = s.rayTracingPipelineShaderGroupHandleCaptureReplay;
    j["rayTracingPipelineShaderGroupHandleCaptureReplayMixed"] = s.rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
    j["rayTracingPipelineTraceRaysIndirect"] = s.rayTracingPipelineTraceRaysIndirect;
    j["rayTraversalPrimitiveCulling"] = s.rayTraversalPrimitiveCulling;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayQueryFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayQuery"] = s.rayQuery;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAccelerationStructurePropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxGeometryCount"] = s.maxGeometryCount;
    j["maxInstanceCount"] = s.maxInstanceCount;
    j["maxPrimitiveCount"] = s.maxPrimitiveCount;
    j["maxPerStageDescriptorAccelerationStructures"] = s.maxPerStageDescriptorAccelerationStructures;
    j["maxPerStageDescriptorUpdateAfterBindAccelerationStructures"] = s.maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
    j["maxDescriptorSetAccelerationStructures"] = s.maxDescriptorSetAccelerationStructures;
    j["maxDescriptorSetUpdateAfterBindAccelerationStructures"] = s.maxDescriptorSetUpdateAfterBindAccelerationStructures;
    j["minAccelerationStructureScratchOffsetAlignment"] = s.minAccelerationStructureScratchOffsetAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingPipelinePropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderGroupHandleSize"] = s.shaderGroupHandleSize;
    j["maxRayRecursionDepth"] = s.maxRayRecursionDepth;
    j["maxShaderGroupStride"] = s.maxShaderGroupStride;
    j["shaderGroupBaseAlignment"] = s.shaderGroupBaseAlignment;
    j["shaderGroupHandleCaptureReplaySize"] = s.shaderGroupHandleCaptureReplaySize;
    j["maxRayDispatchInvocationCount"] = s.maxRayDispatchInvocationCount;
    j["shaderGroupHandleAlignment"] = s.shaderGroupHandleAlignment;
    j["maxRayHitAttributeSize"] = s.maxRayHitAttributeSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderGroupHandleSize"] = s.shaderGroupHandleSize;
    j["maxRecursionDepth"] = s.maxRecursionDepth;
    j["maxShaderGroupStride"] = s.maxShaderGroupStride;
    j["shaderGroupBaseAlignment"] = s.shaderGroupBaseAlignment;
    j["maxGeometryCount"] = s.maxGeometryCount;
    j["maxInstanceCount"] = s.maxInstanceCount;
    j["maxTriangleCount"] = s.maxTriangleCount;
    j["maxDescriptorSetAccelerationStructures"] = s.maxDescriptorSetAccelerationStructures;
    return j.dump();
}

inline std::string ToJson(const VkStridedDeviceAddressRegionKHR &s) {
    json j;
    j["deviceAddress"] = s.deviceAddress;
    j["stride"] = s.stride;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkTraceRaysIndirectCommandKHR &s) {
    json j;
    j["width"] = s.width;
    j["height"] = s.height;
    j["depth"] = s.depth;
    return j.dump();
}

inline std::string ToJson(const VkTraceRaysIndirectCommand2KHR &s) {
    json j;
    j["raygenShaderRecordAddress"] = s.raygenShaderRecordAddress;
    j["raygenShaderRecordSize"] = s.raygenShaderRecordSize;
    j["missShaderBindingTableAddress"] = s.missShaderBindingTableAddress;
    j["missShaderBindingTableSize"] = s.missShaderBindingTableSize;
    j["missShaderBindingTableStride"] = s.missShaderBindingTableStride;
    j["hitShaderBindingTableAddress"] = s.hitShaderBindingTableAddress;
    j["hitShaderBindingTableSize"] = s.hitShaderBindingTableSize;
    j["hitShaderBindingTableStride"] = s.hitShaderBindingTableStride;
    j["callableShaderBindingTableAddress"] = s.callableShaderBindingTableAddress;
    j["callableShaderBindingTableSize"] = s.callableShaderBindingTableSize;
    j["callableShaderBindingTableStride"] = s.callableShaderBindingTableStride;
    j["width"] = s.width;
    j["height"] = s.height;
    j["depth"] = s.depth;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingMaintenance1"] = s.rayTracingMaintenance1;
    j["rayTracingPipelineTraceRaysIndirect2"] = s.rayTracingPipelineTraceRaysIndirect2;
    return j.dump();
}

inline std::string ToJson(const VkDrmFormatModifierPropertiesListEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifierCount"] = s.drmFormatModifierCount;
    j["pDrmFormatModifierProperties"] = s.pDrmFormatModifierProperties;
    return j.dump();
}

inline std::string ToJson(const VkDrmFormatModifierPropertiesEXT &s) {
    json j;
    j["drmFormatModifier"] = s.drmFormatModifier;
    j["drmFormatModifierPlaneCount"] = s.drmFormatModifierPlaneCount;
    j["drmFormatModifierTilingFeatures"] = s.drmFormatModifierTilingFeatures;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageDrmFormatModifierInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifier"] = s.drmFormatModifier;
    j["sharingMode"] = s.sharingMode;
    j["queueFamilyIndexCount"] = s.queueFamilyIndexCount;
    j["pQueueFamilyIndices"] = s.pQueueFamilyIndices;
    return j.dump();
}

inline std::string ToJson(const VkImageDrmFormatModifierListCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifierCount"] = s.drmFormatModifierCount;
    j["pDrmFormatModifiers"] = s.pDrmFormatModifiers;
    return j.dump();
}

inline std::string ToJson(const VkImageDrmFormatModifierExplicitCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifier"] = s.drmFormatModifier;
    j["drmFormatModifierPlaneCount"] = s.drmFormatModifierPlaneCount;
    j["pPlaneLayouts"] = s.pPlaneLayouts;
    return j.dump();
}

inline std::string ToJson(const VkImageDrmFormatModifierPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifier"] = s.drmFormatModifier;
    return j.dump();
}

inline std::string ToJson(const VkImageStencilUsageCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stencilUsage"] = s.stencilUsage;
    return j.dump();
}

inline std::string ToJson(const VkImageStencilUsageCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceMemoryOverallocationCreateInfoAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["overallocationBehavior"] = s.overallocationBehavior;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityMap"] = s.fragmentDensityMap;
    j["fragmentDensityMapDynamic"] = s.fragmentDensityMapDynamic;
    j["fragmentDensityMapNonSubsampledImages"] = s.fragmentDensityMapNonSubsampledImages;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityMapDeferred"] = s.fragmentDensityMapDeferred;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityMapOffset"] = s.fragmentDensityMapOffset;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minFragmentDensityTexelSize"] = s.minFragmentDensityTexelSize;
    j["maxFragmentDensityTexelSize"] = s.maxFragmentDensityTexelSize;
    j["fragmentDensityInvocations"] = s.fragmentDensityInvocations;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subsampledLoads"] = s.subsampledLoads;
    j["subsampledCoarseReconstructionEarlyAccess"] = s.subsampledCoarseReconstructionEarlyAccess;
    j["maxSubsampledArrayLayers"] = s.maxSubsampledArrayLayers;
    j["maxDescriptorSetSubsampledSamplers"] = s.maxDescriptorSetSubsampledSamplers;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityOffsetGranularity"] = s.fragmentDensityOffsetGranularity;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassFragmentDensityMapCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityMapAttachment"] = s.fragmentDensityMapAttachment;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassFragmentDensityMapOffsetEndInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentDensityOffsetCount"] = s.fragmentDensityOffsetCount;
    j["pFragmentDensityOffsets"] = s.pFragmentDensityOffsets;
    return j.dump();
}

inline std::string ToJson(const VkSubpassFragmentDensityMapOffsetEndInfoQCOM &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceScalarBlockLayoutFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["scalarBlockLayout"] = s.scalarBlockLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceProtectedCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportsProtected"] = s.supportsProtected;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceUniformBufferStandardLayoutFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["uniformBufferStandardLayout"] = s.uniformBufferStandardLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthClipEnableFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthClipEnable"] = s.depthClipEnable;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationDepthClipStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["depthClipEnable"] = s.depthClipEnable;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryBudgetPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["heapBudget"] = s.heapBudget;
    j["heapUsage"] = s.heapUsage;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMemoryPriorityFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryPriority"] = s.memoryPriority;
    return j.dump();
}

inline std::string ToJson(const VkMemoryPriorityAllocateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["priority"] = s.priority;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pageableDeviceLocalMemory"] = s.pageableDeviceLocalMemory;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBufferDeviceAddressFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["bufferDeviceAddress"] = s.bufferDeviceAddress;
    j["bufferDeviceAddressCaptureReplay"] = s.bufferDeviceAddressCaptureReplay;
    j["bufferDeviceAddressMultiDevice"] = s.bufferDeviceAddressMultiDevice;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBufferDeviceAddressFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["bufferDeviceAddress"] = s.bufferDeviceAddress;
    j["bufferDeviceAddressCaptureReplay"] = s.bufferDeviceAddressCaptureReplay;
    j["bufferDeviceAddressMultiDevice"] = s.bufferDeviceAddressMultiDevice;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBufferAddressFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferDeviceAddressInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkBufferDeviceAddressInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferDeviceAddressInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferOpaqueCaptureAddressCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["opaqueCaptureAddress"] = s.opaqueCaptureAddress;
    return j.dump();
}

inline std::string ToJson(const VkBufferOpaqueCaptureAddressCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferDeviceAddressCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceAddress"] = s.deviceAddress;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageViewImageFormatInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageViewType"] = s.imageViewType;
    return j.dump();
}

inline std::string ToJson(const VkFilterCubicImageViewImageFormatPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["filterCubic"] = s.filterCubic;
    j["filterCubicMinmax"] = s.filterCubicMinmax;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImagelessFramebufferFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imagelessFramebuffer"] = s.imagelessFramebuffer;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImagelessFramebufferFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferAttachmentsCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentImageInfoCount"] = s.attachmentImageInfoCount;
    j["pAttachmentImageInfos"] = s.pAttachmentImageInfos;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferAttachmentsCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferAttachmentImageInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["usage"] = s.usage;
    j["width"] = s.width;
    j["height"] = s.height;
    j["layerCount"] = s.layerCount;
    j["viewFormatCount"] = s.viewFormatCount;
    j["pViewFormats"] = s.pViewFormats;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferAttachmentImageInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassAttachmentBeginInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentCount"] = s.attachmentCount;
    j["pAttachments"] = s.pAttachments;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassAttachmentBeginInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTextureCompressionASTCHDRFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["textureCompressionASTC_HDR"] = s.textureCompressionASTC_HDR;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrixFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrix"] = s.cooperativeMatrix;
    j["cooperativeMatrixRobustBufferAccess"] = s.cooperativeMatrixRobustBufferAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrixPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrixSupportedStages"] = s.cooperativeMatrixSupportedStages;
    return j.dump();
}

inline std::string ToJson(const VkCooperativeMatrixPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["MSize"] = s.MSize;
    j["NSize"] = s.NSize;
    j["KSize"] = s.KSize;
    j["AType"] = s.AType;
    j["BType"] = s.BType;
    j["CType"] = s.CType;
    j["DType"] = s.DType;
    j["scope"] = s.scope;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["ycbcrImageArrays"] = s.ycbcrImageArrays;
    return j.dump();
}

inline std::string ToJson(const VkImageViewHandleInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageView"] = s.imageView;
    j["descriptorType"] = s.descriptorType;
    j["sampler"] = s.sampler;
    return j.dump();
}

inline std::string ToJson(const VkImageViewAddressPropertiesNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceAddress"] = s.deviceAddress;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkPresentFrameTokenGGP &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["frameToken"] = s.frameToken;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreationFeedback &s) {
    json j;
    j["flags"] = s.flags;
    j["duration"] = s.duration;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreationFeedbackEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreationFeedbackCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pPipelineCreationFeedback"] = s.pPipelineCreationFeedback;
    j["pipelineStageCreationFeedbackCount"] = s.pipelineStageCreationFeedbackCount;
    j["pPipelineStageCreationFeedbacks"] = s.pPipelineStageCreationFeedbacks;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCreationFeedbackCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceFullScreenExclusiveInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fullScreenExclusive"] = s.fullScreenExclusive;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceFullScreenExclusiveWin32InfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hmonitor"] = s.hmonitor;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceCapabilitiesFullScreenExclusiveEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fullScreenExclusiveSupported"] = s.fullScreenExclusiveSupported;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentBarrierFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentBarrier"] = s.presentBarrier;
    return j.dump();
}

inline std::string ToJson(const VkSurfaceCapabilitiesPresentBarrierNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentBarrierSupported"] = s.presentBarrierSupported;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainPresentBarrierCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentBarrierEnable"] = s.presentBarrierEnable;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePerformanceQueryFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["performanceCounterQueryPools"] = s.performanceCounterQueryPools;
    j["performanceCounterMultipleQueryPools"] = s.performanceCounterMultipleQueryPools;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePerformanceQueryPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["allowCommandBufferQueryCopies"] = s.allowCommandBufferQueryCopies;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceCounterKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["unit"] = s.unit;
    j["scope"] = s.scope;
    j["storage"] = s.storage;
    j["uuid"] = s.uuid;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceCounterDescriptionKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["name"] = s.name;
    j["category"] = s.category;
    j["description"] = s.description;
    return j.dump();
}

inline std::string ToJson(const VkQueryPoolPerformanceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queueFamilyIndex"] = s.queueFamilyIndex;
    j["counterIndexCount"] = s.counterIndexCount;
    j["pCounterIndices"] = s.pCounterIndices;
    return j.dump();
}

inline std::string ToJson(const VkAcquireProfilingLockInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["timeout"] = s.timeout;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceQuerySubmitInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["counterPassIndex"] = s.counterPassIndex;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceQueryReservationInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxPerformanceQueriesPerPool"] = s.maxPerformanceQueriesPerPool;
    return j.dump();
}

inline std::string ToJson(const VkHeadlessSurfaceCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCoverageReductionModeFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["coverageReductionMode"] = s.coverageReductionMode;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCoverageReductionStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["coverageReductionMode"] = s.coverageReductionMode;
    return j.dump();
}

inline std::string ToJson(const VkFramebufferMixedSamplesCombinationNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["coverageReductionMode"] = s.coverageReductionMode;
    j["rasterizationSamples"] = s.rasterizationSamples;
    j["depthStencilSamples"] = s.depthStencilSamples;
    j["colorSamples"] = s.colorSamples;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderIntegerFunctions2"] = s.shaderIntegerFunctions2;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceValueINTEL &s) {
    json j;
    j["type"] = s.type;
    j["data"] = s.data;
    return j.dump();
}

inline std::string ToJson(const VkInitializePerformanceApiInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pUserData"] = s.pUserData;
    return j.dump();
}

inline std::string ToJson(const VkQueryPoolPerformanceQueryCreateInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["performanceCountersSampling"] = s.performanceCountersSampling;
    return j.dump();
}

inline std::string ToJson(const VkQueryPoolCreateInfoINTEL &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceMarkerInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["marker"] = s.marker;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceStreamMarkerInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["marker"] = s.marker;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceOverrideInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["enable"] = s.enable;
    j["parameter"] = s.parameter;
    return j.dump();
}

inline std::string ToJson(const VkPerformanceConfigurationAcquireInfoINTEL &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderClockFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSubgroupClock"] = s.shaderSubgroupClock;
    j["shaderDeviceClock"] = s.shaderDeviceClock;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceIndexTypeUint8Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["indexTypeUint8"] = s.indexTypeUint8;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceIndexTypeUint8FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceIndexTypeUint8FeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSMCount"] = s.shaderSMCount;
    j["shaderWarpsPerSM"] = s.shaderWarpsPerSM;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSMBuiltins"] = s.shaderSMBuiltins;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentShaderSampleInterlock"] = s.fragmentShaderSampleInterlock;
    j["fragmentShaderPixelInterlock"] = s.fragmentShaderPixelInterlock;
    j["fragmentShaderShadingRateInterlock"] = s.fragmentShaderShadingRateInterlock;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["separateDepthStencilLayouts"] = s.separateDepthStencilLayouts;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentReferenceStencilLayout &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stencilLayout"] = s.stencilLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["primitiveTopologyListRestart"] = s.primitiveTopologyListRestart;
    j["primitiveTopologyPatchListRestart"] = s.primitiveTopologyPatchListRestart;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentReferenceStencilLayoutKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentDescriptionStencilLayout &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stencilInitialLayout"] = s.stencilInitialLayout;
    j["stencilFinalLayout"] = s.stencilFinalLayout;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentDescriptionStencilLayoutKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineExecutableInfo"] = s.pipelineExecutableInfo;
    return j.dump();
}

inline std::string ToJson(const VkPipelineInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipeline"] = s.pipeline;
    return j.dump();
}

inline std::string ToJson(const VkPipelineInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineExecutablePropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stages"] = s.stages;
    j["name"] = s.name;
    j["description"] = s.description;
    j["subgroupSize"] = s.subgroupSize;
    return j.dump();
}

inline std::string ToJson(const VkPipelineExecutableInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipeline"] = s.pipeline;
    j["executableIndex"] = s.executableIndex;
    return j.dump();
}

inline std::string ToJson(const VkPipelineExecutableStatisticKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["name"] = s.name;
    j["description"] = s.description;
    j["format"] = s.format;
    j["value"] = s.value;
    return j.dump();
}

inline std::string ToJson(const VkPipelineExecutableInternalRepresentationKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["name"] = s.name;
    j["description"] = s.description;
    j["isText"] = s.isText;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderDemoteToHelperInvocation"] = s.shaderDemoteToHelperInvocation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["texelBufferAlignment"] = s.texelBufferAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTexelBufferAlignmentProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["storageTexelBufferOffsetAlignmentBytes"] = s.storageTexelBufferOffsetAlignmentBytes;
    j["storageTexelBufferOffsetSingleTexelAlignment"] = s.storageTexelBufferOffsetSingleTexelAlignment;
    j["uniformTexelBufferOffsetAlignmentBytes"] = s.uniformTexelBufferOffsetAlignmentBytes;
    j["uniformTexelBufferOffsetSingleTexelAlignment"] = s.uniformTexelBufferOffsetSingleTexelAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubgroupSizeControlFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subgroupSizeControl"] = s.subgroupSizeControl;
    j["computeFullSubgroups"] = s.computeFullSubgroups;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubgroupSizeControlProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minSubgroupSize"] = s.minSubgroupSize;
    j["maxSubgroupSize"] = s.maxSubgroupSize;
    j["maxComputeWorkgroupSubgroups"] = s.maxComputeWorkgroupSubgroups;
    j["requiredSubgroupSizeStages"] = s.requiredSubgroupSizeStages;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["requiredSubgroupSize"] = s.requiredSubgroupSize;
    return j.dump();
}

inline std::string ToJson(const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkShaderRequiredSubgroupSizeCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubpassShadingPipelineCreateInfoHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["renderPass"] = s.renderPass;
    j["subpass"] = s.subpass;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxSubpassShadingWorkgroupSizeAspectRatio"] = s.maxSubpassShadingWorkgroupSizeAspectRatio;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxWorkGroupCount"] = s.maxWorkGroupCount;
    j["maxWorkGroupSize"] = s.maxWorkGroupSize;
    j["maxOutputClusterCount"] = s.maxOutputClusterCount;
    j["indirectBufferOffsetAlignment"] = s.indirectBufferOffsetAlignment;
    return j.dump();
}

inline std::string ToJson(const VkMemoryOpaqueCaptureAddressAllocateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["opaqueCaptureAddress"] = s.opaqueCaptureAddress;
    return j.dump();
}

inline std::string ToJson(const VkMemoryOpaqueCaptureAddressAllocateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDeviceMemoryOpaqueCaptureAddressInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    return j.dump();
}

inline std::string ToJson(const VkDeviceMemoryOpaqueCaptureAddressInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rectangularLines"] = s.rectangularLines;
    j["bresenhamLines"] = s.bresenhamLines;
    j["smoothLines"] = s.smoothLines;
    j["stippledRectangularLines"] = s.stippledRectangularLines;
    j["stippledBresenhamLines"] = s.stippledBresenhamLines;
    j["stippledSmoothLines"] = s.stippledSmoothLines;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["lineSubPixelPrecisionBits"] = s.lineSubPixelPrecisionBits;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLineRasterizationPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationLineStateCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["lineRasterizationMode"] = s.lineRasterizationMode;
    j["stippledLineEnable"] = s.stippledLineEnable;
    j["lineStippleFactor"] = s.lineStippleFactor;
    j["lineStipplePattern"] = s.lineStipplePattern;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationLineStateCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationLineStateCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineCreationCacheControlFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineCreationCacheControl"] = s.pipelineCreationCacheControl;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan11Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["storageBuffer16BitAccess"] = s.storageBuffer16BitAccess;
    j["uniformAndStorageBuffer16BitAccess"] = s.uniformAndStorageBuffer16BitAccess;
    j["storagePushConstant16"] = s.storagePushConstant16;
    j["storageInputOutput16"] = s.storageInputOutput16;
    j["multiview"] = s.multiview;
    j["multiviewGeometryShader"] = s.multiviewGeometryShader;
    j["multiviewTessellationShader"] = s.multiviewTessellationShader;
    j["variablePointersStorageBuffer"] = s.variablePointersStorageBuffer;
    j["variablePointers"] = s.variablePointers;
    j["protectedMemory"] = s.protectedMemory;
    j["samplerYcbcrConversion"] = s.samplerYcbcrConversion;
    j["shaderDrawParameters"] = s.shaderDrawParameters;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan11Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceUUID"] = s.deviceUUID;
    j["driverUUID"] = s.driverUUID;
    j["deviceLUID"] = s.deviceLUID;
    j["deviceNodeMask"] = s.deviceNodeMask;
    j["deviceLUIDValid"] = s.deviceLUIDValid;
    j["subgroupSize"] = s.subgroupSize;
    j["subgroupSupportedStages"] = s.subgroupSupportedStages;
    j["subgroupSupportedOperations"] = s.subgroupSupportedOperations;
    j["subgroupQuadOperationsInAllStages"] = s.subgroupQuadOperationsInAllStages;
    j["pointClippingBehavior"] = s.pointClippingBehavior;
    j["maxMultiviewViewCount"] = s.maxMultiviewViewCount;
    j["maxMultiviewInstanceIndex"] = s.maxMultiviewInstanceIndex;
    j["protectedNoFault"] = s.protectedNoFault;
    j["maxPerSetDescriptors"] = s.maxPerSetDescriptors;
    j["maxMemoryAllocationSize"] = s.maxMemoryAllocationSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan12Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["samplerMirrorClampToEdge"] = s.samplerMirrorClampToEdge;
    j["drawIndirectCount"] = s.drawIndirectCount;
    j["storageBuffer8BitAccess"] = s.storageBuffer8BitAccess;
    j["uniformAndStorageBuffer8BitAccess"] = s.uniformAndStorageBuffer8BitAccess;
    j["storagePushConstant8"] = s.storagePushConstant8;
    j["shaderBufferInt64Atomics"] = s.shaderBufferInt64Atomics;
    j["shaderSharedInt64Atomics"] = s.shaderSharedInt64Atomics;
    j["shaderFloat16"] = s.shaderFloat16;
    j["shaderInt8"] = s.shaderInt8;
    j["descriptorIndexing"] = s.descriptorIndexing;
    j["shaderInputAttachmentArrayDynamicIndexing"] = s.shaderInputAttachmentArrayDynamicIndexing;
    j["shaderUniformTexelBufferArrayDynamicIndexing"] = s.shaderUniformTexelBufferArrayDynamicIndexing;
    j["shaderStorageTexelBufferArrayDynamicIndexing"] = s.shaderStorageTexelBufferArrayDynamicIndexing;
    j["shaderUniformBufferArrayNonUniformIndexing"] = s.shaderUniformBufferArrayNonUniformIndexing;
    j["shaderSampledImageArrayNonUniformIndexing"] = s.shaderSampledImageArrayNonUniformIndexing;
    j["shaderStorageBufferArrayNonUniformIndexing"] = s.shaderStorageBufferArrayNonUniformIndexing;
    j["shaderStorageImageArrayNonUniformIndexing"] = s.shaderStorageImageArrayNonUniformIndexing;
    j["shaderInputAttachmentArrayNonUniformIndexing"] = s.shaderInputAttachmentArrayNonUniformIndexing;
    j["shaderUniformTexelBufferArrayNonUniformIndexing"] = s.shaderUniformTexelBufferArrayNonUniformIndexing;
    j["shaderStorageTexelBufferArrayNonUniformIndexing"] = s.shaderStorageTexelBufferArrayNonUniformIndexing;
    j["descriptorBindingUniformBufferUpdateAfterBind"] = s.descriptorBindingUniformBufferUpdateAfterBind;
    j["descriptorBindingSampledImageUpdateAfterBind"] = s.descriptorBindingSampledImageUpdateAfterBind;
    j["descriptorBindingStorageImageUpdateAfterBind"] = s.descriptorBindingStorageImageUpdateAfterBind;
    j["descriptorBindingStorageBufferUpdateAfterBind"] = s.descriptorBindingStorageBufferUpdateAfterBind;
    j["descriptorBindingUniformTexelBufferUpdateAfterBind"] = s.descriptorBindingUniformTexelBufferUpdateAfterBind;
    j["descriptorBindingStorageTexelBufferUpdateAfterBind"] = s.descriptorBindingStorageTexelBufferUpdateAfterBind;
    j["descriptorBindingUpdateUnusedWhilePending"] = s.descriptorBindingUpdateUnusedWhilePending;
    j["descriptorBindingPartiallyBound"] = s.descriptorBindingPartiallyBound;
    j["descriptorBindingVariableDescriptorCount"] = s.descriptorBindingVariableDescriptorCount;
    j["runtimeDescriptorArray"] = s.runtimeDescriptorArray;
    j["samplerFilterMinmax"] = s.samplerFilterMinmax;
    j["scalarBlockLayout"] = s.scalarBlockLayout;
    j["imagelessFramebuffer"] = s.imagelessFramebuffer;
    j["uniformBufferStandardLayout"] = s.uniformBufferStandardLayout;
    j["shaderSubgroupExtendedTypes"] = s.shaderSubgroupExtendedTypes;
    j["separateDepthStencilLayouts"] = s.separateDepthStencilLayouts;
    j["hostQueryReset"] = s.hostQueryReset;
    j["timelineSemaphore"] = s.timelineSemaphore;
    j["bufferDeviceAddress"] = s.bufferDeviceAddress;
    j["bufferDeviceAddressCaptureReplay"] = s.bufferDeviceAddressCaptureReplay;
    j["bufferDeviceAddressMultiDevice"] = s.bufferDeviceAddressMultiDevice;
    j["vulkanMemoryModel"] = s.vulkanMemoryModel;
    j["vulkanMemoryModelDeviceScope"] = s.vulkanMemoryModelDeviceScope;
    j["vulkanMemoryModelAvailabilityVisibilityChains"] = s.vulkanMemoryModelAvailabilityVisibilityChains;
    j["shaderOutputViewportIndex"] = s.shaderOutputViewportIndex;
    j["shaderOutputLayer"] = s.shaderOutputLayer;
    j["subgroupBroadcastDynamicId"] = s.subgroupBroadcastDynamicId;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan12Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["driverID"] = s.driverID;
    j["driverName"] = s.driverName;
    j["driverInfo"] = s.driverInfo;
    j["conformanceVersion"] = s.conformanceVersion;
    j["denormBehaviorIndependence"] = s.denormBehaviorIndependence;
    j["roundingModeIndependence"] = s.roundingModeIndependence;
    j["shaderSignedZeroInfNanPreserveFloat16"] = s.shaderSignedZeroInfNanPreserveFloat16;
    j["shaderSignedZeroInfNanPreserveFloat32"] = s.shaderSignedZeroInfNanPreserveFloat32;
    j["shaderSignedZeroInfNanPreserveFloat64"] = s.shaderSignedZeroInfNanPreserveFloat64;
    j["shaderDenormPreserveFloat16"] = s.shaderDenormPreserveFloat16;
    j["shaderDenormPreserveFloat32"] = s.shaderDenormPreserveFloat32;
    j["shaderDenormPreserveFloat64"] = s.shaderDenormPreserveFloat64;
    j["shaderDenormFlushToZeroFloat16"] = s.shaderDenormFlushToZeroFloat16;
    j["shaderDenormFlushToZeroFloat32"] = s.shaderDenormFlushToZeroFloat32;
    j["shaderDenormFlushToZeroFloat64"] = s.shaderDenormFlushToZeroFloat64;
    j["shaderRoundingModeRTEFloat16"] = s.shaderRoundingModeRTEFloat16;
    j["shaderRoundingModeRTEFloat32"] = s.shaderRoundingModeRTEFloat32;
    j["shaderRoundingModeRTEFloat64"] = s.shaderRoundingModeRTEFloat64;
    j["shaderRoundingModeRTZFloat16"] = s.shaderRoundingModeRTZFloat16;
    j["shaderRoundingModeRTZFloat32"] = s.shaderRoundingModeRTZFloat32;
    j["shaderRoundingModeRTZFloat64"] = s.shaderRoundingModeRTZFloat64;
    j["maxUpdateAfterBindDescriptorsInAllPools"] = s.maxUpdateAfterBindDescriptorsInAllPools;
    j["shaderUniformBufferArrayNonUniformIndexingNative"] = s.shaderUniformBufferArrayNonUniformIndexingNative;
    j["shaderSampledImageArrayNonUniformIndexingNative"] = s.shaderSampledImageArrayNonUniformIndexingNative;
    j["shaderStorageBufferArrayNonUniformIndexingNative"] = s.shaderStorageBufferArrayNonUniformIndexingNative;
    j["shaderStorageImageArrayNonUniformIndexingNative"] = s.shaderStorageImageArrayNonUniformIndexingNative;
    j["shaderInputAttachmentArrayNonUniformIndexingNative"] = s.shaderInputAttachmentArrayNonUniformIndexingNative;
    j["robustBufferAccessUpdateAfterBind"] = s.robustBufferAccessUpdateAfterBind;
    j["quadDivergentImplicitLod"] = s.quadDivergentImplicitLod;
    j["maxPerStageDescriptorUpdateAfterBindSamplers"] = s.maxPerStageDescriptorUpdateAfterBindSamplers;
    j["maxPerStageDescriptorUpdateAfterBindUniformBuffers"] = s.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    j["maxPerStageDescriptorUpdateAfterBindStorageBuffers"] = s.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    j["maxPerStageDescriptorUpdateAfterBindSampledImages"] = s.maxPerStageDescriptorUpdateAfterBindSampledImages;
    j["maxPerStageDescriptorUpdateAfterBindStorageImages"] = s.maxPerStageDescriptorUpdateAfterBindStorageImages;
    j["maxPerStageDescriptorUpdateAfterBindInputAttachments"] = s.maxPerStageDescriptorUpdateAfterBindInputAttachments;
    j["maxPerStageUpdateAfterBindResources"] = s.maxPerStageUpdateAfterBindResources;
    j["maxDescriptorSetUpdateAfterBindSamplers"] = s.maxDescriptorSetUpdateAfterBindSamplers;
    j["maxDescriptorSetUpdateAfterBindUniformBuffers"] = s.maxDescriptorSetUpdateAfterBindUniformBuffers;
    j["maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindStorageBuffers"] = s.maxDescriptorSetUpdateAfterBindStorageBuffers;
    j["maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] = s.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    j["maxDescriptorSetUpdateAfterBindSampledImages"] = s.maxDescriptorSetUpdateAfterBindSampledImages;
    j["maxDescriptorSetUpdateAfterBindStorageImages"] = s.maxDescriptorSetUpdateAfterBindStorageImages;
    j["maxDescriptorSetUpdateAfterBindInputAttachments"] = s.maxDescriptorSetUpdateAfterBindInputAttachments;
    j["supportedDepthResolveModes"] = s.supportedDepthResolveModes;
    j["supportedStencilResolveModes"] = s.supportedStencilResolveModes;
    j["independentResolveNone"] = s.independentResolveNone;
    j["independentResolve"] = s.independentResolve;
    j["filterMinmaxSingleComponentFormats"] = s.filterMinmaxSingleComponentFormats;
    j["filterMinmaxImageComponentMapping"] = s.filterMinmaxImageComponentMapping;
    j["maxTimelineSemaphoreValueDifference"] = s.maxTimelineSemaphoreValueDifference;
    j["framebufferIntegerColorSampleCounts"] = s.framebufferIntegerColorSampleCounts;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan13Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["robustImageAccess"] = s.robustImageAccess;
    j["inlineUniformBlock"] = s.inlineUniformBlock;
    j["descriptorBindingInlineUniformBlockUpdateAfterBind"] = s.descriptorBindingInlineUniformBlockUpdateAfterBind;
    j["pipelineCreationCacheControl"] = s.pipelineCreationCacheControl;
    j["privateData"] = s.privateData;
    j["shaderDemoteToHelperInvocation"] = s.shaderDemoteToHelperInvocation;
    j["shaderTerminateInvocation"] = s.shaderTerminateInvocation;
    j["subgroupSizeControl"] = s.subgroupSizeControl;
    j["computeFullSubgroups"] = s.computeFullSubgroups;
    j["synchronization2"] = s.synchronization2;
    j["textureCompressionASTC_HDR"] = s.textureCompressionASTC_HDR;
    j["shaderZeroInitializeWorkgroupMemory"] = s.shaderZeroInitializeWorkgroupMemory;
    j["dynamicRendering"] = s.dynamicRendering;
    j["shaderIntegerDotProduct"] = s.shaderIntegerDotProduct;
    j["maintenance4"] = s.maintenance4;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan13Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minSubgroupSize"] = s.minSubgroupSize;
    j["maxSubgroupSize"] = s.maxSubgroupSize;
    j["maxComputeWorkgroupSubgroups"] = s.maxComputeWorkgroupSubgroups;
    j["requiredSubgroupSizeStages"] = s.requiredSubgroupSizeStages;
    j["maxInlineUniformBlockSize"] = s.maxInlineUniformBlockSize;
    j["maxPerStageDescriptorInlineUniformBlocks"] = s.maxPerStageDescriptorInlineUniformBlocks;
    j["maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] = s.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    j["maxDescriptorSetInlineUniformBlocks"] = s.maxDescriptorSetInlineUniformBlocks;
    j["maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] = s.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    j["maxInlineUniformTotalSize"] = s.maxInlineUniformTotalSize;
    j["integerDotProduct8BitUnsignedAccelerated"] = s.integerDotProduct8BitUnsignedAccelerated;
    j["integerDotProduct8BitSignedAccelerated"] = s.integerDotProduct8BitSignedAccelerated;
    j["integerDotProduct8BitMixedSignednessAccelerated"] = s.integerDotProduct8BitMixedSignednessAccelerated;
    j["integerDotProduct4x8BitPackedUnsignedAccelerated"] = s.integerDotProduct4x8BitPackedUnsignedAccelerated;
    j["integerDotProduct4x8BitPackedSignedAccelerated"] = s.integerDotProduct4x8BitPackedSignedAccelerated;
    j["integerDotProduct4x8BitPackedMixedSignednessAccelerated"] = s.integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    j["integerDotProduct16BitUnsignedAccelerated"] = s.integerDotProduct16BitUnsignedAccelerated;
    j["integerDotProduct16BitSignedAccelerated"] = s.integerDotProduct16BitSignedAccelerated;
    j["integerDotProduct16BitMixedSignednessAccelerated"] = s.integerDotProduct16BitMixedSignednessAccelerated;
    j["integerDotProduct32BitUnsignedAccelerated"] = s.integerDotProduct32BitUnsignedAccelerated;
    j["integerDotProduct32BitSignedAccelerated"] = s.integerDotProduct32BitSignedAccelerated;
    j["integerDotProduct32BitMixedSignednessAccelerated"] = s.integerDotProduct32BitMixedSignednessAccelerated;
    j["integerDotProduct64BitUnsignedAccelerated"] = s.integerDotProduct64BitUnsignedAccelerated;
    j["integerDotProduct64BitSignedAccelerated"] = s.integerDotProduct64BitSignedAccelerated;
    j["integerDotProduct64BitMixedSignednessAccelerated"] = s.integerDotProduct64BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating8BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating16BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating32BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating64BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    j["storageTexelBufferOffsetAlignmentBytes"] = s.storageTexelBufferOffsetAlignmentBytes;
    j["storageTexelBufferOffsetSingleTexelAlignment"] = s.storageTexelBufferOffsetSingleTexelAlignment;
    j["uniformTexelBufferOffsetAlignmentBytes"] = s.uniformTexelBufferOffsetAlignmentBytes;
    j["uniformTexelBufferOffsetSingleTexelAlignment"] = s.uniformTexelBufferOffsetSingleTexelAlignment;
    j["maxBufferSize"] = s.maxBufferSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan14Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["globalPriorityQuery"] = s.globalPriorityQuery;
    j["shaderSubgroupRotate"] = s.shaderSubgroupRotate;
    j["shaderSubgroupRotateClustered"] = s.shaderSubgroupRotateClustered;
    j["shaderFloatControls2"] = s.shaderFloatControls2;
    j["shaderExpectAssume"] = s.shaderExpectAssume;
    j["rectangularLines"] = s.rectangularLines;
    j["bresenhamLines"] = s.bresenhamLines;
    j["smoothLines"] = s.smoothLines;
    j["stippledRectangularLines"] = s.stippledRectangularLines;
    j["stippledBresenhamLines"] = s.stippledBresenhamLines;
    j["stippledSmoothLines"] = s.stippledSmoothLines;
    j["vertexAttributeInstanceRateDivisor"] = s.vertexAttributeInstanceRateDivisor;
    j["vertexAttributeInstanceRateZeroDivisor"] = s.vertexAttributeInstanceRateZeroDivisor;
    j["indexTypeUint8"] = s.indexTypeUint8;
    j["dynamicRenderingLocalRead"] = s.dynamicRenderingLocalRead;
    j["maintenance5"] = s.maintenance5;
    j["maintenance6"] = s.maintenance6;
    j["pipelineProtectedAccess"] = s.pipelineProtectedAccess;
    j["pipelineRobustness"] = s.pipelineRobustness;
    j["hostImageCopy"] = s.hostImageCopy;
    j["pushDescriptor"] = s.pushDescriptor;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkan14Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["lineSubPixelPrecisionBits"] = s.lineSubPixelPrecisionBits;
    j["maxVertexAttribDivisor"] = s.maxVertexAttribDivisor;
    j["supportsNonZeroFirstInstance"] = s.supportsNonZeroFirstInstance;
    j["maxPushDescriptors"] = s.maxPushDescriptors;
    j["dynamicRenderingLocalReadDepthStencilAttachments"] = s.dynamicRenderingLocalReadDepthStencilAttachments;
    j["dynamicRenderingLocalReadMultisampledAttachments"] = s.dynamicRenderingLocalReadMultisampledAttachments;
    j["earlyFragmentMultisampleCoverageAfterSampleCounting"] = s.earlyFragmentMultisampleCoverageAfterSampleCounting;
    j["earlyFragmentSampleMaskTestBeforeSampleCounting"] = s.earlyFragmentSampleMaskTestBeforeSampleCounting;
    j["depthStencilSwizzleOneSupport"] = s.depthStencilSwizzleOneSupport;
    j["polygonModePointSize"] = s.polygonModePointSize;
    j["nonStrictSinglePixelWideLinesUseParallelogram"] = s.nonStrictSinglePixelWideLinesUseParallelogram;
    j["nonStrictWideLinesUseParallelogram"] = s.nonStrictWideLinesUseParallelogram;
    j["blockTexelViewCompatibleMultipleLayers"] = s.blockTexelViewCompatibleMultipleLayers;
    j["maxCombinedImageSamplerDescriptorCount"] = s.maxCombinedImageSamplerDescriptorCount;
    j["fragmentShadingRateClampCombinerInputs"] = s.fragmentShadingRateClampCombinerInputs;
    j["defaultRobustnessStorageBuffers"] = s.defaultRobustnessStorageBuffers;
    j["defaultRobustnessUniformBuffers"] = s.defaultRobustnessUniformBuffers;
    j["defaultRobustnessVertexInputs"] = s.defaultRobustnessVertexInputs;
    j["defaultRobustnessImages"] = s.defaultRobustnessImages;
    j["copySrcLayoutCount"] = s.copySrcLayoutCount;
    j["pCopySrcLayouts"] = s.pCopySrcLayouts;
    j["copyDstLayoutCount"] = s.copyDstLayoutCount;
    j["pCopyDstLayouts"] = s.pCopyDstLayouts;
    j["optimalTilingLayoutUUID"] = s.optimalTilingLayoutUUID;
    j["identicalMemoryTypeRequirements"] = s.identicalMemoryTypeRequirements;
    return j.dump();
}

inline std::string ToJson(const VkPipelineCompilerControlCreateInfoAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["compilerControlFlags"] = s.compilerControlFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCoherentMemoryFeaturesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceCoherentMemory"] = s.deviceCoherentMemory;
    return j.dump();
}

inline std::string ToJson(const VkFaultData &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["faultLevel"] = s.faultLevel;
    j["faultType"] = s.faultType;
    return j.dump();
}

inline std::string ToJson(const VkFaultCallbackInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["faultCount"] = s.faultCount;
    j["pFaults"] = s.pFaults;
    j["pfnFaultCallback"] = s.pfnFaultCallback;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceToolProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["name"] = s.name;
    j["version"] = s.version;
    j["purposes"] = s.purposes;
    j["description"] = s.description;
    j["layer"] = s.layer;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceToolPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSamplerCustomBorderColorCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["customBorderColor"] = s.customBorderColor;
    j["format"] = s.format;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCustomBorderColorPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxCustomBorderColorSamplers"] = s.maxCustomBorderColorSamplers;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCustomBorderColorFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["customBorderColors"] = s.customBorderColors;
    j["customBorderColorWithoutFormat"] = s.customBorderColorWithoutFormat;
    return j.dump();
}

inline std::string ToJson(const VkSamplerBorderColorComponentMappingCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["components"] = s.components;
    j["srgb"] = s.srgb;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["borderColorSwizzle"] = s.borderColorSwizzle;
    j["borderColorSwizzleFromImage"] = s.borderColorSwizzleFromImage;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryTrianglesDataKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexFormat"] = s.vertexFormat;
    j["vertexData"] = s.vertexData;
    j["vertexStride"] = s.vertexStride;
    j["maxVertex"] = s.maxVertex;
    j["indexType"] = s.indexType;
    j["indexData"] = s.indexData;
    j["transformData"] = s.transformData;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryAabbsDataKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["data"] = s.data;
    j["stride"] = s.stride;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryInstancesDataKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["arrayOfPointers"] = s.arrayOfPointers;
    j["data"] = s.data;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryLinearSweptSpheresDataNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexFormat"] = s.vertexFormat;
    j["vertexData"] = s.vertexData;
    j["vertexStride"] = s.vertexStride;
    j["radiusFormat"] = s.radiusFormat;
    j["radiusData"] = s.radiusData;
    j["radiusStride"] = s.radiusStride;
    j["indexType"] = s.indexType;
    j["indexData"] = s.indexData;
    j["indexStride"] = s.indexStride;
    j["indexingMode"] = s.indexingMode;
    j["endCapsMode"] = s.endCapsMode;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometrySpheresDataNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexFormat"] = s.vertexFormat;
    j["vertexData"] = s.vertexData;
    j["vertexStride"] = s.vertexStride;
    j["radiusFormat"] = s.radiusFormat;
    j["radiusData"] = s.radiusData;
    j["radiusStride"] = s.radiusStride;
    j["indexType"] = s.indexType;
    j["indexData"] = s.indexData;
    j["indexStride"] = s.indexStride;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["geometryType"] = s.geometryType;
    j["geometry"] = s.geometry;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureBuildGeometryInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["flags"] = s.flags;
    j["mode"] = s.mode;
    j["srcAccelerationStructure"] = s.srcAccelerationStructure;
    j["dstAccelerationStructure"] = s.dstAccelerationStructure;
    j["geometryCount"] = s.geometryCount;
    j["pGeometries"] = s.pGeometries;
    j["ppGeometries"] = s.ppGeometries;
    j["scratchData"] = s.scratchData;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureBuildRangeInfoKHR &s) {
    json j;
    j["primitiveCount"] = s.primitiveCount;
    j["primitiveOffset"] = s.primitiveOffset;
    j["firstVertex"] = s.firstVertex;
    j["transformOffset"] = s.transformOffset;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["createFlags"] = s.createFlags;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["size"] = s.size;
    j["type"] = s.type;
    j["deviceAddress"] = s.deviceAddress;
    return j.dump();
}

inline std::string ToJson(const VkAabbPositionsKHR &s) {
    json j;
    j["minX"] = s.minX;
    j["minY"] = s.minY;
    j["minZ"] = s.minZ;
    j["maxX"] = s.maxX;
    j["maxY"] = s.maxY;
    j["maxZ"] = s.maxZ;
    return j.dump();
}

inline std::string ToJson(const VkAabbPositionsNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkTransformMatrixKHR &s) {
    json j;
    j["matrix"] = s.matrix;
    return j.dump();
}

inline std::string ToJson(const VkTransformMatrixNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureInstanceKHR &s) {
    json j;
    j["transform"] = s.transform;
    j["instanceCustomIndex"] = s.instanceCustomIndex;
    j["mask"] = s.mask;
    j["instanceShaderBindingTableRecordOffset"] = s.instanceShaderBindingTableRecordOffset;
    j["flags"] = s.flags;
    j["accelerationStructureReference"] = s.accelerationStructureReference;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureInstanceNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureDeviceAddressInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructure"] = s.accelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureVersionInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pVersionData"] = s.pVersionData;
    return j.dump();
}

inline std::string ToJson(const VkCopyAccelerationStructureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkCopyAccelerationStructureToMemoryInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryToAccelerationStructureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkRayTracingPipelineInterfaceCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxPipelineRayPayloadSize"] = s.maxPipelineRayPayloadSize;
    j["maxPipelineRayHitAttributeSize"] = s.maxPipelineRayHitAttributeSize;
    return j.dump();
}

inline std::string ToJson(const VkPipelineLibraryCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["libraryCount"] = s.libraryCount;
    j["pLibraries"] = s.pLibraries;
    return j.dump();
}

inline std::string ToJson(const VkRefreshObjectKHR &s) {
    json j;
    j["objectType"] = s.objectType;
    j["objectHandle"] = s.objectHandle;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkRefreshObjectListKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["objectCount"] = s.objectCount;
    j["pObjects"] = s.pObjects;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["extendedDynamicState"] = s.extendedDynamicState;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["extendedDynamicState2"] = s.extendedDynamicState2;
    j["extendedDynamicState2LogicOp"] = s.extendedDynamicState2LogicOp;
    j["extendedDynamicState2PatchControlPoints"] = s.extendedDynamicState2PatchControlPoints;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["extendedDynamicState3TessellationDomainOrigin"] = s.extendedDynamicState3TessellationDomainOrigin;
    j["extendedDynamicState3DepthClampEnable"] = s.extendedDynamicState3DepthClampEnable;
    j["extendedDynamicState3PolygonMode"] = s.extendedDynamicState3PolygonMode;
    j["extendedDynamicState3RasterizationSamples"] = s.extendedDynamicState3RasterizationSamples;
    j["extendedDynamicState3SampleMask"] = s.extendedDynamicState3SampleMask;
    j["extendedDynamicState3AlphaToCoverageEnable"] = s.extendedDynamicState3AlphaToCoverageEnable;
    j["extendedDynamicState3AlphaToOneEnable"] = s.extendedDynamicState3AlphaToOneEnable;
    j["extendedDynamicState3LogicOpEnable"] = s.extendedDynamicState3LogicOpEnable;
    j["extendedDynamicState3ColorBlendEnable"] = s.extendedDynamicState3ColorBlendEnable;
    j["extendedDynamicState3ColorBlendEquation"] = s.extendedDynamicState3ColorBlendEquation;
    j["extendedDynamicState3ColorWriteMask"] = s.extendedDynamicState3ColorWriteMask;
    j["extendedDynamicState3RasterizationStream"] = s.extendedDynamicState3RasterizationStream;
    j["extendedDynamicState3ConservativeRasterizationMode"] = s.extendedDynamicState3ConservativeRasterizationMode;
    j["extendedDynamicState3ExtraPrimitiveOverestimationSize"] = s.extendedDynamicState3ExtraPrimitiveOverestimationSize;
    j["extendedDynamicState3DepthClipEnable"] = s.extendedDynamicState3DepthClipEnable;
    j["extendedDynamicState3SampleLocationsEnable"] = s.extendedDynamicState3SampleLocationsEnable;
    j["extendedDynamicState3ColorBlendAdvanced"] = s.extendedDynamicState3ColorBlendAdvanced;
    j["extendedDynamicState3ProvokingVertexMode"] = s.extendedDynamicState3ProvokingVertexMode;
    j["extendedDynamicState3LineRasterizationMode"] = s.extendedDynamicState3LineRasterizationMode;
    j["extendedDynamicState3LineStippleEnable"] = s.extendedDynamicState3LineStippleEnable;
    j["extendedDynamicState3DepthClipNegativeOneToOne"] = s.extendedDynamicState3DepthClipNegativeOneToOne;
    j["extendedDynamicState3ViewportWScalingEnable"] = s.extendedDynamicState3ViewportWScalingEnable;
    j["extendedDynamicState3ViewportSwizzle"] = s.extendedDynamicState3ViewportSwizzle;
    j["extendedDynamicState3CoverageToColorEnable"] = s.extendedDynamicState3CoverageToColorEnable;
    j["extendedDynamicState3CoverageToColorLocation"] = s.extendedDynamicState3CoverageToColorLocation;
    j["extendedDynamicState3CoverageModulationMode"] = s.extendedDynamicState3CoverageModulationMode;
    j["extendedDynamicState3CoverageModulationTableEnable"] = s.extendedDynamicState3CoverageModulationTableEnable;
    j["extendedDynamicState3CoverageModulationTable"] = s.extendedDynamicState3CoverageModulationTable;
    j["extendedDynamicState3CoverageReductionMode"] = s.extendedDynamicState3CoverageReductionMode;
    j["extendedDynamicState3RepresentativeFragmentTestEnable"] = s.extendedDynamicState3RepresentativeFragmentTestEnable;
    j["extendedDynamicState3ShadingRateImageEnable"] = s.extendedDynamicState3ShadingRateImageEnable;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dynamicPrimitiveTopologyUnrestricted"] = s.dynamicPrimitiveTopologyUnrestricted;
    return j.dump();
}

inline std::string ToJson(const VkColorBlendEquationEXT &s) {
    json j;
    j["srcColorBlendFactor"] = s.srcColorBlendFactor;
    j["dstColorBlendFactor"] = s.dstColorBlendFactor;
    j["colorBlendOp"] = s.colorBlendOp;
    j["srcAlphaBlendFactor"] = s.srcAlphaBlendFactor;
    j["dstAlphaBlendFactor"] = s.dstAlphaBlendFactor;
    j["alphaBlendOp"] = s.alphaBlendOp;
    return j.dump();
}

inline std::string ToJson(const VkColorBlendAdvancedEXT &s) {
    json j;
    j["advancedBlendOp"] = s.advancedBlendOp;
    j["srcPremultiplied"] = s.srcPremultiplied;
    j["dstPremultiplied"] = s.dstPremultiplied;
    j["blendOverlap"] = s.blendOverlap;
    j["clampResults"] = s.clampResults;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassTransformBeginInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["transform"] = s.transform;
    return j.dump();
}

inline std::string ToJson(const VkCopyCommandTransformInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["transform"] = s.transform;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceRenderPassTransformInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["transform"] = s.transform;
    j["renderArea"] = s.renderArea;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["partitionedAccelerationStructure"] = s.partitionedAccelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxPartitionCount"] = s.maxPartitionCount;
    return j.dump();
}

inline std::string ToJson(const VkBuildPartitionedAccelerationStructureIndirectCommandNV &s) {
    json j;
    j["opType"] = s.opType;
    j["argCount"] = s.argCount;
    j["argData"] = s.argData;
    return j.dump();
}

inline std::string ToJson(const VkPartitionedAccelerationStructureFlagsNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["enablePartitionTranslation"] = s.enablePartitionTranslation;
    return j.dump();
}

inline std::string ToJson(const VkPartitionedAccelerationStructureWriteInstanceDataNV &s) {
    json j;
    j["transform"] = s.transform;
    j["explicitAABB"] = s.explicitAABB;
    j["instanceID"] = s.instanceID;
    j["instanceMask"] = s.instanceMask;
    j["instanceContributionToHitGroupIndex"] = s.instanceContributionToHitGroupIndex;
    j["instanceFlags"] = s.instanceFlags;
    j["instanceIndex"] = s.instanceIndex;
    j["partitionIndex"] = s.partitionIndex;
    j["accelerationStructure"] = s.accelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkPartitionedAccelerationStructureUpdateInstanceDataNV &s) {
    json j;
    j["instanceIndex"] = s.instanceIndex;
    j["instanceContributionToHitGroupIndex"] = s.instanceContributionToHitGroupIndex;
    j["accelerationStructure"] = s.accelerationStructure;
    return j.dump();
}

inline std::string ToJson(const VkPartitionedAccelerationStructureWritePartitionTranslationDataNV &s) {
    json j;
    j["partitionIndex"] = s.partitionIndex;
    j["partitionTranslation"] = s.partitionTranslation;
    return j.dump();
}

inline std::string ToJson(const VkWriteDescriptorSetPartitionedAccelerationStructureNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructureCount"] = s.accelerationStructureCount;
    j["pAccelerationStructures"] = s.pAccelerationStructures;
    return j.dump();
}

inline std::string ToJson(const VkPartitionedAccelerationStructureInstancesInputNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["instanceCount"] = s.instanceCount;
    j["maxInstancePerPartitionCount"] = s.maxInstancePerPartitionCount;
    j["partitionCount"] = s.partitionCount;
    j["maxInstanceInGlobalPartitionCount"] = s.maxInstanceInGlobalPartitionCount;
    return j.dump();
}

inline std::string ToJson(const VkBuildPartitionedAccelerationStructureInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["input"] = s.input;
    j["srcAccelerationStructureData"] = s.srcAccelerationStructureData;
    j["dstAccelerationStructureData"] = s.dstAccelerationStructureData;
    j["scratchData"] = s.scratchData;
    j["srcInfos"] = s.srcInfos;
    j["srcInfosCount"] = s.srcInfosCount;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDiagnosticsConfigFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["diagnosticsConfig"] = s.diagnosticsConfig;
    return j.dump();
}

inline std::string ToJson(const VkDeviceDiagnosticsConfigCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPipelineOfflineCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineIdentifier"] = s.pipelineIdentifier;
    j["matchControl"] = s.matchControl;
    j["poolEntrySize"] = s.poolEntrySize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderZeroInitializeWorkgroupMemory"] = s.shaderZeroInitializeWorkgroupMemory;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSubgroupUniformControlFlow"] = s.shaderSubgroupUniformControlFlow;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRobustness2FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["robustBufferAccess2"] = s.robustBufferAccess2;
    j["robustImageAccess2"] = s.robustImageAccess2;
    j["nullDescriptor"] = s.nullDescriptor;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRobustness2PropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["robustStorageBufferAccessSizeAlignment"] = s.robustStorageBufferAccessSizeAlignment;
    j["robustUniformBufferAccessSizeAlignment"] = s.robustUniformBufferAccessSizeAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageRobustnessFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["robustImageAccess"] = s.robustImageAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageRobustnessFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["workgroupMemoryExplicitLayout"] = s.workgroupMemoryExplicitLayout;
    j["workgroupMemoryExplicitLayoutScalarBlockLayout"] = s.workgroupMemoryExplicitLayoutScalarBlockLayout;
    j["workgroupMemoryExplicitLayout8BitAccess"] = s.workgroupMemoryExplicitLayout8BitAccess;
    j["workgroupMemoryExplicitLayout16BitAccess"] = s.workgroupMemoryExplicitLayout16BitAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePortabilitySubsetFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["constantAlphaColorBlendFactors"] = s.constantAlphaColorBlendFactors;
    j["events"] = s.events;
    j["imageViewFormatReinterpretation"] = s.imageViewFormatReinterpretation;
    j["imageViewFormatSwizzle"] = s.imageViewFormatSwizzle;
    j["imageView2DOn3DImage"] = s.imageView2DOn3DImage;
    j["multisampleArrayImage"] = s.multisampleArrayImage;
    j["mutableComparisonSamplers"] = s.mutableComparisonSamplers;
    j["pointPolygons"] = s.pointPolygons;
    j["samplerMipLodBias"] = s.samplerMipLodBias;
    j["separateStencilMaskRef"] = s.separateStencilMaskRef;
    j["shaderSampleRateInterpolationFunctions"] = s.shaderSampleRateInterpolationFunctions;
    j["tessellationIsolines"] = s.tessellationIsolines;
    j["tessellationPointMode"] = s.tessellationPointMode;
    j["triangleFans"] = s.triangleFans;
    j["vertexAttributeAccessBeyondStride"] = s.vertexAttributeAccessBeyondStride;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePortabilitySubsetPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minVertexInputBindingStrideAlignment"] = s.minVertexInputBindingStrideAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevice4444FormatsFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["formatA4R4G4B4"] = s.formatA4R4G4B4;
    j["formatA4B4G4R4"] = s.formatA4B4G4R4;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subpassShading"] = s.subpassShading;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["clustercullingShader"] = s.clustercullingShader;
    j["multiviewClusterCullingShader"] = s.multiviewClusterCullingShader;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["clusterShadingRate"] = s.clusterShadingRate;
    return j.dump();
}

inline std::string ToJson(const VkBufferCopy2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcOffset"] = s.srcOffset;
    j["dstOffset"] = s.dstOffset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkBufferCopy2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageCopy2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffset"] = s.srcOffset;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffset"] = s.dstOffset;
    j["extent"] = s.extent;
    return j.dump();
}

inline std::string ToJson(const VkImageCopy2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageBlit2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffsets"] = s.srcOffsets;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffsets"] = s.dstOffsets;
    return j.dump();
}

inline std::string ToJson(const VkImageBlit2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferImageCopy2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["bufferOffset"] = s.bufferOffset;
    j["bufferRowLength"] = s.bufferRowLength;
    j["bufferImageHeight"] = s.bufferImageHeight;
    j["imageSubresource"] = s.imageSubresource;
    j["imageOffset"] = s.imageOffset;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkBufferImageCopy2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageResolve2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSubresource"] = s.srcSubresource;
    j["srcOffset"] = s.srcOffset;
    j["dstSubresource"] = s.dstSubresource;
    j["dstOffset"] = s.dstOffset;
    j["extent"] = s.extent;
    return j.dump();
}

inline std::string ToJson(const VkImageResolve2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyBufferInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcBuffer"] = s.srcBuffer;
    j["dstBuffer"] = s.dstBuffer;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyBufferInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBlitImageInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    j["filter"] = s.filter;
    return j.dump();
}

inline std::string ToJson(const VkBlitImageInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyBufferToImageInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcBuffer"] = s.srcBuffer;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyBufferToImageInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToBufferInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["dstBuffer"] = s.dstBuffer;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToBufferInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkResolveImageInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkResolveImageInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderImageInt64Atomics"] = s.shaderImageInt64Atomics;
    j["sparseImageInt64Atomics"] = s.sparseImageInt64Atomics;
    return j.dump();
}

inline std::string ToJson(const VkFragmentShadingRateAttachmentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pFragmentShadingRateAttachment"] = s.pFragmentShadingRateAttachment;
    j["shadingRateAttachmentTexelSize"] = s.shadingRateAttachmentTexelSize;
    return j.dump();
}

inline std::string ToJson(const VkPipelineFragmentShadingRateStateCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentSize"] = s.fragmentSize;
    j["combinerOps"] = s.combinerOps;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShadingRateFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineFragmentShadingRate"] = s.pipelineFragmentShadingRate;
    j["primitiveFragmentShadingRate"] = s.primitiveFragmentShadingRate;
    j["attachmentFragmentShadingRate"] = s.attachmentFragmentShadingRate;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShadingRatePropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minFragmentShadingRateAttachmentTexelSize"] = s.minFragmentShadingRateAttachmentTexelSize;
    j["maxFragmentShadingRateAttachmentTexelSize"] = s.maxFragmentShadingRateAttachmentTexelSize;
    j["maxFragmentShadingRateAttachmentTexelSizeAspectRatio"] = s.maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
    j["primitiveFragmentShadingRateWithMultipleViewports"] = s.primitiveFragmentShadingRateWithMultipleViewports;
    j["layeredShadingRateAttachments"] = s.layeredShadingRateAttachments;
    j["fragmentShadingRateNonTrivialCombinerOps"] = s.fragmentShadingRateNonTrivialCombinerOps;
    j["maxFragmentSize"] = s.maxFragmentSize;
    j["maxFragmentSizeAspectRatio"] = s.maxFragmentSizeAspectRatio;
    j["maxFragmentShadingRateCoverageSamples"] = s.maxFragmentShadingRateCoverageSamples;
    j["maxFragmentShadingRateRasterizationSamples"] = s.maxFragmentShadingRateRasterizationSamples;
    j["fragmentShadingRateWithShaderDepthStencilWrites"] = s.fragmentShadingRateWithShaderDepthStencilWrites;
    j["fragmentShadingRateWithSampleMask"] = s.fragmentShadingRateWithSampleMask;
    j["fragmentShadingRateWithShaderSampleMask"] = s.fragmentShadingRateWithShaderSampleMask;
    j["fragmentShadingRateWithConservativeRasterization"] = s.fragmentShadingRateWithConservativeRasterization;
    j["fragmentShadingRateWithFragmentShaderInterlock"] = s.fragmentShadingRateWithFragmentShaderInterlock;
    j["fragmentShadingRateWithCustomSampleLocations"] = s.fragmentShadingRateWithCustomSampleLocations;
    j["fragmentShadingRateStrictMultiplyCombiner"] = s.fragmentShadingRateStrictMultiplyCombiner;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShadingRateKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampleCounts"] = s.sampleCounts;
    j["fragmentSize"] = s.fragmentSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderTerminateInvocationFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderTerminateInvocation"] = s.shaderTerminateInvocation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentShadingRateEnums"] = s.fragmentShadingRateEnums;
    j["supersampleFragmentShadingRates"] = s.supersampleFragmentShadingRates;
    j["noInvocationFragmentShadingRates"] = s.noInvocationFragmentShadingRates;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxFragmentShadingRateInvocationCount"] = s.maxFragmentShadingRateInvocationCount;
    return j.dump();
}

inline std::string ToJson(const VkPipelineFragmentShadingRateEnumStateCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shadingRateType"] = s.shadingRateType;
    j["shadingRate"] = s.shadingRate;
    j["combinerOps"] = s.combinerOps;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureBuildSizesInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructureSize"] = s.accelerationStructureSize;
    j["updateScratchSize"] = s.updateScratchSize;
    j["buildScratchSize"] = s.buildScratchSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image2DViewOf3D"] = s.image2DViewOf3D;
    j["sampler2DViewOf3D"] = s.sampler2DViewOf3D;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageSlicedViewOf3D"] = s.imageSlicedViewOf3D;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentFeedbackLoopDynamicState"] = s.attachmentFeedbackLoopDynamicState;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["legacyVertexAttributes"] = s.legacyVertexAttributes;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["nativeUnalignedPerformance"] = s.nativeUnalignedPerformance;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mutableDescriptorType"] = s.mutableDescriptorType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMutableDescriptorTypeListEXT &s) {
    json j;
    j["descriptorTypeCount"] = s.descriptorTypeCount;
    j["pDescriptorTypes"] = s.pDescriptorTypes;
    return j.dump();
}

inline std::string ToJson(const VkMutableDescriptorTypeListVALVE &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMutableDescriptorTypeCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mutableDescriptorTypeListCount"] = s.mutableDescriptorTypeListCount;
    j["pMutableDescriptorTypeLists"] = s.pMutableDescriptorTypeLists;
    return j.dump();
}

inline std::string ToJson(const VkMutableDescriptorTypeCreateInfoVALVE &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthClipControlFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthClipControl"] = s.depthClipControl;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceGeneratedCommands"] = s.deviceGeneratedCommands;
    j["dynamicGeneratedPipelineLayout"] = s.dynamicGeneratedPipelineLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxIndirectPipelineCount"] = s.maxIndirectPipelineCount;
    j["maxIndirectShaderObjectCount"] = s.maxIndirectShaderObjectCount;
    j["maxIndirectSequenceCount"] = s.maxIndirectSequenceCount;
    j["maxIndirectCommandsTokenCount"] = s.maxIndirectCommandsTokenCount;
    j["maxIndirectCommandsTokenOffset"] = s.maxIndirectCommandsTokenOffset;
    j["maxIndirectCommandsIndirectStride"] = s.maxIndirectCommandsIndirectStride;
    j["supportedIndirectCommandsInputModes"] = s.supportedIndirectCommandsInputModes;
    j["supportedIndirectCommandsShaderStages"] = s.supportedIndirectCommandsShaderStages;
    j["supportedIndirectCommandsShaderStagesPipelineBinding"] = s.supportedIndirectCommandsShaderStagesPipelineBinding;
    j["supportedIndirectCommandsShaderStagesShaderBinding"] = s.supportedIndirectCommandsShaderStagesShaderBinding;
    j["deviceGeneratedCommandsTransformFeedback"] = s.deviceGeneratedCommandsTransformFeedback;
    j["deviceGeneratedCommandsMultiDrawIndirectCount"] = s.deviceGeneratedCommandsMultiDrawIndirectCount;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsPipelineInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipeline"] = s.pipeline;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsShaderInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCount"] = s.shaderCount;
    j["pShaders"] = s.pShaders;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsMemoryRequirementsInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["indirectExecutionSet"] = s.indirectExecutionSet;
    j["indirectCommandsLayout"] = s.indirectCommandsLayout;
    j["maxSequenceCount"] = s.maxSequenceCount;
    j["maxDrawCount"] = s.maxDrawCount;
    return j.dump();
}

inline std::string ToJson(const VkIndirectExecutionSetPipelineInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["initialPipeline"] = s.initialPipeline;
    j["maxPipelineCount"] = s.maxPipelineCount;
    return j.dump();
}

inline std::string ToJson(const VkIndirectExecutionSetShaderLayoutInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["setLayoutCount"] = s.setLayoutCount;
    j["pSetLayouts"] = s.pSetLayouts;
    return j.dump();
}

inline std::string ToJson(const VkIndirectExecutionSetShaderInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCount"] = s.shaderCount;
    j["pInitialShaders"] = s.pInitialShaders;
    j["pSetLayoutInfos"] = s.pSetLayoutInfos;
    j["maxShaderCount"] = s.maxShaderCount;
    j["pushConstantRangeCount"] = s.pushConstantRangeCount;
    j["pPushConstantRanges"] = s.pPushConstantRanges;
    return j.dump();
}

inline std::string ToJson(const VkIndirectExecutionSetCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["info"] = s.info;
    return j.dump();
}

inline std::string ToJson(const VkGeneratedCommandsInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderStages"] = s.shaderStages;
    j["indirectExecutionSet"] = s.indirectExecutionSet;
    j["indirectCommandsLayout"] = s.indirectCommandsLayout;
    j["indirectAddress"] = s.indirectAddress;
    j["indirectAddressSize"] = s.indirectAddressSize;
    j["preprocessAddress"] = s.preprocessAddress;
    j["preprocessSize"] = s.preprocessSize;
    j["maxSequenceCount"] = s.maxSequenceCount;
    j["sequenceCountAddress"] = s.sequenceCountAddress;
    j["maxDrawCount"] = s.maxDrawCount;
    return j.dump();
}

inline std::string ToJson(const VkWriteIndirectExecutionSetPipelineEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["index"] = s.index;
    j["pipeline"] = s.pipeline;
    return j.dump();
}

inline std::string ToJson(const VkWriteIndirectExecutionSetShaderEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["index"] = s.index;
    j["shader"] = s.shader;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsLayoutCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["shaderStages"] = s.shaderStages;
    j["indirectStride"] = s.indirectStride;
    j["pipelineLayout"] = s.pipelineLayout;
    j["tokenCount"] = s.tokenCount;
    j["pTokens"] = s.pTokens;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsLayoutTokenEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["data"] = s.data;
    j["offset"] = s.offset;
    return j.dump();
}

inline std::string ToJson(const VkDrawIndirectCountIndirectCommandEXT &s) {
    json j;
    j["bufferAddress"] = s.bufferAddress;
    j["stride"] = s.stride;
    j["commandCount"] = s.commandCount;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsVertexBufferTokenEXT &s) {
    json j;
    j["vertexBindingUnit"] = s.vertexBindingUnit;
    return j.dump();
}

inline std::string ToJson(const VkBindVertexBufferIndirectCommandEXT &s) {
    json j;
    j["bufferAddress"] = s.bufferAddress;
    j["size"] = s.size;
    j["stride"] = s.stride;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsIndexBufferTokenEXT &s) {
    json j;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkBindIndexBufferIndirectCommandEXT &s) {
    json j;
    j["bufferAddress"] = s.bufferAddress;
    j["size"] = s.size;
    j["indexType"] = s.indexType;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsPushConstantTokenEXT &s) {
    json j;
    j["updateRange"] = s.updateRange;
    return j.dump();
}

inline std::string ToJson(const VkIndirectCommandsExecutionSetTokenEXT &s) {
    json j;
    j["type"] = s.type;
    j["shaderStages"] = s.shaderStages;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportDepthClipControlCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["negativeOneToOne"] = s.negativeOneToOne;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthClampControlFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthClampControl"] = s.depthClampControl;
    return j.dump();
}

inline std::string ToJson(const VkPipelineViewportDepthClampControlCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthClampMode"] = s.depthClampMode;
    j["pDepthClampRange"] = s.pDepthClampRange;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexInputDynamicState"] = s.vertexInputDynamicState;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalMemoryRDMA"] = s.externalMemoryRDMA;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderRelaxedExtendedInstruction"] = s.shaderRelaxedExtendedInstruction;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputBindingDescription2EXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["binding"] = s.binding;
    j["stride"] = s.stride;
    j["inputRate"] = s.inputRate;
    j["divisor"] = s.divisor;
    return j.dump();
}

inline std::string ToJson(const VkVertexInputAttributeDescription2EXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["location"] = s.location;
    j["binding"] = s.binding;
    j["format"] = s.format;
    j["offset"] = s.offset;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceColorWriteEnableFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorWriteEnable"] = s.colorWriteEnable;
    return j.dump();
}

inline std::string ToJson(const VkPipelineColorWriteCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentCount"] = s.attachmentCount;
    j["pColorWriteEnables"] = s.pColorWriteEnables;
    return j.dump();
}

inline std::string ToJson(const VkMemoryBarrier2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcStageMask"] = s.srcStageMask;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstStageMask"] = s.dstStageMask;
    j["dstAccessMask"] = s.dstAccessMask;
    return j.dump();
}

inline std::string ToJson(const VkMemoryBarrier2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageMemoryBarrier2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcStageMask"] = s.srcStageMask;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstStageMask"] = s.dstStageMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["oldLayout"] = s.oldLayout;
    j["newLayout"] = s.newLayout;
    j["srcQueueFamilyIndex"] = s.srcQueueFamilyIndex;
    j["dstQueueFamilyIndex"] = s.dstQueueFamilyIndex;
    j["image"] = s.image;
    j["subresourceRange"] = s.subresourceRange;
    return j.dump();
}

inline std::string ToJson(const VkImageMemoryBarrier2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBufferMemoryBarrier2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcStageMask"] = s.srcStageMask;
    j["srcAccessMask"] = s.srcAccessMask;
    j["dstStageMask"] = s.dstStageMask;
    j["dstAccessMask"] = s.dstAccessMask;
    j["srcQueueFamilyIndex"] = s.srcQueueFamilyIndex;
    j["dstQueueFamilyIndex"] = s.dstQueueFamilyIndex;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkBufferMemoryBarrier2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryBarrierAccessFlags3KHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcAccessMask3"] = s.srcAccessMask3;
    j["dstAccessMask3"] = s.dstAccessMask3;
    return j.dump();
}

inline std::string ToJson(const VkDependencyInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dependencyFlags"] = s.dependencyFlags;
    j["memoryBarrierCount"] = s.memoryBarrierCount;
    j["pMemoryBarriers"] = s.pMemoryBarriers;
    j["bufferMemoryBarrierCount"] = s.bufferMemoryBarrierCount;
    j["pBufferMemoryBarriers"] = s.pBufferMemoryBarriers;
    j["imageMemoryBarrierCount"] = s.imageMemoryBarrierCount;
    j["pImageMemoryBarriers"] = s.pImageMemoryBarriers;
    return j.dump();
}

inline std::string ToJson(const VkDependencyInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["value"] = s.value;
    j["stageMask"] = s.stageMask;
    j["deviceIndex"] = s.deviceIndex;
    return j.dump();
}

inline std::string ToJson(const VkSemaphoreSubmitInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferSubmitInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["commandBuffer"] = s.commandBuffer;
    j["deviceMask"] = s.deviceMask;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferSubmitInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubmitInfo2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["waitSemaphoreInfoCount"] = s.waitSemaphoreInfoCount;
    j["pWaitSemaphoreInfos"] = s.pWaitSemaphoreInfos;
    j["commandBufferInfoCount"] = s.commandBufferInfoCount;
    j["pCommandBufferInfos"] = s.pCommandBufferInfos;
    j["signalSemaphoreInfoCount"] = s.signalSemaphoreInfoCount;
    j["pSignalSemaphoreInfos"] = s.pSignalSemaphoreInfos;
    return j.dump();
}

inline std::string ToJson(const VkSubmitInfo2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyCheckpointProperties2NV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["checkpointExecutionStageMask"] = s.checkpointExecutionStageMask;
    return j.dump();
}

inline std::string ToJson(const VkCheckpointData2NV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stage"] = s.stage;
    j["pCheckpointMarker"] = s.pCheckpointMarker;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSynchronization2Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["synchronization2"] = s.synchronization2;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSynchronization2FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostImageCopyFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hostImageCopy"] = s.hostImageCopy;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostImageCopyFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostImageCopyProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["copySrcLayoutCount"] = s.copySrcLayoutCount;
    j["pCopySrcLayouts"] = s.pCopySrcLayouts;
    j["copyDstLayoutCount"] = s.copyDstLayoutCount;
    j["pCopyDstLayouts"] = s.pCopyDstLayouts;
    j["optimalTilingLayoutUUID"] = s.optimalTilingLayoutUUID;
    j["identicalMemoryTypeRequirements"] = s.identicalMemoryTypeRequirements;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHostImageCopyPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryToImageCopy &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pHostPointer"] = s.pHostPointer;
    j["memoryRowLength"] = s.memoryRowLength;
    j["memoryImageHeight"] = s.memoryImageHeight;
    j["imageSubresource"] = s.imageSubresource;
    j["imageOffset"] = s.imageOffset;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkMemoryToImageCopyEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageToMemoryCopy &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pHostPointer"] = s.pHostPointer;
    j["memoryRowLength"] = s.memoryRowLength;
    j["memoryImageHeight"] = s.memoryImageHeight;
    j["imageSubresource"] = s.imageSubresource;
    j["imageOffset"] = s.imageOffset;
    j["imageExtent"] = s.imageExtent;
    return j.dump();
}

inline std::string ToJson(const VkImageToMemoryCopyEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryToImageInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryToImageInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToMemoryInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToMemoryInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToImageInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["srcImage"] = s.srcImage;
    j["srcImageLayout"] = s.srcImageLayout;
    j["dstImage"] = s.dstImage;
    j["dstImageLayout"] = s.dstImageLayout;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkCopyImageToImageInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkHostImageLayoutTransitionInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["oldLayout"] = s.oldLayout;
    j["newLayout"] = s.newLayout;
    j["subresourceRange"] = s.subresourceRange;
    return j.dump();
}

inline std::string ToJson(const VkHostImageLayoutTransitionInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceHostMemcpySize &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceHostMemcpySizeEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkHostImageCopyDevicePerformanceQuery &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["optimalDeviceAccess"] = s.optimalDeviceAccess;
    j["identicalMemoryLayout"] = s.identicalMemoryLayout;
    return j.dump();
}

inline std::string ToJson(const VkHostImageCopyDevicePerformanceQueryEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkanSC10Properties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceNoDynamicHostAllocations"] = s.deviceNoDynamicHostAllocations;
    j["deviceDestroyFreesMemory"] = s.deviceDestroyFreesMemory;
    j["commandPoolMultipleCommandBuffersRecording"] = s.commandPoolMultipleCommandBuffersRecording;
    j["commandPoolResetCommandBuffer"] = s.commandPoolResetCommandBuffer;
    j["commandBufferSimultaneousUse"] = s.commandBufferSimultaneousUse;
    j["secondaryCommandBufferNullOrImagelessFramebuffer"] = s.secondaryCommandBufferNullOrImagelessFramebuffer;
    j["recycleDescriptorSetMemory"] = s.recycleDescriptorSetMemory;
    j["recyclePipelineMemory"] = s.recyclePipelineMemory;
    j["maxRenderPassSubpasses"] = s.maxRenderPassSubpasses;
    j["maxRenderPassDependencies"] = s.maxRenderPassDependencies;
    j["maxSubpassInputAttachments"] = s.maxSubpassInputAttachments;
    j["maxSubpassPreserveAttachments"] = s.maxSubpassPreserveAttachments;
    j["maxFramebufferAttachments"] = s.maxFramebufferAttachments;
    j["maxDescriptorSetLayoutBindings"] = s.maxDescriptorSetLayoutBindings;
    j["maxQueryFaultCount"] = s.maxQueryFaultCount;
    j["maxCallbackFaultCount"] = s.maxCallbackFaultCount;
    j["maxCommandPoolCommandBuffers"] = s.maxCommandPoolCommandBuffers;
    j["maxCommandBufferSize"] = s.maxCommandBufferSize;
    return j.dump();
}

inline std::string ToJson(const VkPipelinePoolSize &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["poolEntrySize"] = s.poolEntrySize;
    j["poolEntryCount"] = s.poolEntryCount;
    return j.dump();
}

inline std::string ToJson(const VkDeviceObjectReservationCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineCacheCreateInfoCount"] = s.pipelineCacheCreateInfoCount;
    j["pPipelineCacheCreateInfos"] = s.pPipelineCacheCreateInfos;
    j["pipelinePoolSizeCount"] = s.pipelinePoolSizeCount;
    j["pPipelinePoolSizes"] = s.pPipelinePoolSizes;
    j["semaphoreRequestCount"] = s.semaphoreRequestCount;
    j["commandBufferRequestCount"] = s.commandBufferRequestCount;
    j["fenceRequestCount"] = s.fenceRequestCount;
    j["deviceMemoryRequestCount"] = s.deviceMemoryRequestCount;
    j["bufferRequestCount"] = s.bufferRequestCount;
    j["imageRequestCount"] = s.imageRequestCount;
    j["eventRequestCount"] = s.eventRequestCount;
    j["queryPoolRequestCount"] = s.queryPoolRequestCount;
    j["bufferViewRequestCount"] = s.bufferViewRequestCount;
    j["imageViewRequestCount"] = s.imageViewRequestCount;
    j["layeredImageViewRequestCount"] = s.layeredImageViewRequestCount;
    j["pipelineCacheRequestCount"] = s.pipelineCacheRequestCount;
    j["pipelineLayoutRequestCount"] = s.pipelineLayoutRequestCount;
    j["renderPassRequestCount"] = s.renderPassRequestCount;
    j["graphicsPipelineRequestCount"] = s.graphicsPipelineRequestCount;
    j["computePipelineRequestCount"] = s.computePipelineRequestCount;
    j["descriptorSetLayoutRequestCount"] = s.descriptorSetLayoutRequestCount;
    j["samplerRequestCount"] = s.samplerRequestCount;
    j["descriptorPoolRequestCount"] = s.descriptorPoolRequestCount;
    j["descriptorSetRequestCount"] = s.descriptorSetRequestCount;
    j["framebufferRequestCount"] = s.framebufferRequestCount;
    j["commandPoolRequestCount"] = s.commandPoolRequestCount;
    j["samplerYcbcrConversionRequestCount"] = s.samplerYcbcrConversionRequestCount;
    j["surfaceRequestCount"] = s.surfaceRequestCount;
    j["swapchainRequestCount"] = s.swapchainRequestCount;
    j["displayModeRequestCount"] = s.displayModeRequestCount;
    j["subpassDescriptionRequestCount"] = s.subpassDescriptionRequestCount;
    j["attachmentDescriptionRequestCount"] = s.attachmentDescriptionRequestCount;
    j["descriptorSetLayoutBindingRequestCount"] = s.descriptorSetLayoutBindingRequestCount;
    j["descriptorSetLayoutBindingLimit"] = s.descriptorSetLayoutBindingLimit;
    j["maxImageViewMipLevels"] = s.maxImageViewMipLevels;
    j["maxImageViewArrayLayers"] = s.maxImageViewArrayLayers;
    j["maxLayeredImageViewMipLevels"] = s.maxLayeredImageViewMipLevels;
    j["maxOcclusionQueriesPerPool"] = s.maxOcclusionQueriesPerPool;
    j["maxPipelineStatisticsQueriesPerPool"] = s.maxPipelineStatisticsQueriesPerPool;
    j["maxTimestampQueriesPerPool"] = s.maxTimestampQueriesPerPool;
    j["maxImmutableSamplersPerDescriptorSetLayout"] = s.maxImmutableSamplersPerDescriptorSetLayout;
    return j.dump();
}

inline std::string ToJson(const VkCommandPoolMemoryReservationCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["commandPoolReservedSize"] = s.commandPoolReservedSize;
    j["commandPoolMaxCommandBuffers"] = s.commandPoolMaxCommandBuffers;
    return j.dump();
}

inline std::string ToJson(const VkCommandPoolMemoryConsumption &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["commandPoolAllocated"] = s.commandPoolAllocated;
    j["commandPoolReservedSize"] = s.commandPoolReservedSize;
    j["commandBufferAllocated"] = s.commandBufferAllocated;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVulkanSC10Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderAtomicInstructions"] = s.shaderAtomicInstructions;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["primitivesGeneratedQuery"] = s.primitivesGeneratedQuery;
    j["primitivesGeneratedQueryWithRasterizerDiscard"] = s.primitivesGeneratedQueryWithRasterizerDiscard;
    j["primitivesGeneratedQueryWithNonZeroStreams"] = s.primitivesGeneratedQueryWithNonZeroStreams;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLegacyDitheringFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["legacyDithering"] = s.legacyDithering;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multisampledRenderToSingleSampled"] = s.multisampledRenderToSingleSampled;
    return j.dump();
}

inline std::string ToJson(const VkSubpassResolvePerformanceQueryEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["optimal"] = s.optimal;
    return j.dump();
}

inline std::string ToJson(const VkMultisampledRenderToSingleSampledInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multisampledRenderToSingleSampledEnable"] = s.multisampledRenderToSingleSampledEnable;
    j["rasterizationSamples"] = s.rasterizationSamples;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineProtectedAccessFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineProtectedAccess"] = s.pipelineProtectedAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyVideoPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoCodecOperations"] = s.videoCodecOperations;
    return j.dump();
}

inline std::string ToJson(const VkQueueFamilyQueryResultStatusPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queryResultStatusSupport"] = s.queryResultStatusSupport;
    return j.dump();
}

inline std::string ToJson(const VkVideoProfileListInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["profileCount"] = s.profileCount;
    j["pProfiles"] = s.pProfiles;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoFormatInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageUsage"] = s.imageUsage;
    return j.dump();
}

inline std::string ToJson(const VkVideoFormatPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["componentMapping"] = s.componentMapping;
    j["imageCreateFlags"] = s.imageCreateFlags;
    j["imageType"] = s.imageType;
    j["imageTiling"] = s.imageTiling;
    j["imageUsageFlags"] = s.imageUsageFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeQuantizationMapCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxQuantizationMapExtent"] = s.maxQuantizationMapExtent;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264QuantizationMapCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minQpDelta"] = s.minQpDelta;
    j["maxQpDelta"] = s.maxQpDelta;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265QuantizationMapCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minQpDelta"] = s.minQpDelta;
    j["maxQpDelta"] = s.maxQpDelta;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1QuantizationMapCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minQIndexDelta"] = s.minQIndexDelta;
    j["maxQIndexDelta"] = s.maxQIndexDelta;
    return j.dump();
}

inline std::string ToJson(const VkVideoFormatQuantizationMapPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["quantizationMapTexelSize"] = s.quantizationMapTexelSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoFormatH265QuantizationMapPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["compatibleCtbSizes"] = s.compatibleCtbSizes;
    return j.dump();
}

inline std::string ToJson(const VkVideoFormatAV1QuantizationMapPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["compatibleSuperblockSizes"] = s.compatibleSuperblockSizes;
    return j.dump();
}

inline std::string ToJson(const VkVideoProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoCodecOperation"] = s.videoCodecOperation;
    j["chromaSubsampling"] = s.chromaSubsampling;
    j["lumaBitDepth"] = s.lumaBitDepth;
    j["chromaBitDepth"] = s.chromaBitDepth;
    return j.dump();
}

inline std::string ToJson(const VkVideoCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["minBitstreamBufferOffsetAlignment"] = s.minBitstreamBufferOffsetAlignment;
    j["minBitstreamBufferSizeAlignment"] = s.minBitstreamBufferSizeAlignment;
    j["pictureAccessGranularity"] = s.pictureAccessGranularity;
    j["minCodedExtent"] = s.minCodedExtent;
    j["maxCodedExtent"] = s.maxCodedExtent;
    j["maxDpbSlots"] = s.maxDpbSlots;
    j["maxActiveReferencePictures"] = s.maxActiveReferencePictures;
    j["stdHeaderVersion"] = s.stdHeaderVersion;
    return j.dump();
}

inline std::string ToJson(const VkVideoSessionMemoryRequirementsKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryBindIndex"] = s.memoryBindIndex;
    j["memoryRequirements"] = s.memoryRequirements;
    return j.dump();
}

inline std::string ToJson(const VkBindVideoSessionMemoryInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryBindIndex"] = s.memoryBindIndex;
    j["memory"] = s.memory;
    j["memoryOffset"] = s.memoryOffset;
    j["memorySize"] = s.memorySize;
    return j.dump();
}

inline std::string ToJson(const VkVideoPictureResourceInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["codedOffset"] = s.codedOffset;
    j["codedExtent"] = s.codedExtent;
    j["baseArrayLayer"] = s.baseArrayLayer;
    j["imageViewBinding"] = s.imageViewBinding;
    return j.dump();
}

inline std::string ToJson(const VkVideoReferenceSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["slotIndex"] = s.slotIndex;
    j["pPictureResource"] = s.pPictureResource;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeUsageInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoUsageHints"] = s.videoUsageHints;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["srcBuffer"] = s.srcBuffer;
    j["srcBufferOffset"] = s.srcBufferOffset;
    j["srcBufferRange"] = s.srcBufferRange;
    j["dstPictureResource"] = s.dstPictureResource;
    j["pSetupReferenceSlot"] = s.pSetupReferenceSlot;
    j["referenceSlotCount"] = s.referenceSlotCount;
    j["pReferenceSlots"] = s.pReferenceSlots;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoMaintenance1FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoMaintenance1"] = s.videoMaintenance1;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoMaintenance2FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoMaintenance2"] = s.videoMaintenance2;
    return j.dump();
}

inline std::string ToJson(const VkVideoInlineQueryInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queryPool"] = s.queryPool;
    j["firstQuery"] = s.firstQuery;
    j["queryCount"] = s.queryCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfileIdc"] = s.stdProfileIdc;
    j["pictureLayout"] = s.pictureLayout;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxLevelIdc"] = s.maxLevelIdc;
    j["fieldOffsetGranularity"] = s.fieldOffsetGranularity;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264SessionParametersAddInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdSPSCount"] = s.stdSPSCount;
    j["pStdSPSs"] = s.pStdSPSs;
    j["stdPPSCount"] = s.stdPPSCount;
    j["pStdPPSs"] = s.pStdPPSs;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxStdSPSCount"] = s.maxStdSPSCount;
    j["maxStdPPSCount"] = s.maxStdPPSCount;
    j["pParametersAddInfo"] = s.pParametersAddInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264InlineSessionParametersInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdSPS"] = s.pStdSPS;
    j["pStdPPS"] = s.pStdPPS;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    j["sliceCount"] = s.sliceCount;
    j["pSliceOffsets"] = s.pSliceOffsets;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH264DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfileIdc"] = s.stdProfileIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxLevelIdc"] = s.maxLevelIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265SessionParametersAddInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdVPSCount"] = s.stdVPSCount;
    j["pStdVPSs"] = s.pStdVPSs;
    j["stdSPSCount"] = s.stdSPSCount;
    j["pStdSPSs"] = s.pStdSPSs;
    j["stdPPSCount"] = s.stdPPSCount;
    j["pStdPPSs"] = s.pStdPPSs;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxStdVPSCount"] = s.maxStdVPSCount;
    j["maxStdSPSCount"] = s.maxStdSPSCount;
    j["maxStdPPSCount"] = s.maxStdPPSCount;
    j["pParametersAddInfo"] = s.pParametersAddInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265InlineSessionParametersInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdVPS"] = s.pStdVPS;
    j["pStdSPS"] = s.pStdSPS;
    j["pStdPPS"] = s.pStdPPS;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    j["sliceSegmentCount"] = s.sliceSegmentCount;
    j["pSliceSegmentOffsets"] = s.pSliceSegmentOffsets;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeH265DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfile"] = s.stdProfile;
    j["filmGrainSupport"] = s.filmGrainSupport;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxLevel"] = s.maxLevel;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdSequenceHeader"] = s.pStdSequenceHeader;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1InlineSessionParametersInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdSequenceHeader"] = s.pStdSequenceHeader;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    j["referenceNameSlotIndices"] = s.referenceNameSlotIndices;
    j["frameHeaderOffset"] = s.frameHeaderOffset;
    j["tileCount"] = s.tileCount;
    j["pTileOffsets"] = s.pTileOffsets;
    j["pTileSizes"] = s.pTileSizes;
    return j.dump();
}

inline std::string ToJson(const VkVideoDecodeAV1DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoSessionCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queueFamilyIndex"] = s.queueFamilyIndex;
    j["flags"] = s.flags;
    j["pVideoProfile"] = s.pVideoProfile;
    j["pictureFormat"] = s.pictureFormat;
    j["maxCodedExtent"] = s.maxCodedExtent;
    j["referencePictureFormat"] = s.referencePictureFormat;
    j["maxDpbSlots"] = s.maxDpbSlots;
    j["maxActiveReferencePictures"] = s.maxActiveReferencePictures;
    j["pStdHeaderVersion"] = s.pStdHeaderVersion;
    return j.dump();
}

inline std::string ToJson(const VkVideoSessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["videoSessionParametersTemplate"] = s.videoSessionParametersTemplate;
    j["videoSession"] = s.videoSession;
    return j.dump();
}

inline std::string ToJson(const VkVideoSessionParametersUpdateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["updateSequenceCount"] = s.updateSequenceCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeSessionParametersGetInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoSessionParameters"] = s.videoSessionParameters;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeSessionParametersFeedbackInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hasOverrides"] = s.hasOverrides;
    return j.dump();
}

inline std::string ToJson(const VkVideoBeginCodingInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["videoSession"] = s.videoSession;
    j["videoSessionParameters"] = s.videoSessionParameters;
    j["referenceSlotCount"] = s.referenceSlotCount;
    j["pReferenceSlots"] = s.pReferenceSlots;
    return j.dump();
}

inline std::string ToJson(const VkVideoEndCodingInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkVideoCodingControlInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeUsageInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoUsageHints"] = s.videoUsageHints;
    j["videoContentHints"] = s.videoContentHints;
    j["tuningMode"] = s.tuningMode;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["dstBuffer"] = s.dstBuffer;
    j["dstBufferOffset"] = s.dstBufferOffset;
    j["dstBufferRange"] = s.dstBufferRange;
    j["srcPictureResource"] = s.srcPictureResource;
    j["pSetupReferenceSlot"] = s.pSetupReferenceSlot;
    j["referenceSlotCount"] = s.referenceSlotCount;
    j["pReferenceSlots"] = s.pReferenceSlots;
    j["precedingExternallyEncodedBytes"] = s.precedingExternallyEncodedBytes;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeQuantizationMapInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["quantizationMap"] = s.quantizationMap;
    j["quantizationMapExtent"] = s.quantizationMapExtent;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["quantizationMapTexelSize"] = s.quantizationMapTexelSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoEncodeQuantizationMap"] = s.videoEncodeQuantizationMap;
    return j.dump();
}

inline std::string ToJson(const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["encodeFeedbackFlags"] = s.encodeFeedbackFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeQualityLevelInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["qualityLevel"] = s.qualityLevel;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pVideoProfile"] = s.pVideoProfile;
    j["qualityLevel"] = s.qualityLevel;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeQualityLevelPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["preferredRateControlMode"] = s.preferredRateControlMode;
    j["preferredRateControlLayerCount"] = s.preferredRateControlLayerCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeRateControlInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["rateControlMode"] = s.rateControlMode;
    j["layerCount"] = s.layerCount;
    j["pLayers"] = s.pLayers;
    j["virtualBufferSizeInMs"] = s.virtualBufferSizeInMs;
    j["initialVirtualBufferSizeInMs"] = s.initialVirtualBufferSizeInMs;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeRateControlLayerInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["averageBitrate"] = s.averageBitrate;
    j["maxBitrate"] = s.maxBitrate;
    j["frameRateNumerator"] = s.frameRateNumerator;
    j["frameRateDenominator"] = s.frameRateDenominator;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeCapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["rateControlModes"] = s.rateControlModes;
    j["maxRateControlLayers"] = s.maxRateControlLayers;
    j["maxBitrate"] = s.maxBitrate;
    j["maxQualityLevels"] = s.maxQualityLevels;
    j["encodeInputPictureGranularity"] = s.encodeInputPictureGranularity;
    j["supportedEncodeFeedbackFlags"] = s.supportedEncodeFeedbackFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["maxLevelIdc"] = s.maxLevelIdc;
    j["maxSliceCount"] = s.maxSliceCount;
    j["maxPPictureL0ReferenceCount"] = s.maxPPictureL0ReferenceCount;
    j["maxBPictureL0ReferenceCount"] = s.maxBPictureL0ReferenceCount;
    j["maxL1ReferenceCount"] = s.maxL1ReferenceCount;
    j["maxTemporalLayerCount"] = s.maxTemporalLayerCount;
    j["expectDyadicTemporalLayerPattern"] = s.expectDyadicTemporalLayerPattern;
    j["minQp"] = s.minQp;
    j["maxQp"] = s.maxQp;
    j["prefersGopRemainingFrames"] = s.prefersGopRemainingFrames;
    j["requiresGopRemainingFrames"] = s.requiresGopRemainingFrames;
    j["stdSyntaxFlags"] = s.stdSyntaxFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264QualityLevelPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["preferredRateControlFlags"] = s.preferredRateControlFlags;
    j["preferredGopFrameCount"] = s.preferredGopFrameCount;
    j["preferredIdrPeriod"] = s.preferredIdrPeriod;
    j["preferredConsecutiveBFrameCount"] = s.preferredConsecutiveBFrameCount;
    j["preferredTemporalLayerCount"] = s.preferredTemporalLayerCount;
    j["preferredConstantQp"] = s.preferredConstantQp;
    j["preferredMaxL0ReferenceCount"] = s.preferredMaxL0ReferenceCount;
    j["preferredMaxL1ReferenceCount"] = s.preferredMaxL1ReferenceCount;
    j["preferredStdEntropyCodingModeFlag"] = s.preferredStdEntropyCodingModeFlag;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264SessionCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMaxLevelIdc"] = s.useMaxLevelIdc;
    j["maxLevelIdc"] = s.maxLevelIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264SessionParametersAddInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdSPSCount"] = s.stdSPSCount;
    j["pStdSPSs"] = s.pStdSPSs;
    j["stdPPSCount"] = s.stdPPSCount;
    j["pStdPPSs"] = s.pStdPPSs;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxStdSPSCount"] = s.maxStdSPSCount;
    j["maxStdPPSCount"] = s.maxStdPPSCount;
    j["pParametersAddInfo"] = s.pParametersAddInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264SessionParametersGetInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["writeStdSPS"] = s.writeStdSPS;
    j["writeStdPPS"] = s.writeStdPPS;
    j["stdSPSId"] = s.stdSPSId;
    j["stdPPSId"] = s.stdPPSId;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264SessionParametersFeedbackInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hasStdSPSOverrides"] = s.hasStdSPSOverrides;
    j["hasStdPPSOverrides"] = s.hasStdPPSOverrides;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["naluSliceEntryCount"] = s.naluSliceEntryCount;
    j["pNaluSliceEntries"] = s.pNaluSliceEntries;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    j["generatePrefixNalu"] = s.generatePrefixNalu;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfileIdc"] = s.stdProfileIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264NaluSliceInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["constantQp"] = s.constantQp;
    j["pStdSliceHeader"] = s.pStdSliceHeader;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264RateControlInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["gopFrameCount"] = s.gopFrameCount;
    j["idrPeriod"] = s.idrPeriod;
    j["consecutiveBFrameCount"] = s.consecutiveBFrameCount;
    j["temporalLayerCount"] = s.temporalLayerCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264QpKHR &s) {
    json j;
    j["qpI"] = s.qpI;
    j["qpP"] = s.qpP;
    j["qpB"] = s.qpB;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264FrameSizeKHR &s) {
    json j;
    j["frameISize"] = s.frameISize;
    j["framePSize"] = s.framePSize;
    j["frameBSize"] = s.frameBSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264GopRemainingFrameInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useGopRemainingFrames"] = s.useGopRemainingFrames;
    j["gopRemainingI"] = s.gopRemainingI;
    j["gopRemainingP"] = s.gopRemainingP;
    j["gopRemainingB"] = s.gopRemainingB;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH264RateControlLayerInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMinQp"] = s.useMinQp;
    j["minQp"] = s.minQp;
    j["useMaxQp"] = s.useMaxQp;
    j["maxQp"] = s.maxQp;
    j["useMaxFrameSize"] = s.useMaxFrameSize;
    j["maxFrameSize"] = s.maxFrameSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["maxLevelIdc"] = s.maxLevelIdc;
    j["maxSliceSegmentCount"] = s.maxSliceSegmentCount;
    j["maxTiles"] = s.maxTiles;
    j["ctbSizes"] = s.ctbSizes;
    j["transformBlockSizes"] = s.transformBlockSizes;
    j["maxPPictureL0ReferenceCount"] = s.maxPPictureL0ReferenceCount;
    j["maxBPictureL0ReferenceCount"] = s.maxBPictureL0ReferenceCount;
    j["maxL1ReferenceCount"] = s.maxL1ReferenceCount;
    j["maxSubLayerCount"] = s.maxSubLayerCount;
    j["expectDyadicTemporalSubLayerPattern"] = s.expectDyadicTemporalSubLayerPattern;
    j["minQp"] = s.minQp;
    j["maxQp"] = s.maxQp;
    j["prefersGopRemainingFrames"] = s.prefersGopRemainingFrames;
    j["requiresGopRemainingFrames"] = s.requiresGopRemainingFrames;
    j["stdSyntaxFlags"] = s.stdSyntaxFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265QualityLevelPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["preferredRateControlFlags"] = s.preferredRateControlFlags;
    j["preferredGopFrameCount"] = s.preferredGopFrameCount;
    j["preferredIdrPeriod"] = s.preferredIdrPeriod;
    j["preferredConsecutiveBFrameCount"] = s.preferredConsecutiveBFrameCount;
    j["preferredSubLayerCount"] = s.preferredSubLayerCount;
    j["preferredConstantQp"] = s.preferredConstantQp;
    j["preferredMaxL0ReferenceCount"] = s.preferredMaxL0ReferenceCount;
    j["preferredMaxL1ReferenceCount"] = s.preferredMaxL1ReferenceCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265SessionCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMaxLevelIdc"] = s.useMaxLevelIdc;
    j["maxLevelIdc"] = s.maxLevelIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265SessionParametersAddInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdVPSCount"] = s.stdVPSCount;
    j["pStdVPSs"] = s.pStdVPSs;
    j["stdSPSCount"] = s.stdSPSCount;
    j["pStdSPSs"] = s.pStdSPSs;
    j["stdPPSCount"] = s.stdPPSCount;
    j["pStdPPSs"] = s.pStdPPSs;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxStdVPSCount"] = s.maxStdVPSCount;
    j["maxStdSPSCount"] = s.maxStdSPSCount;
    j["maxStdPPSCount"] = s.maxStdPPSCount;
    j["pParametersAddInfo"] = s.pParametersAddInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265SessionParametersGetInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["writeStdVPS"] = s.writeStdVPS;
    j["writeStdSPS"] = s.writeStdSPS;
    j["writeStdPPS"] = s.writeStdPPS;
    j["stdVPSId"] = s.stdVPSId;
    j["stdSPSId"] = s.stdSPSId;
    j["stdPPSId"] = s.stdPPSId;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265SessionParametersFeedbackInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hasStdVPSOverrides"] = s.hasStdVPSOverrides;
    j["hasStdSPSOverrides"] = s.hasStdSPSOverrides;
    j["hasStdPPSOverrides"] = s.hasStdPPSOverrides;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["naluSliceSegmentEntryCount"] = s.naluSliceSegmentEntryCount;
    j["pNaluSliceSegmentEntries"] = s.pNaluSliceSegmentEntries;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265NaluSliceSegmentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["constantQp"] = s.constantQp;
    j["pStdSliceSegmentHeader"] = s.pStdSliceSegmentHeader;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265RateControlInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["gopFrameCount"] = s.gopFrameCount;
    j["idrPeriod"] = s.idrPeriod;
    j["consecutiveBFrameCount"] = s.consecutiveBFrameCount;
    j["subLayerCount"] = s.subLayerCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265QpKHR &s) {
    json j;
    j["qpI"] = s.qpI;
    j["qpP"] = s.qpP;
    j["qpB"] = s.qpB;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265FrameSizeKHR &s) {
    json j;
    j["frameISize"] = s.frameISize;
    j["framePSize"] = s.framePSize;
    j["frameBSize"] = s.frameBSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265GopRemainingFrameInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useGopRemainingFrames"] = s.useGopRemainingFrames;
    j["gopRemainingI"] = s.gopRemainingI;
    j["gopRemainingP"] = s.gopRemainingP;
    j["gopRemainingB"] = s.gopRemainingB;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265RateControlLayerInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMinQp"] = s.useMinQp;
    j["minQp"] = s.minQp;
    j["useMaxQp"] = s.useMaxQp;
    j["maxQp"] = s.maxQp;
    j["useMaxFrameSize"] = s.useMaxFrameSize;
    j["maxFrameSize"] = s.maxFrameSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfileIdc"] = s.stdProfileIdc;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeH265DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1CapabilitiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["maxLevel"] = s.maxLevel;
    j["codedPictureAlignment"] = s.codedPictureAlignment;
    j["maxTiles"] = s.maxTiles;
    j["minTileSize"] = s.minTileSize;
    j["maxTileSize"] = s.maxTileSize;
    j["superblockSizes"] = s.superblockSizes;
    j["maxSingleReferenceCount"] = s.maxSingleReferenceCount;
    j["singleReferenceNameMask"] = s.singleReferenceNameMask;
    j["maxUnidirectionalCompoundReferenceCount"] = s.maxUnidirectionalCompoundReferenceCount;
    j["maxUnidirectionalCompoundGroup1ReferenceCount"] = s.maxUnidirectionalCompoundGroup1ReferenceCount;
    j["unidirectionalCompoundReferenceNameMask"] = s.unidirectionalCompoundReferenceNameMask;
    j["maxBidirectionalCompoundReferenceCount"] = s.maxBidirectionalCompoundReferenceCount;
    j["maxBidirectionalCompoundGroup1ReferenceCount"] = s.maxBidirectionalCompoundGroup1ReferenceCount;
    j["maxBidirectionalCompoundGroup2ReferenceCount"] = s.maxBidirectionalCompoundGroup2ReferenceCount;
    j["bidirectionalCompoundReferenceNameMask"] = s.bidirectionalCompoundReferenceNameMask;
    j["maxTemporalLayerCount"] = s.maxTemporalLayerCount;
    j["maxSpatialLayerCount"] = s.maxSpatialLayerCount;
    j["maxOperatingPoints"] = s.maxOperatingPoints;
    j["minQIndex"] = s.minQIndex;
    j["maxQIndex"] = s.maxQIndex;
    j["prefersGopRemainingFrames"] = s.prefersGopRemainingFrames;
    j["requiresGopRemainingFrames"] = s.requiresGopRemainingFrames;
    j["stdSyntaxFlags"] = s.stdSyntaxFlags;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1QualityLevelPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["preferredRateControlFlags"] = s.preferredRateControlFlags;
    j["preferredGopFrameCount"] = s.preferredGopFrameCount;
    j["preferredKeyFramePeriod"] = s.preferredKeyFramePeriod;
    j["preferredConsecutiveBipredictiveFrameCount"] = s.preferredConsecutiveBipredictiveFrameCount;
    j["preferredTemporalLayerCount"] = s.preferredTemporalLayerCount;
    j["preferredConstantQIndex"] = s.preferredConstantQIndex;
    j["preferredMaxSingleReferenceCount"] = s.preferredMaxSingleReferenceCount;
    j["preferredSingleReferenceNameMask"] = s.preferredSingleReferenceNameMask;
    j["preferredMaxUnidirectionalCompoundReferenceCount"] = s.preferredMaxUnidirectionalCompoundReferenceCount;
    j["preferredMaxUnidirectionalCompoundGroup1ReferenceCount"] = s.preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
    j["preferredUnidirectionalCompoundReferenceNameMask"] = s.preferredUnidirectionalCompoundReferenceNameMask;
    j["preferredMaxBidirectionalCompoundReferenceCount"] = s.preferredMaxBidirectionalCompoundReferenceCount;
    j["preferredMaxBidirectionalCompoundGroup1ReferenceCount"] = s.preferredMaxBidirectionalCompoundGroup1ReferenceCount;
    j["preferredMaxBidirectionalCompoundGroup2ReferenceCount"] = s.preferredMaxBidirectionalCompoundGroup2ReferenceCount;
    j["preferredBidirectionalCompoundReferenceNameMask"] = s.preferredBidirectionalCompoundReferenceNameMask;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVideoEncodeAV1FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["videoEncodeAV1"] = s.videoEncodeAV1;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1SessionCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMaxLevel"] = s.useMaxLevel;
    j["maxLevel"] = s.maxLevel;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1SessionParametersCreateInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdSequenceHeader"] = s.pStdSequenceHeader;
    j["pStdDecoderModelInfo"] = s.pStdDecoderModelInfo;
    j["stdOperatingPointCount"] = s.stdOperatingPointCount;
    j["pStdOperatingPoints"] = s.pStdOperatingPoints;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1DpbSlotInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pStdReferenceInfo"] = s.pStdReferenceInfo;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1PictureInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["predictionMode"] = s.predictionMode;
    j["rateControlGroup"] = s.rateControlGroup;
    j["constantQIndex"] = s.constantQIndex;
    j["pStdPictureInfo"] = s.pStdPictureInfo;
    j["referenceNameSlotIndices"] = s.referenceNameSlotIndices;
    j["primaryReferenceCdfOnly"] = s.primaryReferenceCdfOnly;
    j["generateObuExtensionHeader"] = s.generateObuExtensionHeader;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1ProfileInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stdProfile"] = s.stdProfile;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1RateControlInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["gopFrameCount"] = s.gopFrameCount;
    j["keyFramePeriod"] = s.keyFramePeriod;
    j["consecutiveBipredictiveFrameCount"] = s.consecutiveBipredictiveFrameCount;
    j["temporalLayerCount"] = s.temporalLayerCount;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1QIndexKHR &s) {
    json j;
    j["intraQIndex"] = s.intraQIndex;
    j["predictiveQIndex"] = s.predictiveQIndex;
    j["bipredictiveQIndex"] = s.bipredictiveQIndex;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1FrameSizeKHR &s) {
    json j;
    j["intraFrameSize"] = s.intraFrameSize;
    j["predictiveFrameSize"] = s.predictiveFrameSize;
    j["bipredictiveFrameSize"] = s.bipredictiveFrameSize;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1GopRemainingFrameInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useGopRemainingFrames"] = s.useGopRemainingFrames;
    j["gopRemainingIntra"] = s.gopRemainingIntra;
    j["gopRemainingPredictive"] = s.gopRemainingPredictive;
    j["gopRemainingBipredictive"] = s.gopRemainingBipredictive;
    return j.dump();
}

inline std::string ToJson(const VkVideoEncodeAV1RateControlLayerInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["useMinQIndex"] = s.useMinQIndex;
    j["minQIndex"] = s.minQIndex;
    j["useMaxQIndex"] = s.useMaxQIndex;
    j["maxQIndex"] = s.maxQIndex;
    j["useMaxFrameSize"] = s.useMaxFrameSize;
    j["maxFrameSize"] = s.maxFrameSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceInheritedViewportScissorFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["inheritedViewportScissor2D"] = s.inheritedViewportScissor2D;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceViewportScissorInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["viewportScissor2D"] = s.viewportScissor2D;
    j["viewportDepthCount"] = s.viewportDepthCount;
    j["pViewportDepths"] = s.pViewportDepths;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["ycbcr2plane444Formats"] = s.ycbcr2plane444Formats;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProvokingVertexFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["provokingVertexLast"] = s.provokingVertexLast;
    j["transformFeedbackPreservesProvokingVertex"] = s.transformFeedbackPreservesProvokingVertex;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceProvokingVertexPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["provokingVertexModePerPipeline"] = s.provokingVertexModePerPipeline;
    j["transformFeedbackPreservesTriangleFanProvokingVertex"] = s.transformFeedbackPreservesTriangleFanProvokingVertex;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["provokingVertexMode"] = s.provokingVertexMode;
    return j.dump();
}

inline std::string ToJson(const VkCuModuleCreateInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkCuModuleTexturingModeCreateInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["use64bitTexturing"] = s.use64bitTexturing;
    return j.dump();
}

inline std::string ToJson(const VkCuFunctionCreateInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["module"] = s.module;
    j["pName"] = s.pName;
    return j.dump();
}

inline std::string ToJson(const VkCuLaunchInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["function"] = s.function;
    j["gridDimX"] = s.gridDimX;
    j["gridDimY"] = s.gridDimY;
    j["gridDimZ"] = s.gridDimZ;
    j["blockDimX"] = s.blockDimX;
    j["blockDimY"] = s.blockDimY;
    j["blockDimZ"] = s.blockDimZ;
    j["sharedMemBytes"] = s.sharedMemBytes;
    j["paramCount"] = s.paramCount;
    j["pParams"] = s.pParams;
    j["extraCount"] = s.extraCount;
    j["pExtras"] = s.pExtras;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorBufferFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorBuffer"] = s.descriptorBuffer;
    j["descriptorBufferCaptureReplay"] = s.descriptorBufferCaptureReplay;
    j["descriptorBufferImageLayoutIgnored"] = s.descriptorBufferImageLayoutIgnored;
    j["descriptorBufferPushDescriptors"] = s.descriptorBufferPushDescriptors;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorBufferPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["combinedImageSamplerDescriptorSingleArray"] = s.combinedImageSamplerDescriptorSingleArray;
    j["bufferlessPushDescriptors"] = s.bufferlessPushDescriptors;
    j["allowSamplerImageViewPostSubmitCreation"] = s.allowSamplerImageViewPostSubmitCreation;
    j["descriptorBufferOffsetAlignment"] = s.descriptorBufferOffsetAlignment;
    j["maxDescriptorBufferBindings"] = s.maxDescriptorBufferBindings;
    j["maxResourceDescriptorBufferBindings"] = s.maxResourceDescriptorBufferBindings;
    j["maxSamplerDescriptorBufferBindings"] = s.maxSamplerDescriptorBufferBindings;
    j["maxEmbeddedImmutableSamplerBindings"] = s.maxEmbeddedImmutableSamplerBindings;
    j["maxEmbeddedImmutableSamplers"] = s.maxEmbeddedImmutableSamplers;
    j["bufferCaptureReplayDescriptorDataSize"] = s.bufferCaptureReplayDescriptorDataSize;
    j["imageCaptureReplayDescriptorDataSize"] = s.imageCaptureReplayDescriptorDataSize;
    j["imageViewCaptureReplayDescriptorDataSize"] = s.imageViewCaptureReplayDescriptorDataSize;
    j["samplerCaptureReplayDescriptorDataSize"] = s.samplerCaptureReplayDescriptorDataSize;
    j["accelerationStructureCaptureReplayDescriptorDataSize"] = s.accelerationStructureCaptureReplayDescriptorDataSize;
    j["samplerDescriptorSize"] = s.samplerDescriptorSize;
    j["combinedImageSamplerDescriptorSize"] = s.combinedImageSamplerDescriptorSize;
    j["sampledImageDescriptorSize"] = s.sampledImageDescriptorSize;
    j["storageImageDescriptorSize"] = s.storageImageDescriptorSize;
    j["uniformTexelBufferDescriptorSize"] = s.uniformTexelBufferDescriptorSize;
    j["robustUniformTexelBufferDescriptorSize"] = s.robustUniformTexelBufferDescriptorSize;
    j["storageTexelBufferDescriptorSize"] = s.storageTexelBufferDescriptorSize;
    j["robustStorageTexelBufferDescriptorSize"] = s.robustStorageTexelBufferDescriptorSize;
    j["uniformBufferDescriptorSize"] = s.uniformBufferDescriptorSize;
    j["robustUniformBufferDescriptorSize"] = s.robustUniformBufferDescriptorSize;
    j["storageBufferDescriptorSize"] = s.storageBufferDescriptorSize;
    j["robustStorageBufferDescriptorSize"] = s.robustStorageBufferDescriptorSize;
    j["inputAttachmentDescriptorSize"] = s.inputAttachmentDescriptorSize;
    j["accelerationStructureDescriptorSize"] = s.accelerationStructureDescriptorSize;
    j["maxSamplerDescriptorBufferRange"] = s.maxSamplerDescriptorBufferRange;
    j["maxResourceDescriptorBufferRange"] = s.maxResourceDescriptorBufferRange;
    j["samplerDescriptorBufferAddressSpaceSize"] = s.samplerDescriptorBufferAddressSpaceSize;
    j["resourceDescriptorBufferAddressSpaceSize"] = s.resourceDescriptorBufferAddressSpaceSize;
    j["descriptorBufferAddressSpaceSize"] = s.descriptorBufferAddressSpaceSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["combinedImageSamplerDensityMapDescriptorSize"] = s.combinedImageSamplerDensityMapDescriptorSize;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorAddressInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["address"] = s.address;
    j["range"] = s.range;
    j["format"] = s.format;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorBufferBindingInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["address"] = s.address;
    j["usage"] = s.usage;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorGetInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["data"] = s.data;
    return j.dump();
}

inline std::string ToJson(const VkBufferCaptureDescriptorDataInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkImageCaptureDescriptorDataInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    return j.dump();
}

inline std::string ToJson(const VkImageViewCaptureDescriptorDataInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageView"] = s.imageView;
    return j.dump();
}

inline std::string ToJson(const VkSamplerCaptureDescriptorDataInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["sampler"] = s.sampler;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureCaptureDescriptorDataInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["accelerationStructure"] = s.accelerationStructure;
    j["accelerationStructureNV"] = s.accelerationStructureNV;
    return j.dump();
}

inline std::string ToJson(const VkOpaqueCaptureDescriptorDataCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["opaqueCaptureDescriptorData"] = s.opaqueCaptureDescriptorData;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderIntegerDotProductFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderIntegerDotProduct"] = s.shaderIntegerDotProduct;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderIntegerDotProductProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["integerDotProduct8BitUnsignedAccelerated"] = s.integerDotProduct8BitUnsignedAccelerated;
    j["integerDotProduct8BitSignedAccelerated"] = s.integerDotProduct8BitSignedAccelerated;
    j["integerDotProduct8BitMixedSignednessAccelerated"] = s.integerDotProduct8BitMixedSignednessAccelerated;
    j["integerDotProduct4x8BitPackedUnsignedAccelerated"] = s.integerDotProduct4x8BitPackedUnsignedAccelerated;
    j["integerDotProduct4x8BitPackedSignedAccelerated"] = s.integerDotProduct4x8BitPackedSignedAccelerated;
    j["integerDotProduct4x8BitPackedMixedSignednessAccelerated"] = s.integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    j["integerDotProduct16BitUnsignedAccelerated"] = s.integerDotProduct16BitUnsignedAccelerated;
    j["integerDotProduct16BitSignedAccelerated"] = s.integerDotProduct16BitSignedAccelerated;
    j["integerDotProduct16BitMixedSignednessAccelerated"] = s.integerDotProduct16BitMixedSignednessAccelerated;
    j["integerDotProduct32BitUnsignedAccelerated"] = s.integerDotProduct32BitUnsignedAccelerated;
    j["integerDotProduct32BitSignedAccelerated"] = s.integerDotProduct32BitSignedAccelerated;
    j["integerDotProduct32BitMixedSignednessAccelerated"] = s.integerDotProduct32BitMixedSignednessAccelerated;
    j["integerDotProduct64BitUnsignedAccelerated"] = s.integerDotProduct64BitUnsignedAccelerated;
    j["integerDotProduct64BitSignedAccelerated"] = s.integerDotProduct64BitSignedAccelerated;
    j["integerDotProduct64BitMixedSignednessAccelerated"] = s.integerDotProduct64BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating8BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    j["integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating16BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating32BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    j["integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] = s.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    j["integerDotProductAccumulatingSaturating64BitSignedAccelerated"] = s.integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    j["integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] = s.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDrmPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hasPrimary"] = s.hasPrimary;
    j["hasRender"] = s.hasRender;
    j["primaryMajor"] = s.primaryMajor;
    j["primaryMinor"] = s.primaryMinor;
    j["renderMajor"] = s.renderMajor;
    j["renderMinor"] = s.renderMinor;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["fragmentShaderBarycentric"] = s.fragmentShaderBarycentric;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["triStripVertexOrderIndependentOfProvokingVertex"] = s.triStripVertexOrderIndependentOfProvokingVertex;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingMotionBlur"] = s.rayTracingMotionBlur;
    j["rayTracingMotionBlurPipelineTraceRaysIndirect"] = s.rayTracingMotionBlurPipelineTraceRaysIndirect;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingValidationFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingValidation"] = s.rayTracingValidation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["spheres"] = s.spheres;
    j["linearSweptSpheres"] = s.linearSweptSpheres;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureGeometryMotionTrianglesDataNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexData"] = s.vertexData;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureMotionInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxInstances"] = s.maxInstances;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkSRTDataNV &s) {
    json j;
    j["sx"] = s.sx;
    j["a"] = s.a;
    j["b"] = s.b;
    j["pvx"] = s.pvx;
    j["sy"] = s.sy;
    j["c"] = s.c;
    j["pvy"] = s.pvy;
    j["sz"] = s.sz;
    j["pvz"] = s.pvz;
    j["qx"] = s.qx;
    j["qy"] = s.qy;
    j["qz"] = s.qz;
    j["qw"] = s.qw;
    j["tx"] = s.tx;
    j["ty"] = s.ty;
    j["tz"] = s.tz;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureSRTMotionInstanceNV &s) {
    json j;
    j["transformT0"] = s.transformT0;
    j["transformT1"] = s.transformT1;
    j["instanceCustomIndex"] = s.instanceCustomIndex;
    j["mask"] = s.mask;
    j["instanceShaderBindingTableRecordOffset"] = s.instanceShaderBindingTableRecordOffset;
    j["flags"] = s.flags;
    j["accelerationStructureReference"] = s.accelerationStructureReference;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureMatrixMotionInstanceNV &s) {
    json j;
    j["transformT0"] = s.transformT0;
    j["transformT1"] = s.transformT1;
    j["instanceCustomIndex"] = s.instanceCustomIndex;
    j["mask"] = s.mask;
    j["instanceShaderBindingTableRecordOffset"] = s.instanceShaderBindingTableRecordOffset;
    j["flags"] = s.flags;
    j["accelerationStructureReference"] = s.accelerationStructureReference;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureMotionInstanceNV &s) {
    json j;
    j["type"] = s.type;
    j["flags"] = s.flags;
    j["data"] = s.data;
    return j.dump();
}

inline std::string ToJson(const VkMemoryGetRemoteAddressInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["handleType"] = s.handleType;
    return j.dump();
}

inline std::string ToJson(const VkImportMemoryBufferCollectionFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["collection"] = s.collection;
    j["index"] = s.index;
    return j.dump();
}

inline std::string ToJson(const VkBufferCollectionImageCreateInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["collection"] = s.collection;
    j["index"] = s.index;
    return j.dump();
}

inline std::string ToJson(const VkBufferCollectionBufferCreateInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["collection"] = s.collection;
    j["index"] = s.index;
    return j.dump();
}

inline std::string ToJson(const VkBufferCollectionCreateInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["collectionToken"] = s.collectionToken;
    return j.dump();
}

inline std::string ToJson(const VkBufferCollectionPropertiesFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryTypeBits"] = s.memoryTypeBits;
    j["bufferCount"] = s.bufferCount;
    j["createInfoIndex"] = s.createInfoIndex;
    j["sysmemPixelFormat"] = s.sysmemPixelFormat;
    j["formatFeatures"] = s.formatFeatures;
    j["sysmemColorSpaceIndex"] = s.sysmemColorSpaceIndex;
    j["samplerYcbcrConversionComponents"] = s.samplerYcbcrConversionComponents;
    j["suggestedYcbcrModel"] = s.suggestedYcbcrModel;
    j["suggestedYcbcrRange"] = s.suggestedYcbcrRange;
    j["suggestedXChromaOffset"] = s.suggestedXChromaOffset;
    j["suggestedYChromaOffset"] = s.suggestedYChromaOffset;
    return j.dump();
}

inline std::string ToJson(const VkBufferConstraintsInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["createInfo"] = s.createInfo;
    j["requiredFormatFeatures"] = s.requiredFormatFeatures;
    j["bufferCollectionConstraints"] = s.bufferCollectionConstraints;
    return j.dump();
}

inline std::string ToJson(const VkSysmemColorSpaceFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorSpace"] = s.colorSpace;
    return j.dump();
}

inline std::string ToJson(const VkImageFormatConstraintsInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageCreateInfo"] = s.imageCreateInfo;
    j["requiredFormatFeatures"] = s.requiredFormatFeatures;
    j["flags"] = s.flags;
    j["sysmemPixelFormat"] = s.sysmemPixelFormat;
    j["colorSpaceCount"] = s.colorSpaceCount;
    j["pColorSpaces"] = s.pColorSpaces;
    return j.dump();
}

inline std::string ToJson(const VkImageConstraintsInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["formatConstraintsCount"] = s.formatConstraintsCount;
    j["pFormatConstraints"] = s.pFormatConstraints;
    j["bufferCollectionConstraints"] = s.bufferCollectionConstraints;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkBufferCollectionConstraintsInfoFUCHSIA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minBufferCount"] = s.minBufferCount;
    j["maxBufferCount"] = s.maxBufferCount;
    j["minBufferCountForCamping"] = s.minBufferCountForCamping;
    j["minBufferCountForDedicatedSlack"] = s.minBufferCountForDedicatedSlack;
    j["minBufferCountForSharedSlack"] = s.minBufferCountForSharedSlack;
    return j.dump();
}

inline std::string ToJson(const VkCudaModuleCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dataSize"] = s.dataSize;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkCudaFunctionCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["module"] = s.module;
    j["pName"] = s.pName;
    return j.dump();
}

inline std::string ToJson(const VkCudaLaunchInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["function"] = s.function;
    j["gridDimX"] = s.gridDimX;
    j["gridDimY"] = s.gridDimY;
    j["gridDimZ"] = s.gridDimZ;
    j["blockDimX"] = s.blockDimX;
    j["blockDimY"] = s.blockDimY;
    j["blockDimZ"] = s.blockDimZ;
    j["sharedMemBytes"] = s.sharedMemBytes;
    j["paramCount"] = s.paramCount;
    j["pParams"] = s.pParams;
    j["extraCount"] = s.extraCount;
    j["pExtras"] = s.pExtras;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["formatRgba10x6WithoutYCbCrSampler"] = s.formatRgba10x6WithoutYCbCrSampler;
    return j.dump();
}

inline std::string ToJson(const VkFormatProperties3 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["linearTilingFeatures"] = s.linearTilingFeatures;
    j["optimalTilingFeatures"] = s.optimalTilingFeatures;
    j["bufferFeatures"] = s.bufferFeatures;
    return j.dump();
}

inline std::string ToJson(const VkFormatProperties3KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkDrmFormatModifierPropertiesList2EXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["drmFormatModifierCount"] = s.drmFormatModifierCount;
    j["pDrmFormatModifierProperties"] = s.pDrmFormatModifierProperties;
    return j.dump();
}

inline std::string ToJson(const VkDrmFormatModifierProperties2EXT &s) {
    json j;
    j["drmFormatModifier"] = s.drmFormatModifier;
    j["drmFormatModifierPlaneCount"] = s.drmFormatModifierPlaneCount;
    j["drmFormatModifierTilingFeatures"] = s.drmFormatModifierTilingFeatures;
    return j.dump();
}

inline std::string ToJson(const VkAndroidHardwareBufferFormatProperties2ANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["externalFormat"] = s.externalFormat;
    j["formatFeatures"] = s.formatFeatures;
    j["samplerYcbcrConversionComponents"] = s.samplerYcbcrConversionComponents;
    j["suggestedYcbcrModel"] = s.suggestedYcbcrModel;
    j["suggestedYcbcrRange"] = s.suggestedYcbcrRange;
    j["suggestedXChromaOffset"] = s.suggestedXChromaOffset;
    j["suggestedYChromaOffset"] = s.suggestedYChromaOffset;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRenderingCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["viewMask"] = s.viewMask;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentFormats"] = s.pColorAttachmentFormats;
    j["depthAttachmentFormat"] = s.depthAttachmentFormat;
    j["stencilAttachmentFormat"] = s.stencilAttachmentFormat;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRenderingCreateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderingInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["renderArea"] = s.renderArea;
    j["layerCount"] = s.layerCount;
    j["viewMask"] = s.viewMask;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachments"] = s.pColorAttachments;
    j["pDepthAttachment"] = s.pDepthAttachment;
    j["pStencilAttachment"] = s.pStencilAttachment;
    return j.dump();
}

inline std::string ToJson(const VkRenderingInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderingEndInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAttachmentInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageView"] = s.imageView;
    j["imageLayout"] = s.imageLayout;
    j["resolveMode"] = s.resolveMode;
    j["resolveImageView"] = s.resolveImageView;
    j["resolveImageLayout"] = s.resolveImageLayout;
    j["loadOp"] = s.loadOp;
    j["storeOp"] = s.storeOp;
    j["clearValue"] = s.clearValue;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAttachmentInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderingFragmentShadingRateAttachmentInfoKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageView"] = s.imageView;
    j["imageLayout"] = s.imageLayout;
    j["shadingRateAttachmentTexelSize"] = s.shadingRateAttachmentTexelSize;
    return j.dump();
}

inline std::string ToJson(const VkRenderingFragmentDensityMapAttachmentInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageView"] = s.imageView;
    j["imageLayout"] = s.imageLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDynamicRenderingFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dynamicRendering"] = s.dynamicRendering;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDynamicRenderingFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceRenderingInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["viewMask"] = s.viewMask;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentFormats"] = s.pColorAttachmentFormats;
    j["depthAttachmentFormat"] = s.depthAttachmentFormat;
    j["stencilAttachmentFormat"] = s.stencilAttachmentFormat;
    j["rasterizationSamples"] = s.rasterizationSamples;
    return j.dump();
}

inline std::string ToJson(const VkCommandBufferInheritanceRenderingInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentSampleCountInfoAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentSamples"] = s.pColorAttachmentSamples;
    j["depthStencilAttachmentSamples"] = s.depthStencilAttachmentSamples;
    return j.dump();
}

inline std::string ToJson(const VkAttachmentSampleCountInfoNV &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMultiviewPerViewAttributesInfoNVX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["perViewAttributes"] = s.perViewAttributes;
    j["perViewAttributesPositionXOnly"] = s.perViewAttributesPositionXOnly;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageViewMinLodFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minLod"] = s.minLod;
    return j.dump();
}

inline std::string ToJson(const VkImageViewMinLodCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minLod"] = s.minLod;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rasterizationOrderColorAttachmentAccess"] = s.rasterizationOrderColorAttachmentAccess;
    j["rasterizationOrderDepthAttachmentAccess"] = s.rasterizationOrderDepthAttachmentAccess;
    j["rasterizationOrderStencilAttachmentAccess"] = s.rasterizationOrderStencilAttachmentAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLinearColorAttachmentFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["linearColorAttachment"] = s.linearColorAttachment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["graphicsPipelineLibrary"] = s.graphicsPipelineLibrary;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineBinaryFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBinaries"] = s.pipelineBinaries;
    return j.dump();
}

inline std::string ToJson(const VkDevicePipelineBinaryInternalCacheControlKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["disableInternalCache"] = s.disableInternalCache;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineBinaryPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineBinaryInternalCache"] = s.pipelineBinaryInternalCache;
    j["pipelineBinaryInternalCacheControl"] = s.pipelineBinaryInternalCacheControl;
    j["pipelineBinaryPrefersInternalCache"] = s.pipelineBinaryPrefersInternalCache;
    j["pipelineBinaryPrecompiledInternalCache"] = s.pipelineBinaryPrecompiledInternalCache;
    j["pipelineBinaryCompressedData"] = s.pipelineBinaryCompressedData;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["graphicsPipelineLibraryFastLinking"] = s.graphicsPipelineLibraryFastLinking;
    j["graphicsPipelineLibraryIndependentInterpolationDecoration"] = s.graphicsPipelineLibraryIndependentInterpolationDecoration;
    return j.dump();
}

inline std::string ToJson(const VkGraphicsPipelineLibraryCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorSetHostMapping"] = s.descriptorSetHostMapping;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetBindingReferenceVALVE &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorSetLayout"] = s.descriptorSetLayout;
    j["binding"] = s.binding;
    return j.dump();
}

inline std::string ToJson(const VkDescriptorSetLayoutHostMappingInfoVALVE &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorOffset"] = s.descriptorOffset;
    j["descriptorSize"] = s.descriptorSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceNestedCommandBufferFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["nestedCommandBuffer"] = s.nestedCommandBuffer;
    j["nestedCommandBufferRendering"] = s.nestedCommandBufferRendering;
    j["nestedCommandBufferSimultaneousUse"] = s.nestedCommandBufferSimultaneousUse;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceNestedCommandBufferPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxCommandBufferNestingLevel"] = s.maxCommandBufferNestingLevel;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderModuleIdentifier"] = s.shaderModuleIdentifier;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderModuleIdentifierAlgorithmUUID"] = s.shaderModuleIdentifierAlgorithmUUID;
    return j.dump();
}

inline std::string ToJson(const VkPipelineShaderStageModuleIdentifierCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["identifierSize"] = s.identifierSize;
    j["pIdentifier"] = s.pIdentifier;
    return j.dump();
}

inline std::string ToJson(const VkShaderModuleIdentifierEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["identifierSize"] = s.identifierSize;
    j["identifier"] = s.identifier;
    return j.dump();
}

inline std::string ToJson(const VkImageCompressionControlEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["compressionControlPlaneCount"] = s.compressionControlPlaneCount;
    j["pFixedRateFlags"] = s.pFixedRateFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageCompressionControlFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageCompressionControl"] = s.imageCompressionControl;
    return j.dump();
}

inline std::string ToJson(const VkImageCompressionPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageCompressionFlags"] = s.imageCompressionFlags;
    j["imageCompressionFixedRateFlags"] = s.imageCompressionFixedRateFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageCompressionControlSwapchain"] = s.imageCompressionControlSwapchain;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresource2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageSubresource"] = s.imageSubresource;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresource2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageSubresource2EXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceLayout2 &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subresourceLayout"] = s.subresourceLayout;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceLayout2KHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSubresourceLayout2EXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreationControlEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["disallowMerging"] = s.disallowMerging;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreationFeedbackInfoEXT &s) {
    json j;
    j["postMergeSubpassCount"] = s.postMergeSubpassCount;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassCreationFeedbackCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pRenderPassFeedback"] = s.pRenderPassFeedback;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassSubpassFeedbackInfoEXT &s) {
    json j;
    j["subpassMergeStatus"] = s.subpassMergeStatus;
    j["description"] = s.description;
    j["postMergeIndex"] = s.postMergeIndex;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassSubpassFeedbackCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pSubpassFeedback"] = s.pSubpassFeedback;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["subpassMergeFeedback"] = s.subpassMergeFeedback;
    return j.dump();
}

inline std::string ToJson(const VkMicromapBuildInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["type"] = s.type;
    j["flags"] = s.flags;
    j["mode"] = s.mode;
    j["dstMicromap"] = s.dstMicromap;
    j["usageCountsCount"] = s.usageCountsCount;
    j["pUsageCounts"] = s.pUsageCounts;
    j["ppUsageCounts"] = s.ppUsageCounts;
    j["data"] = s.data;
    j["scratchData"] = s.scratchData;
    j["triangleArray"] = s.triangleArray;
    j["triangleArrayStride"] = s.triangleArrayStride;
    return j.dump();
}

inline std::string ToJson(const VkMicromapCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["createFlags"] = s.createFlags;
    j["buffer"] = s.buffer;
    j["offset"] = s.offset;
    j["size"] = s.size;
    j["type"] = s.type;
    j["deviceAddress"] = s.deviceAddress;
    return j.dump();
}

inline std::string ToJson(const VkMicromapVersionInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pVersionData"] = s.pVersionData;
    return j.dump();
}

inline std::string ToJson(const VkCopyMicromapInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkCopyMicromapToMemoryInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkCopyMemoryToMicromapInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["src"] = s.src;
    j["dst"] = s.dst;
    j["mode"] = s.mode;
    return j.dump();
}

inline std::string ToJson(const VkMicromapBuildSizesInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["micromapSize"] = s.micromapSize;
    j["buildScratchSize"] = s.buildScratchSize;
    j["discardable"] = s.discardable;
    return j.dump();
}

inline std::string ToJson(const VkMicromapUsageEXT &s) {
    json j;
    j["count"] = s.count;
    j["subdivisionLevel"] = s.subdivisionLevel;
    j["format"] = s.format;
    return j.dump();
}

inline std::string ToJson(const VkMicromapTriangleEXT &s) {
    json j;
    j["dataOffset"] = s.dataOffset;
    j["subdivisionLevel"] = s.subdivisionLevel;
    j["format"] = s.format;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceOpacityMicromapFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["micromap"] = s.micromap;
    j["micromapCaptureReplay"] = s.micromapCaptureReplay;
    j["micromapHostCommands"] = s.micromapHostCommands;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceOpacityMicromapPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxOpacity2StateSubdivisionLevel"] = s.maxOpacity2StateSubdivisionLevel;
    j["maxOpacity4StateSubdivisionLevel"] = s.maxOpacity4StateSubdivisionLevel;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureTrianglesOpacityMicromapEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["indexType"] = s.indexType;
    j["indexBuffer"] = s.indexBuffer;
    j["indexStride"] = s.indexStride;
    j["baseTriangle"] = s.baseTriangle;
    j["usageCountsCount"] = s.usageCountsCount;
    j["pUsageCounts"] = s.pUsageCounts;
    j["ppUsageCounts"] = s.ppUsageCounts;
    j["micromap"] = s.micromap;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDisplacementMicromapFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displacementMicromap"] = s.displacementMicromap;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDisplacementMicromapPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxDisplacementMicromapSubdivisionLevel"] = s.maxDisplacementMicromapSubdivisionLevel;
    return j.dump();
}

inline std::string ToJson(const VkAccelerationStructureTrianglesDisplacementMicromapNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["displacementBiasAndScaleFormat"] = s.displacementBiasAndScaleFormat;
    j["displacementVectorFormat"] = s.displacementVectorFormat;
    j["displacementBiasAndScaleBuffer"] = s.displacementBiasAndScaleBuffer;
    j["displacementBiasAndScaleStride"] = s.displacementBiasAndScaleStride;
    j["displacementVectorBuffer"] = s.displacementVectorBuffer;
    j["displacementVectorStride"] = s.displacementVectorStride;
    j["displacedMicromapPrimitiveFlags"] = s.displacedMicromapPrimitiveFlags;
    j["displacedMicromapPrimitiveFlagsStride"] = s.displacedMicromapPrimitiveFlagsStride;
    j["indexType"] = s.indexType;
    j["indexBuffer"] = s.indexBuffer;
    j["indexStride"] = s.indexStride;
    j["baseTriangle"] = s.baseTriangle;
    j["usageCountsCount"] = s.usageCountsCount;
    j["pUsageCounts"] = s.pUsageCounts;
    j["ppUsageCounts"] = s.ppUsageCounts;
    j["micromap"] = s.micromap;
    return j.dump();
}

inline std::string ToJson(const VkPipelinePropertiesIdentifierEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineIdentifier"] = s.pipelineIdentifier;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelinePropertiesFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelinePropertiesIdentifier"] = s.pipelinePropertiesIdentifier;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderEarlyAndLateFragmentTests"] = s.shaderEarlyAndLateFragmentTests;
    return j.dump();
}

inline std::string ToJson(const VkExternalMemoryAcquireUnmodifiedEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["acquireUnmodifiedMemory"] = s.acquireUnmodifiedMemory;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalObjectCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["exportObjectType"] = s.exportObjectType;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalObjectsInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalDeviceInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mtlDevice"] = s.mtlDevice;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalCommandQueueInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queue"] = s.queue;
    j["mtlCommandQueue"] = s.mtlCommandQueue;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalBufferInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memory"] = s.memory;
    j["mtlBuffer"] = s.mtlBuffer;
    return j.dump();
}

inline std::string ToJson(const VkImportMetalBufferInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mtlBuffer"] = s.mtlBuffer;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalTextureInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["imageView"] = s.imageView;
    j["bufferView"] = s.bufferView;
    j["plane"] = s.plane;
    j["mtlTexture"] = s.mtlTexture;
    return j.dump();
}

inline std::string ToJson(const VkImportMetalTextureInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["plane"] = s.plane;
    j["mtlTexture"] = s.mtlTexture;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalIOSurfaceInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["image"] = s.image;
    j["ioSurface"] = s.ioSurface;
    return j.dump();
}

inline std::string ToJson(const VkImportMetalIOSurfaceInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["ioSurface"] = s.ioSurface;
    return j.dump();
}

inline std::string ToJson(const VkExportMetalSharedEventInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["semaphore"] = s.semaphore;
    j["event"] = s.event;
    j["mtlSharedEvent"] = s.mtlSharedEvent;
    return j.dump();
}

inline std::string ToJson(const VkImportMetalSharedEventInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mtlSharedEvent"] = s.mtlSharedEvent;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["nonSeamlessCubeMap"] = s.nonSeamlessCubeMap;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineRobustnessFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineRobustness"] = s.pipelineRobustness;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineRobustnessFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRobustnessCreateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["storageBuffers"] = s.storageBuffers;
    j["uniformBuffers"] = s.uniformBuffers;
    j["vertexInputs"] = s.vertexInputs;
    j["images"] = s.images;
    return j.dump();
}

inline std::string ToJson(const VkPipelineRobustnessCreateInfoEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineRobustnessProperties &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["defaultRobustnessStorageBuffers"] = s.defaultRobustnessStorageBuffers;
    j["defaultRobustnessUniformBuffers"] = s.defaultRobustnessUniformBuffers;
    j["defaultRobustnessVertexInputs"] = s.defaultRobustnessVertexInputs;
    j["defaultRobustnessImages"] = s.defaultRobustnessImages;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineRobustnessPropertiesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkImageViewSampleWeightCreateInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["filterCenter"] = s.filterCenter;
    j["filterSize"] = s.filterSize;
    j["numPhases"] = s.numPhases;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageProcessingFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["textureSampleWeighted"] = s.textureSampleWeighted;
    j["textureBoxFilter"] = s.textureBoxFilter;
    j["textureBlockMatch"] = s.textureBlockMatch;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageProcessingPropertiesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxWeightFilterPhases"] = s.maxWeightFilterPhases;
    j["maxWeightFilterDimension"] = s.maxWeightFilterDimension;
    j["maxBlockMatchRegion"] = s.maxBlockMatchRegion;
    j["maxBoxFilterBlockSize"] = s.maxBoxFilterBlockSize;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceTilePropertiesFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["tileProperties"] = s.tileProperties;
    return j.dump();
}

inline std::string ToJson(const VkTilePropertiesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["tileSize"] = s.tileSize;
    j["apronSize"] = s.apronSize;
    j["origin"] = s.origin;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAmigoProfilingFeaturesSEC &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["amigoProfiling"] = s.amigoProfiling;
    return j.dump();
}

inline std::string ToJson(const VkAmigoProfilingSubmitInfoSEC &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["firstDrawTimestamp"] = s.firstDrawTimestamp;
    j["swapBufferTimestamp"] = s.swapBufferTimestamp;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["attachmentFeedbackLoopLayout"] = s.attachmentFeedbackLoopLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAddressBindingReportFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["reportAddressBinding"] = s.reportAddressBinding;
    return j.dump();
}

inline std::string ToJson(const VkDeviceAddressBindingCallbackDataEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["baseAddress"] = s.baseAddress;
    j["size"] = s.size;
    j["bindingType"] = s.bindingType;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceOpticalFlowFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["opticalFlow"] = s.opticalFlow;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceOpticalFlowPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportedOutputGridSizes"] = s.supportedOutputGridSizes;
    j["supportedHintGridSizes"] = s.supportedHintGridSizes;
    j["hintSupported"] = s.hintSupported;
    j["costSupported"] = s.costSupported;
    j["bidirectionalFlowSupported"] = s.bidirectionalFlowSupported;
    j["globalFlowSupported"] = s.globalFlowSupported;
    j["minWidth"] = s.minWidth;
    j["minHeight"] = s.minHeight;
    j["maxWidth"] = s.maxWidth;
    j["maxHeight"] = s.maxHeight;
    j["maxNumRegionsOfInterest"] = s.maxNumRegionsOfInterest;
    return j.dump();
}

inline std::string ToJson(const VkOpticalFlowImageFormatInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["usage"] = s.usage;
    return j.dump();
}

inline std::string ToJson(const VkOpticalFlowImageFormatPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    return j.dump();
}

inline std::string ToJson(const VkOpticalFlowSessionCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["width"] = s.width;
    j["height"] = s.height;
    j["imageFormat"] = s.imageFormat;
    j["flowVectorFormat"] = s.flowVectorFormat;
    j["costFormat"] = s.costFormat;
    j["outputGridSize"] = s.outputGridSize;
    j["hintGridSize"] = s.hintGridSize;
    j["performanceLevel"] = s.performanceLevel;
    j["flags"] = s.flags;
    return j.dump();
}

inline std::string ToJson(const VkOpticalFlowSessionCreatePrivateDataInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["id"] = s.id;
    j["size"] = s.size;
    j["pPrivateData"] = s.pPrivateData;
    return j.dump();
}

inline std::string ToJson(const VkOpticalFlowExecuteInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["regionCount"] = s.regionCount;
    j["pRegions"] = s.pRegions;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFaultFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["deviceFault"] = s.deviceFault;
    j["deviceFaultVendorBinary"] = s.deviceFaultVendorBinary;
    return j.dump();
}

inline std::string ToJson(const VkDeviceFaultAddressInfoEXT &s) {
    json j;
    j["addressType"] = s.addressType;
    j["reportedAddress"] = s.reportedAddress;
    j["addressPrecision"] = s.addressPrecision;
    return j.dump();
}

inline std::string ToJson(const VkDeviceFaultVendorInfoEXT &s) {
    json j;
    j["description"] = s.description;
    j["vendorFaultCode"] = s.vendorFaultCode;
    j["vendorFaultData"] = s.vendorFaultData;
    return j.dump();
}

inline std::string ToJson(const VkDeviceFaultCountsEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["addressInfoCount"] = s.addressInfoCount;
    j["vendorInfoCount"] = s.vendorInfoCount;
    j["vendorBinarySize"] = s.vendorBinarySize;
    return j.dump();
}

inline std::string ToJson(const VkDeviceFaultInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["description"] = s.description;
    j["pAddressInfos"] = s.pAddressInfos;
    j["pVendorInfos"] = s.pVendorInfos;
    j["pVendorBinaryData"] = s.pVendorBinaryData;
    return j.dump();
}

inline std::string ToJson(const VkDeviceFaultVendorBinaryHeaderVersionOneEXT &s) {
    json j;
    j["headerSize"] = s.headerSize;
    j["headerVersion"] = s.headerVersion;
    j["vendorID"] = s.vendorID;
    j["deviceID"] = s.deviceID;
    j["driverVersion"] = s.driverVersion;
    j["pipelineCacheUUID"] = s.pipelineCacheUUID;
    j["applicationNameOffset"] = s.applicationNameOffset;
    j["applicationVersion"] = s.applicationVersion;
    j["engineNameOffset"] = s.engineNameOffset;
    j["engineVersion"] = s.engineVersion;
    j["apiVersion"] = s.apiVersion;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineLibraryGroupHandles"] = s.pipelineLibraryGroupHandles;
    return j.dump();
}

inline std::string ToJson(const VkDepthBiasInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthBiasConstantFactor"] = s.depthBiasConstantFactor;
    j["depthBiasClamp"] = s.depthBiasClamp;
    j["depthBiasSlopeFactor"] = s.depthBiasSlopeFactor;
    return j.dump();
}

inline std::string ToJson(const VkDepthBiasRepresentationInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthBiasRepresentation"] = s.depthBiasRepresentation;
    j["depthBiasExact"] = s.depthBiasExact;
    return j.dump();
}

inline std::string ToJson(const VkDecompressMemoryRegionNV &s) {
    json j;
    j["srcAddress"] = s.srcAddress;
    j["dstAddress"] = s.dstAddress;
    j["compressedSize"] = s.compressedSize;
    j["decompressedSize"] = s.decompressedSize;
    j["decompressionMethod"] = s.decompressionMethod;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCoreMask"] = s.shaderCoreMask;
    j["shaderCoreCount"] = s.shaderCoreCount;
    j["shaderWarpsPerCore"] = s.shaderWarpsPerCore;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCoreBuiltins"] = s.shaderCoreBuiltins;
    return j.dump();
}

inline std::string ToJson(const VkFrameBoundaryEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["frameID"] = s.frameID;
    j["imageCount"] = s.imageCount;
    j["pImages"] = s.pImages;
    j["bufferCount"] = s.bufferCount;
    j["pBuffers"] = s.pBuffers;
    j["tagName"] = s.tagName;
    j["tagSize"] = s.tagSize;
    j["pTag"] = s.pTag;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceFrameBoundaryFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["frameBoundary"] = s.frameBoundary;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dynamicRenderingUnusedAttachments"] = s.dynamicRenderingUnusedAttachments;
    return j.dump();
}

inline std::string ToJson(const VkSurfacePresentModeEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentMode"] = s.presentMode;
    return j.dump();
}

inline std::string ToJson(const VkSurfacePresentScalingCapabilitiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportedPresentScaling"] = s.supportedPresentScaling;
    j["supportedPresentGravityX"] = s.supportedPresentGravityX;
    j["supportedPresentGravityY"] = s.supportedPresentGravityY;
    j["minScaledImageExtent"] = s.minScaledImageExtent;
    j["maxScaledImageExtent"] = s.maxScaledImageExtent;
    return j.dump();
}

inline std::string ToJson(const VkSurfacePresentModeCompatibilityEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentModeCount"] = s.presentModeCount;
    j["pPresentModes"] = s.pPresentModes;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainMaintenance1"] = s.swapchainMaintenance1;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainPresentFenceInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pFences"] = s.pFences;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainPresentModesCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentModeCount"] = s.presentModeCount;
    j["pPresentModes"] = s.pPresentModes;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainPresentModeInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchainCount"] = s.swapchainCount;
    j["pPresentModes"] = s.pPresentModes;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainPresentScalingCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["scalingBehavior"] = s.scalingBehavior;
    j["presentGravityX"] = s.presentGravityX;
    j["presentGravityY"] = s.presentGravityY;
    return j.dump();
}

inline std::string ToJson(const VkReleaseSwapchainImagesInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["swapchain"] = s.swapchain;
    j["imageIndexCount"] = s.imageIndexCount;
    j["pImageIndices"] = s.pImageIndices;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthBiasControlFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthBiasControl"] = s.depthBiasControl;
    j["leastRepresentableValueForceUnormRepresentation"] = s.leastRepresentableValueForceUnormRepresentation;
    j["floatRepresentation"] = s.floatRepresentation;
    j["depthBiasExact"] = s.depthBiasExact;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingInvocationReorder"] = s.rayTracingInvocationReorder;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingInvocationReorderReorderingHint"] = s.rayTracingInvocationReorderReorderingHint;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["extendedSparseAddressSpace"] = s.extendedSparseAddressSpace;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["extendedSparseAddressSpaceSize"] = s.extendedSparseAddressSpaceSize;
    j["extendedSparseImageUsageFlags"] = s.extendedSparseImageUsageFlags;
    j["extendedSparseBufferUsageFlags"] = s.extendedSparseBufferUsageFlags;
    return j.dump();
}

inline std::string ToJson(const VkDirectDriverLoadingInfoLUNARG &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["pfnGetInstanceProcAddr"] = s.pfnGetInstanceProcAddr;
    return j.dump();
}

inline std::string ToJson(const VkDirectDriverLoadingListLUNARG &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mode"] = s.mode;
    j["driverCount"] = s.driverCount;
    j["pDrivers"] = s.pDrivers;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multiviewPerViewViewports"] = s.multiviewPerViewViewports;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["rayTracingPositionFetch"] = s.rayTracingPositionFetch;
    return j.dump();
}

inline std::string ToJson(const VkDeviceImageSubresourceInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pCreateInfo"] = s.pCreateInfo;
    j["pSubresource"] = s.pSubresource;
    return j.dump();
}

inline std::string ToJson(const VkDeviceImageSubresourceInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderCorePropertiesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pixelRate"] = s.pixelRate;
    j["texelRate"] = s.texelRate;
    j["fmaRate"] = s.fmaRate;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["multiviewPerViewRenderAreas"] = s.multiviewPerViewRenderAreas;
    return j.dump();
}

inline std::string ToJson(const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["perViewRenderAreaCount"] = s.perViewRenderAreaCount;
    j["pPerViewRenderAreas"] = s.pPerViewRenderAreas;
    return j.dump();
}

inline std::string ToJson(const VkQueryLowLatencySupportNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pQueriedLowLatencyData"] = s.pQueriedLowLatencyData;
    return j.dump();
}

inline std::string ToJson(const VkMemoryMapInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["memory"] = s.memory;
    j["offset"] = s.offset;
    j["size"] = s.size;
    return j.dump();
}

inline std::string ToJson(const VkMemoryMapInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkMemoryUnmapInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["memory"] = s.memory;
    return j.dump();
}

inline std::string ToJson(const VkMemoryUnmapInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderObjectFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderObject"] = s.shaderObject;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderObjectPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderBinaryUUID"] = s.shaderBinaryUUID;
    j["shaderBinaryVersion"] = s.shaderBinaryVersion;
    return j.dump();
}

inline std::string ToJson(const VkShaderCreateInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stage"] = s.stage;
    j["nextStage"] = s.nextStage;
    j["codeType"] = s.codeType;
    j["codeSize"] = s.codeSize;
    j["pCode"] = s.pCode;
    j["pName"] = s.pName;
    j["setLayoutCount"] = s.setLayoutCount;
    j["pSetLayouts"] = s.pSetLayouts;
    j["pushConstantRangeCount"] = s.pushConstantRangeCount;
    j["pPushConstantRanges"] = s.pPushConstantRanges;
    j["pSpecializationInfo"] = s.pSpecializationInfo;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderTileImageFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderTileImageColorReadAccess"] = s.shaderTileImageColorReadAccess;
    j["shaderTileImageDepthReadAccess"] = s.shaderTileImageDepthReadAccess;
    j["shaderTileImageStencilReadAccess"] = s.shaderTileImageStencilReadAccess;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderTileImagePropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderTileImageCoherentReadAccelerated"] = s.shaderTileImageCoherentReadAccelerated;
    j["shaderTileImageReadSampleFromPixelRateInvocation"] = s.shaderTileImageReadSampleFromPixelRateInvocation;
    j["shaderTileImageReadFromHelperInvocation"] = s.shaderTileImageReadFromHelperInvocation;
    return j.dump();
}

inline std::string ToJson(const VkImportScreenBufferInfoQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["buffer"] = s.buffer;
    return j.dump();
}

inline std::string ToJson(const VkScreenBufferPropertiesQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["allocationSize"] = s.allocationSize;
    j["memoryTypeBits"] = s.memoryTypeBits;
    return j.dump();
}

inline std::string ToJson(const VkScreenBufferFormatPropertiesQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["format"] = s.format;
    j["externalFormat"] = s.externalFormat;
    j["screenUsage"] = s.screenUsage;
    j["formatFeatures"] = s.formatFeatures;
    j["samplerYcbcrConversionComponents"] = s.samplerYcbcrConversionComponents;
    j["suggestedYcbcrModel"] = s.suggestedYcbcrModel;
    j["suggestedYcbcrRange"] = s.suggestedYcbcrRange;
    j["suggestedXChromaOffset"] = s.suggestedXChromaOffset;
    j["suggestedYChromaOffset"] = s.suggestedYChromaOffset;
    return j.dump();
}

inline std::string ToJson(const VkExternalFormatQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalFormat"] = s.externalFormat;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["screenBufferImport"] = s.screenBufferImport;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrixFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrix"] = s.cooperativeMatrix;
    j["cooperativeMatrixRobustBufferAccess"] = s.cooperativeMatrixRobustBufferAccess;
    return j.dump();
}

inline std::string ToJson(const VkCooperativeMatrixPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["MSize"] = s.MSize;
    j["NSize"] = s.NSize;
    j["KSize"] = s.KSize;
    j["AType"] = s.AType;
    j["BType"] = s.BType;
    j["CType"] = s.CType;
    j["ResultType"] = s.ResultType;
    j["saturatingAccumulation"] = s.saturatingAccumulation;
    j["scope"] = s.scope;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrixPropertiesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrixSupportedStages"] = s.cooperativeMatrixSupportedStages;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderEnqueuePropertiesAMDX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxExecutionGraphDepth"] = s.maxExecutionGraphDepth;
    j["maxExecutionGraphShaderOutputNodes"] = s.maxExecutionGraphShaderOutputNodes;
    j["maxExecutionGraphShaderPayloadSize"] = s.maxExecutionGraphShaderPayloadSize;
    j["maxExecutionGraphShaderPayloadCount"] = s.maxExecutionGraphShaderPayloadCount;
    j["executionGraphDispatchAddressAlignment"] = s.executionGraphDispatchAddressAlignment;
    j["maxExecutionGraphWorkgroupCount"] = s.maxExecutionGraphWorkgroupCount;
    j["maxExecutionGraphWorkgroups"] = s.maxExecutionGraphWorkgroups;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderEnqueueFeaturesAMDX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderEnqueue"] = s.shaderEnqueue;
    j["shaderMeshEnqueue"] = s.shaderMeshEnqueue;
    return j.dump();
}

inline std::string ToJson(const VkExecutionGraphPipelineCreateInfoAMDX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["flags"] = s.flags;
    j["stageCount"] = s.stageCount;
    j["pStages"] = s.pStages;
    j["pLibraryInfo"] = s.pLibraryInfo;
    j["layout"] = s.layout;
    j["basePipelineHandle"] = s.basePipelineHandle;
    j["basePipelineIndex"] = s.basePipelineIndex;
    return j.dump();
}

inline std::string ToJson(const VkPipelineShaderStageNodeCreateInfoAMDX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pName"] = s.pName;
    j["index"] = s.index;
    return j.dump();
}

inline std::string ToJson(const VkExecutionGraphPipelineScratchSizeAMDX &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minSize"] = s.minSize;
    j["maxSize"] = s.maxSize;
    j["sizeGranularity"] = s.sizeGranularity;
    return j.dump();
}

inline std::string ToJson(const VkDispatchGraphInfoAMDX &s) {
    json j;
    j["nodeIndex"] = s.nodeIndex;
    j["payloadCount"] = s.payloadCount;
    j["payloads"] = s.payloads;
    j["payloadStride"] = s.payloadStride;
    return j.dump();
}

inline std::string ToJson(const VkDispatchGraphCountInfoAMDX &s) {
    json j;
    j["count"] = s.count;
    j["infos"] = s.infos;
    j["stride"] = s.stride;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceAntiLagFeaturesAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["antiLag"] = s.antiLag;
    return j.dump();
}

inline std::string ToJson(const VkAntiLagDataAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["mode"] = s.mode;
    j["maxFPS"] = s.maxFPS;
    j["pPresentationInfo"] = s.pPresentationInfo;
    return j.dump();
}

inline std::string ToJson(const VkAntiLagPresentationInfoAMD &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stage"] = s.stage;
    j["frameIndex"] = s.frameIndex;
    return j.dump();
}

inline std::string ToJson(const VkBindMemoryStatus &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pResult"] = s.pResult;
    return j.dump();
}

inline std::string ToJson(const VkBindMemoryStatusKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkBindDescriptorSetsInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stageFlags"] = s.stageFlags;
    j["layout"] = s.layout;
    j["firstSet"] = s.firstSet;
    j["descriptorSetCount"] = s.descriptorSetCount;
    j["pDescriptorSets"] = s.pDescriptorSets;
    j["dynamicOffsetCount"] = s.dynamicOffsetCount;
    j["pDynamicOffsets"] = s.pDynamicOffsets;
    return j.dump();
}

inline std::string ToJson(const VkBindDescriptorSetsInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPushConstantsInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["layout"] = s.layout;
    j["stageFlags"] = s.stageFlags;
    j["offset"] = s.offset;
    j["size"] = s.size;
    j["pValues"] = s.pValues;
    return j.dump();
}

inline std::string ToJson(const VkPushConstantsInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPushDescriptorSetInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stageFlags"] = s.stageFlags;
    j["layout"] = s.layout;
    j["set"] = s.set;
    j["descriptorWriteCount"] = s.descriptorWriteCount;
    j["pDescriptorWrites"] = s.pDescriptorWrites;
    return j.dump();
}

inline std::string ToJson(const VkPushDescriptorSetInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPushDescriptorSetWithTemplateInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorUpdateTemplate"] = s.descriptorUpdateTemplate;
    j["layout"] = s.layout;
    j["set"] = s.set;
    j["pData"] = s.pData;
    return j.dump();
}

inline std::string ToJson(const VkPushDescriptorSetWithTemplateInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkSetDescriptorBufferOffsetsInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stageFlags"] = s.stageFlags;
    j["layout"] = s.layout;
    j["firstSet"] = s.firstSet;
    j["setCount"] = s.setCount;
    j["pBufferIndices"] = s.pBufferIndices;
    j["pOffsets"] = s.pOffsets;
    return j.dump();
}

inline std::string ToJson(const VkBindDescriptorBufferEmbeddedSamplersInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stageFlags"] = s.stageFlags;
    j["layout"] = s.layout;
    j["set"] = s.set;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCubicClampFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cubicRangeClamp"] = s.cubicRangeClamp;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["ycbcrDegamma"] = s.ycbcrDegamma;
    return j.dump();
}

inline std::string ToJson(const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["enableYDegamma"] = s.enableYDegamma;
    j["enableCbCrDegamma"] = s.enableCbCrDegamma;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCubicWeightsFeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["selectableCubicWeights"] = s.selectableCubicWeights;
    return j.dump();
}

inline std::string ToJson(const VkSamplerCubicWeightsCreateInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cubicWeights"] = s.cubicWeights;
    return j.dump();
}

inline std::string ToJson(const VkBlitImageCubicWeightsInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cubicWeights"] = s.cubicWeights;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageProcessing2FeaturesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["textureBlockMatch2"] = s.textureBlockMatch2;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageProcessing2PropertiesQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maxBlockMatchWindow"] = s.maxBlockMatchWindow;
    return j.dump();
}

inline std::string ToJson(const VkSamplerBlockMatchWindowCreateInfoQCOM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["windowExtent"] = s.windowExtent;
    j["windowCompareMode"] = s.windowCompareMode;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["descriptorPoolOverallocation"] = s.descriptorPoolOverallocation;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceLayeredDriverPropertiesMSFT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["underlyingAPI"] = s.underlyingAPI;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePerStageDescriptorSetFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["perStageDescriptorSet"] = s.perStageDescriptorSet;
    j["dynamicPipelineLayout"] = s.dynamicPipelineLayout;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalFormatResolveFeaturesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["externalFormatResolve"] = s.externalFormatResolve;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceExternalFormatResolvePropertiesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["nullColorAttachmentWithExternalFormatResolve"] = s.nullColorAttachmentWithExternalFormatResolve;
    j["externalFormatResolveChromaOffsetX"] = s.externalFormatResolveChromaOffsetX;
    j["externalFormatResolveChromaOffsetY"] = s.externalFormatResolveChromaOffsetY;
    return j.dump();
}

inline std::string ToJson(const VkAndroidHardwareBufferFormatResolvePropertiesANDROID &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorAttachmentFormat"] = s.colorAttachmentFormat;
    return j.dump();
}

inline std::string ToJson(const VkLatencySleepModeInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["lowLatencyMode"] = s.lowLatencyMode;
    j["lowLatencyBoost"] = s.lowLatencyBoost;
    j["minimumIntervalUs"] = s.minimumIntervalUs;
    return j.dump();
}

inline std::string ToJson(const VkLatencySleepInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["signalSemaphore"] = s.signalSemaphore;
    j["value"] = s.value;
    return j.dump();
}

inline std::string ToJson(const VkSetLatencyMarkerInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentID"] = s.presentID;
    j["marker"] = s.marker;
    return j.dump();
}

inline std::string ToJson(const VkGetLatencyMarkerInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["timingCount"] = s.timingCount;
    j["pTimings"] = s.pTimings;
    return j.dump();
}

inline std::string ToJson(const VkLatencyTimingsFrameReportNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentID"] = s.presentID;
    j["inputSampleTimeUs"] = s.inputSampleTimeUs;
    j["simStartTimeUs"] = s.simStartTimeUs;
    j["simEndTimeUs"] = s.simEndTimeUs;
    j["renderSubmitStartTimeUs"] = s.renderSubmitStartTimeUs;
    j["renderSubmitEndTimeUs"] = s.renderSubmitEndTimeUs;
    j["presentStartTimeUs"] = s.presentStartTimeUs;
    j["presentEndTimeUs"] = s.presentEndTimeUs;
    j["driverStartTimeUs"] = s.driverStartTimeUs;
    j["driverEndTimeUs"] = s.driverEndTimeUs;
    j["osRenderQueueStartTimeUs"] = s.osRenderQueueStartTimeUs;
    j["osRenderQueueEndTimeUs"] = s.osRenderQueueEndTimeUs;
    j["gpuRenderStartTimeUs"] = s.gpuRenderStartTimeUs;
    j["gpuRenderEndTimeUs"] = s.gpuRenderEndTimeUs;
    return j.dump();
}

inline std::string ToJson(const VkOutOfBandQueueTypeInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["queueType"] = s.queueType;
    return j.dump();
}

inline std::string ToJson(const VkLatencySubmissionPresentIdNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentID"] = s.presentID;
    return j.dump();
}

inline std::string ToJson(const VkSwapchainLatencyCreateInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["latencyModeEnable"] = s.latencyModeEnable;
    return j.dump();
}

inline std::string ToJson(const VkLatencySurfaceCapabilitiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentModeCount"] = s.presentModeCount;
    j["pPresentModes"] = s.pPresentModes;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCudaKernelLaunchFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cudaKernelLaunchFeatures"] = s.cudaKernelLaunchFeatures;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCudaKernelLaunchPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["computeCapabilityMinor"] = s.computeCapabilityMinor;
    j["computeCapabilityMajor"] = s.computeCapabilityMajor;
    return j.dump();
}

inline std::string ToJson(const VkDeviceQueueShaderCoreControlCreateInfoARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderCoreCount"] = s.shaderCoreCount;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSchedulingControlsFeaturesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["schedulingControls"] = s.schedulingControls;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceSchedulingControlsPropertiesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["schedulingControlsFlags"] = s.schedulingControlsFlags;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["relaxedLineRasterization"] = s.relaxedLineRasterization;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRenderPassStripedFeaturesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["renderPassStriped"] = s.renderPassStriped;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRenderPassStripedPropertiesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["renderPassStripeGranularity"] = s.renderPassStripeGranularity;
    j["maxRenderPassStripes"] = s.maxRenderPassStripes;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassStripeInfoARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stripeArea"] = s.stripeArea;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassStripeBeginInfoARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stripeInfoCount"] = s.stripeInfoCount;
    j["pStripeInfos"] = s.pStripeInfos;
    return j.dump();
}

inline std::string ToJson(const VkRenderPassStripeSubmitInfoARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["stripeSemaphoreInfoCount"] = s.stripeSemaphoreInfoCount;
    j["pStripeSemaphoreInfos"] = s.pStripeSemaphoreInfos;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePipelineOpacityMicromapFeaturesARM &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pipelineOpacityMicromap"] = s.pipelineOpacityMicromap;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderMaximalReconvergence"] = s.shaderMaximalReconvergence;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSubgroupRotateFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderSubgroupRotate"] = s.shaderSubgroupRotate;
    j["shaderSubgroupRotateClustered"] = s.shaderSubgroupRotateClustered;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderExpectAssumeFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderExpectAssume"] = s.shaderExpectAssume;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderExpectAssumeFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderFloatControls2Features &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderFloatControls2"] = s.shaderFloatControls2;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderFloatControls2FeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDynamicRenderingLocalReadFeatures &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["dynamicRenderingLocalRead"] = s.dynamicRenderingLocalRead;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAttachmentLocationInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentLocations"] = s.pColorAttachmentLocations;
    return j.dump();
}

inline std::string ToJson(const VkRenderingAttachmentLocationInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkRenderingInputAttachmentIndexInfo &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["colorAttachmentCount"] = s.colorAttachmentCount;
    j["pColorAttachmentInputIndices"] = s.pColorAttachmentInputIndices;
    j["pDepthInputAttachmentIndex"] = s.pDepthInputAttachmentIndex;
    j["pStencilInputAttachmentIndex"] = s.pStencilInputAttachmentIndex;
    return j.dump();
}

inline std::string ToJson(const VkRenderingInputAttachmentIndexInfoKHR &s) {
    json j;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderQuadControlFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderQuadControl"] = s.shaderQuadControl;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderFloat16VectorAtomics"] = s.shaderFloat16VectorAtomics;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMapMemoryPlacedFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["memoryMapPlaced"] = s.memoryMapPlaced;
    j["memoryMapRangePlaced"] = s.memoryMapRangePlaced;
    j["memoryUnmapReserve"] = s.memoryUnmapReserve;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceMapMemoryPlacedPropertiesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["minPlacedMemoryMapAlignment"] = s.minPlacedMemoryMapAlignment;
    return j.dump();
}

inline std::string ToJson(const VkMemoryMapPlacedInfoEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["pPlacedAddress"] = s.pPlacedAddress;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderBfloat16FeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderBFloat16Type"] = s.shaderBFloat16Type;
    j["shaderBFloat16DotProduct"] = s.shaderBFloat16DotProduct;
    j["shaderBFloat16CooperativeMatrix"] = s.shaderBFloat16CooperativeMatrix;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceRawAccessChainsFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderRawAccessChains"] = s.shaderRawAccessChains;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCommandBufferInheritanceFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["commandBufferInheritance"] = s.commandBufferInheritance;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageAlignmentControlFeaturesMESA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["imageAlignmentControl"] = s.imageAlignmentControl;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceImageAlignmentControlPropertiesMESA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["supportedImageAlignmentMask"] = s.supportedImageAlignmentMask;
    return j.dump();
}

inline std::string ToJson(const VkImageAlignmentControlCreateInfoMESA &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["maximumRequestedAlignment"] = s.maximumRequestedAlignment;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["shaderReplicatedComposites"] = s.shaderReplicatedComposites;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentModeFifoLatestReady"] = s.presentModeFifoLatestReady;
    return j.dump();
}

inline std::string ToJson(const VkDepthClampRangeEXT &s) {
    json j;
    j["minDepthClamp"] = s.minDepthClamp;
    j["maxDepthClamp"] = s.maxDepthClamp;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrix2FeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrixWorkgroupScope"] = s.cooperativeMatrixWorkgroupScope;
    j["cooperativeMatrixFlexibleDimensions"] = s.cooperativeMatrixFlexibleDimensions;
    j["cooperativeMatrixReductions"] = s.cooperativeMatrixReductions;
    j["cooperativeMatrixConversions"] = s.cooperativeMatrixConversions;
    j["cooperativeMatrixPerElementOperations"] = s.cooperativeMatrixPerElementOperations;
    j["cooperativeMatrixTensorAddressing"] = s.cooperativeMatrixTensorAddressing;
    j["cooperativeMatrixBlockLoads"] = s.cooperativeMatrixBlockLoads;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeMatrix2PropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeMatrixWorkgroupScopeMaxWorkgroupSize"] = s.cooperativeMatrixWorkgroupScopeMaxWorkgroupSize;
    j["cooperativeMatrixFlexibleDimensionsMaxDimension"] = s.cooperativeMatrixFlexibleDimensionsMaxDimension;
    j["cooperativeMatrixWorkgroupScopeReservedSharedMemory"] = s.cooperativeMatrixWorkgroupScopeReservedSharedMemory;
    return j.dump();
}

inline std::string ToJson(const VkCooperativeMatrixFlexibleDimensionsPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["MGranularity"] = s.MGranularity;
    j["NGranularity"] = s.NGranularity;
    j["KGranularity"] = s.KGranularity;
    j["AType"] = s.AType;
    j["BType"] = s.BType;
    j["CType"] = s.CType;
    j["ResultType"] = s.ResultType;
    j["saturatingAccumulation"] = s.saturatingAccumulation;
    j["scope"] = s.scope;
    j["workgroupInvocations"] = s.workgroupInvocations;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceHdrVividFeaturesHUAWEI &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["hdrVivid"] = s.hdrVivid;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["vertexAttributeRobustness"] = s.vertexAttributeRobustness;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceDepthClampZeroOneFeaturesKHR &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["depthClampZeroOne"] = s.depthClampZeroOne;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeVectorFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeVector"] = s.cooperativeVector;
    j["cooperativeVectorTraining"] = s.cooperativeVectorTraining;
    return j.dump();
}

inline std::string ToJson(const VkCooperativeVectorPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["inputType"] = s.inputType;
    j["inputInterpretation"] = s.inputInterpretation;
    j["matrixInterpretation"] = s.matrixInterpretation;
    j["biasInterpretation"] = s.biasInterpretation;
    j["resultType"] = s.resultType;
    j["transpose"] = s.transpose;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDeviceCooperativeVectorPropertiesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["cooperativeVectorSupportedStages"] = s.cooperativeVectorSupportedStages;
    j["cooperativeVectorTrainingFloat16Accumulation"] = s.cooperativeVectorTrainingFloat16Accumulation;
    j["cooperativeVectorTrainingFloat32Accumulation"] = s.cooperativeVectorTrainingFloat32Accumulation;
    j["maxCooperativeVectorComponents"] = s.maxCooperativeVectorComponents;
    return j.dump();
}

inline std::string ToJson(const VkConvertCooperativeVectorMatrixInfoNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["srcSize"] = s.srcSize;
    j["srcData"] = s.srcData;
    j["pDstSize"] = s.pDstSize;
    j["dstData"] = s.dstData;
    j["srcComponentType"] = s.srcComponentType;
    j["dstComponentType"] = s.dstComponentType;
    j["numRows"] = s.numRows;
    j["numColumns"] = s.numColumns;
    j["srcLayout"] = s.srcLayout;
    j["srcStride"] = s.srcStride;
    j["dstLayout"] = s.dstLayout;
    j["dstStride"] = s.dstStride;
    return j.dump();
}

inline std::string ToJson(const VkSetPresentConfigNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["numFramesPerBatch"] = s.numFramesPerBatch;
    j["presentConfigFeedback"] = s.presentConfigFeedback;
    return j.dump();
}

inline std::string ToJson(const VkPhysicalDevicePresentMeteringFeaturesNV &s) {
    json j;
    j["sType"] = string_VkStructureType(s.sType);
    j["pNext"] = s.pNext;
    j["presentMetering"] = s.presentMetering;
    return j.dump();
}
