#!/usr/bin/env python3
import os
import sys
import xml.etree.ElementTree as ET

# Get the current directory (assume vk.xml is in the same directory)
script_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
vk_xml_path = os.path.join(script_dir, "vk.xml")
output_path = os.path.join(script_dir, "./Include/VMI/vk_json_serializers.hpp")

# Parse the vk.xml file
try:
    tree = ET.parse(vk_xml_path)
except Exception as e:
    sys.exit(f"Error parsing vk.xml: {e}")
root = tree.getroot()

# Prepare the header file content
header = '''\
/******************************************************************************
 * Generated file: vk_json_serializers.h
 *
 * This file is autogenerated by gen_json_serializer.py.
 * Do not edit manually.
 ******************************************************************************/

#pragma once

#include <nlohmann/json.hpp>
#include <vulkan/vulkan.h>
#include <string>
#include <vulkan/vk_enum_string_helper.h>

using json = nlohmann::json;

'''

# Generate one function per struct type defined in vk.xml.
# We assume that struct definitions are contained in <type> elements with category="struct"
functions = []

for t in root.findall("types/type"):
    if t.get("category") != "struct":
        continue

    # Determine the struct name
    struct_name = t.get("name")
    if not struct_name:
        name_elem = t.find("name")
        if name_elem is not None:
            struct_name = name_elem.text.strip()
    if not struct_name:
        continue

    # Begin function definition
    func_lines = []
    func_lines.append(f"inline std::string ToJson(const {struct_name} &s) {{")
    func_lines.append("    json j;")

    # Iterate through member elements.
    for member in t.findall("member"):
        # Get the member name.
        name_elem = member.find("name")
        if name_elem is None:
            continue
        member_name = name_elem.text.strip()

        # Try to extract the type for this member.
        # The <member> element can have text and child elements. We look for a child <type>.
        type_elem = member.find("type")
        member_type = ""
        if type_elem is not None and type_elem.text:
            member_type = type_elem.text.strip()

        # If the member is of type VkStructureType, call string_VkStructureType.
        if member_type == "VkStructureType":
            func_lines.append(f"    j[\"{member_name}\"] = string_VkStructureType(s.{member_name});")
        else:
            # For now, we assume a simple assignment works.
            func_lines.append(f"    j[\"{member_name}\"] = s.{member_name};")

    func_lines.append("    return j.dump();")
    func_lines.append("}\n")
    functions.append("\n".join(func_lines))

# Combine header and functions into one output string
generated_code = header + "\n" + "\n".join(functions)

# Write the generated code to the output file
with open(output_path, "w", newline="\n") as f:
    f.write(generated_code)

print(f"Generated JSON serializer header: {output_path}")
